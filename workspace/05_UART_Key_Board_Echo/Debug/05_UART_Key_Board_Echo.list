
05_UART_Key_Board_Echo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037c0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08003948  08003948  00013948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003998  08003998  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003998  08003998  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003998  08003998  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003998  08003998  00013998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800399c  0800399c  0001399c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080039a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00000110  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000120  20000120  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000a2cd  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001a56  00000000  00000000  0002a350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000748  00000000  00000000  0002bda8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000591  00000000  00000000  0002c4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001f172  00000000  00000000  0002ca81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000a0b4  00000000  00000000  0004bbf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000b8a81  00000000  00000000  00055ca7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001c38  00000000  00000000  0010e728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  00110360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003930 	.word	0x08003930

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08003930 	.word	0x08003930

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001dc:	f000 fa1a 	bl	8000614 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e0:	f000 f818 	bl	8000214 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e4:	f000 f8a6 	bl	8000334 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001e8:	f000 f86e 	bl	80002c8 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(flag)
 80001ec:	4b06      	ldr	r3, [pc, #24]	; (8000208 <main+0x30>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d0fb      	beq.n	80001ec <main+0x14>
	  {
		  flag=0;
 80001f4:	4b04      	ldr	r3, [pc, #16]	; (8000208 <main+0x30>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	601a      	str	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, (uint8_t*)"Send: \r\n",sizeof("Send: \r\n")-1, 1);
 80001fa:	2301      	movs	r3, #1
 80001fc:	2208      	movs	r2, #8
 80001fe:	4903      	ldr	r1, [pc, #12]	; (800020c <main+0x34>)
 8000200:	4803      	ldr	r0, [pc, #12]	; (8000210 <main+0x38>)
 8000202:	f002 f991 	bl	8002528 <HAL_UART_Transmit>
	  if(flag)
 8000206:	e7f1      	b.n	80001ec <main+0x14>
 8000208:	20000000 	.word	0x20000000
 800020c:	08003948 	.word	0x08003948
 8000210:	2000002c 	.word	0x2000002c

08000214 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b096      	sub	sp, #88	; 0x58
 8000218:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800021e:	2228      	movs	r2, #40	; 0x28
 8000220:	2100      	movs	r1, #0
 8000222:	4618      	mov	r0, r3
 8000224:	f003 fb58 	bl	80038d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000228:	f107 031c 	add.w	r3, r7, #28
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	605a      	str	r2, [r3, #4]
 8000232:	609a      	str	r2, [r3, #8]
 8000234:	60da      	str	r2, [r3, #12]
 8000236:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000238:	463b      	mov	r3, r7
 800023a:	2200      	movs	r2, #0
 800023c:	601a      	str	r2, [r3, #0]
 800023e:	605a      	str	r2, [r3, #4]
 8000240:	609a      	str	r2, [r3, #8]
 8000242:	60da      	str	r2, [r3, #12]
 8000244:	611a      	str	r2, [r3, #16]
 8000246:	615a      	str	r2, [r3, #20]
 8000248:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800024a:	2302      	movs	r3, #2
 800024c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800024e:	2301      	movs	r3, #1
 8000250:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000252:	2310      	movs	r3, #16
 8000254:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000256:	2302      	movs	r3, #2
 8000258:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800025a:	2300      	movs	r3, #0
 800025c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800025e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000262:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000264:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000268:	4618      	mov	r0, r3
 800026a:	f000 fd65 	bl	8000d38 <HAL_RCC_OscConfig>
 800026e:	4603      	mov	r3, r0
 8000270:	2b00      	cmp	r3, #0
 8000272:	d001      	beq.n	8000278 <SystemClock_Config+0x64>
  {
    Error_Handler();
 8000274:	f000 f8e8 	bl	8000448 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000278:	230f      	movs	r3, #15
 800027a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800027c:	2302      	movs	r3, #2
 800027e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000280:	2300      	movs	r3, #0
 8000282:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000284:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000288:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800028a:	2300      	movs	r3, #0
 800028c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800028e:	f107 031c 	add.w	r3, r7, #28
 8000292:	2101      	movs	r1, #1
 8000294:	4618      	mov	r0, r3
 8000296:	f001 fd8d 	bl	8001db4 <HAL_RCC_ClockConfig>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80002a0:	f000 f8d2 	bl	8000448 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80002a4:	2301      	movs	r3, #1
 80002a6:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80002a8:	2300      	movs	r3, #0
 80002aa:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002ac:	463b      	mov	r3, r7
 80002ae:	4618      	mov	r0, r3
 80002b0:	f001 ffb6 	bl	8002220 <HAL_RCCEx_PeriphCLKConfig>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80002ba:	f000 f8c5 	bl	8000448 <Error_Handler>
  }
}
 80002be:	bf00      	nop
 80002c0:	3758      	adds	r7, #88	; 0x58
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
	...

080002c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002cc:	4b16      	ldr	r3, [pc, #88]	; (8000328 <MX_USART1_UART_Init+0x60>)
 80002ce:	4a17      	ldr	r2, [pc, #92]	; (800032c <MX_USART1_UART_Init+0x64>)
 80002d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002d2:	4b15      	ldr	r3, [pc, #84]	; (8000328 <MX_USART1_UART_Init+0x60>)
 80002d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002da:	4b13      	ldr	r3, [pc, #76]	; (8000328 <MX_USART1_UART_Init+0x60>)
 80002dc:	2200      	movs	r2, #0
 80002de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002e0:	4b11      	ldr	r3, [pc, #68]	; (8000328 <MX_USART1_UART_Init+0x60>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002e6:	4b10      	ldr	r3, [pc, #64]	; (8000328 <MX_USART1_UART_Init+0x60>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002ec:	4b0e      	ldr	r3, [pc, #56]	; (8000328 <MX_USART1_UART_Init+0x60>)
 80002ee:	220c      	movs	r2, #12
 80002f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002f2:	4b0d      	ldr	r3, [pc, #52]	; (8000328 <MX_USART1_UART_Init+0x60>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002f8:	4b0b      	ldr	r3, [pc, #44]	; (8000328 <MX_USART1_UART_Init+0x60>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80002fe:	4b0a      	ldr	r3, [pc, #40]	; (8000328 <MX_USART1_UART_Init+0x60>)
 8000300:	2200      	movs	r2, #0
 8000302:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000304:	4b08      	ldr	r3, [pc, #32]	; (8000328 <MX_USART1_UART_Init+0x60>)
 8000306:	2200      	movs	r2, #0
 8000308:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800030a:	4807      	ldr	r0, [pc, #28]	; (8000328 <MX_USART1_UART_Init+0x60>)
 800030c:	f002 f8be 	bl	800248c <HAL_UART_Init>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000316:	f000 f897 	bl	8000448 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  HAL_UART_Receive_IT(&huart1, (uint8_t*)user_input, 1);
 800031a:	2201      	movs	r2, #1
 800031c:	4904      	ldr	r1, [pc, #16]	; (8000330 <MX_USART1_UART_Init+0x68>)
 800031e:	4802      	ldr	r0, [pc, #8]	; (8000328 <MX_USART1_UART_Init+0x60>)
 8000320:	f002 f98c 	bl	800263c <HAL_UART_Receive_IT>
  /* USER CODE END USART1_Init 2 */

}
 8000324:	bf00      	nop
 8000326:	bd80      	pop	{r7, pc}
 8000328:	2000002c 	.word	0x2000002c
 800032c:	40013800 	.word	0x40013800
 8000330:	200000b4 	.word	0x200000b4

08000334 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b086      	sub	sp, #24
 8000338:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	2200      	movs	r2, #0
 800033e:	601a      	str	r2, [r3, #0]
 8000340:	605a      	str	r2, [r3, #4]
 8000342:	609a      	str	r2, [r3, #8]
 8000344:	60da      	str	r2, [r3, #12]
 8000346:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000348:	4b11      	ldr	r3, [pc, #68]	; (8000390 <MX_GPIO_Init+0x5c>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	4a10      	ldr	r2, [pc, #64]	; (8000390 <MX_GPIO_Init+0x5c>)
 800034e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000352:	6153      	str	r3, [r2, #20]
 8000354:	4b0e      	ldr	r3, [pc, #56]	; (8000390 <MX_GPIO_Init+0x5c>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800035c:	603b      	str	r3, [r7, #0]
 800035e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(indicator_GPIO_Port, indicator_Pin, GPIO_PIN_RESET);
 8000360:	2200      	movs	r2, #0
 8000362:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000366:	480b      	ldr	r0, [pc, #44]	; (8000394 <MX_GPIO_Init+0x60>)
 8000368:	f000 fcb4 	bl	8000cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : indicator_Pin */
  GPIO_InitStruct.Pin = indicator_Pin;
 800036c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000370:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000372:	2301      	movs	r3, #1
 8000374:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000376:	2300      	movs	r3, #0
 8000378:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800037a:	2300      	movs	r3, #0
 800037c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(indicator_GPIO_Port, &GPIO_InitStruct);
 800037e:	1d3b      	adds	r3, r7, #4
 8000380:	4619      	mov	r1, r3
 8000382:	4804      	ldr	r0, [pc, #16]	; (8000394 <MX_GPIO_Init+0x60>)
 8000384:	f000 fb34 	bl	80009f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000388:	bf00      	nop
 800038a:	3718      	adds	r7, #24
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	40021000 	.word	0x40021000
 8000394:	48000400 	.word	0x48000400

08000398 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(indicator_GPIO_Port, indicator_Pin);
 80003a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003a4:	4823      	ldr	r0, [pc, #140]	; (8000434 <HAL_UART_RxCpltCallback+0x9c>)
 80003a6:	f000 fcad 	bl	8000d04 <HAL_GPIO_TogglePin>
	if(user_input[buffer_index] == '\r'  )
 80003aa:	4b23      	ldr	r3, [pc, #140]	; (8000438 <HAL_UART_RxCpltCallback+0xa0>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	4a23      	ldr	r2, [pc, #140]	; (800043c <HAL_UART_RxCpltCallback+0xa4>)
 80003b0:	5cd3      	ldrb	r3, [r2, r3]
 80003b2:	2b0d      	cmp	r3, #13
 80003b4:	d12c      	bne.n	8000410 <HAL_UART_RxCpltCallback+0x78>
	{
		flag=1;
 80003b6:	4b22      	ldr	r3, [pc, #136]	; (8000440 <HAL_UART_RxCpltCallback+0xa8>)
 80003b8:	2201      	movs	r2, #1
 80003ba:	601a      	str	r2, [r3, #0]

		user_input[buffer_index+1] = '\n';
 80003bc:	4b1e      	ldr	r3, [pc, #120]	; (8000438 <HAL_UART_RxCpltCallback+0xa0>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	3301      	adds	r3, #1
 80003c2:	4a1e      	ldr	r2, [pc, #120]	; (800043c <HAL_UART_RxCpltCallback+0xa4>)
 80003c4:	210a      	movs	r1, #10
 80003c6:	54d1      	strb	r1, [r2, r3]
		HAL_UART_Transmit(huart, (uint8_t*)"Received: ", sizeof("Received: ")-1, HAL_MAX_DELAY);
 80003c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80003cc:	220a      	movs	r2, #10
 80003ce:	491d      	ldr	r1, [pc, #116]	; (8000444 <HAL_UART_RxCpltCallback+0xac>)
 80003d0:	6878      	ldr	r0, [r7, #4]
 80003d2:	f002 f8a9 	bl	8002528 <HAL_UART_Transmit>
		HAL_UART_Transmit(huart, (uint8_t*)user_input, strlen(user_input), HAL_MAX_DELAY);
 80003d6:	4819      	ldr	r0, [pc, #100]	; (800043c <HAL_UART_RxCpltCallback+0xa4>)
 80003d8:	f7ff fef6 	bl	80001c8 <strlen>
 80003dc:	4603      	mov	r3, r0
 80003de:	b29a      	uxth	r2, r3
 80003e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80003e4:	4915      	ldr	r1, [pc, #84]	; (800043c <HAL_UART_RxCpltCallback+0xa4>)
 80003e6:	6878      	ldr	r0, [r7, #4]
 80003e8:	f002 f89e 	bl	8002528 <HAL_UART_Transmit>
		buffer_index = 0;
 80003ec:	4b12      	ldr	r3, [pc, #72]	; (8000438 <HAL_UART_RxCpltCallback+0xa0>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	601a      	str	r2, [r3, #0]
		memset(user_input,0,100);
 80003f2:	2264      	movs	r2, #100	; 0x64
 80003f4:	2100      	movs	r1, #0
 80003f6:	4811      	ldr	r0, [pc, #68]	; (800043c <HAL_UART_RxCpltCallback+0xa4>)
 80003f8:	f003 fa6e 	bl	80038d8 <memset>
		HAL_UART_Receive_IT(huart, (uint8_t*)&user_input[buffer_index], 1);
 80003fc:	4b0e      	ldr	r3, [pc, #56]	; (8000438 <HAL_UART_RxCpltCallback+0xa0>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4a0e      	ldr	r2, [pc, #56]	; (800043c <HAL_UART_RxCpltCallback+0xa4>)
 8000402:	4413      	add	r3, r2
 8000404:	2201      	movs	r2, #1
 8000406:	4619      	mov	r1, r3
 8000408:	6878      	ldr	r0, [r7, #4]
 800040a:	f002 f917 	bl	800263c <HAL_UART_Receive_IT>
	{
	buffer_index++;
	HAL_UART_Receive_IT(huart, (uint8_t*)&user_input[buffer_index], 1);
	}

}
 800040e:	e00d      	b.n	800042c <HAL_UART_RxCpltCallback+0x94>
	buffer_index++;
 8000410:	4b09      	ldr	r3, [pc, #36]	; (8000438 <HAL_UART_RxCpltCallback+0xa0>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	3301      	adds	r3, #1
 8000416:	4a08      	ldr	r2, [pc, #32]	; (8000438 <HAL_UART_RxCpltCallback+0xa0>)
 8000418:	6013      	str	r3, [r2, #0]
	HAL_UART_Receive_IT(huart, (uint8_t*)&user_input[buffer_index], 1);
 800041a:	4b07      	ldr	r3, [pc, #28]	; (8000438 <HAL_UART_RxCpltCallback+0xa0>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	4a07      	ldr	r2, [pc, #28]	; (800043c <HAL_UART_RxCpltCallback+0xa4>)
 8000420:	4413      	add	r3, r2
 8000422:	2201      	movs	r2, #1
 8000424:	4619      	mov	r1, r3
 8000426:	6878      	ldr	r0, [r7, #4]
 8000428:	f002 f908 	bl	800263c <HAL_UART_Receive_IT>
}
 800042c:	bf00      	nop
 800042e:	3708      	adds	r7, #8
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	48000400 	.word	0x48000400
 8000438:	20000118 	.word	0x20000118
 800043c:	200000b4 	.word	0x200000b4
 8000440:	20000000 	.word	0x20000000
 8000444:	08003954 	.word	0x08003954

08000448 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800044c:	b672      	cpsid	i
}
 800044e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000450:	e7fe      	b.n	8000450 <Error_Handler+0x8>
	...

08000454 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800045a:	4b0f      	ldr	r3, [pc, #60]	; (8000498 <HAL_MspInit+0x44>)
 800045c:	699b      	ldr	r3, [r3, #24]
 800045e:	4a0e      	ldr	r2, [pc, #56]	; (8000498 <HAL_MspInit+0x44>)
 8000460:	f043 0301 	orr.w	r3, r3, #1
 8000464:	6193      	str	r3, [r2, #24]
 8000466:	4b0c      	ldr	r3, [pc, #48]	; (8000498 <HAL_MspInit+0x44>)
 8000468:	699b      	ldr	r3, [r3, #24]
 800046a:	f003 0301 	and.w	r3, r3, #1
 800046e:	607b      	str	r3, [r7, #4]
 8000470:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000472:	4b09      	ldr	r3, [pc, #36]	; (8000498 <HAL_MspInit+0x44>)
 8000474:	69db      	ldr	r3, [r3, #28]
 8000476:	4a08      	ldr	r2, [pc, #32]	; (8000498 <HAL_MspInit+0x44>)
 8000478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800047c:	61d3      	str	r3, [r2, #28]
 800047e:	4b06      	ldr	r3, [pc, #24]	; (8000498 <HAL_MspInit+0x44>)
 8000480:	69db      	ldr	r3, [r3, #28]
 8000482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000486:	603b      	str	r3, [r7, #0]
 8000488:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800048a:	2007      	movs	r0, #7
 800048c:	f000 f9f8 	bl	8000880 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000490:	bf00      	nop
 8000492:	3708      	adds	r7, #8
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	40021000 	.word	0x40021000

0800049c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b08a      	sub	sp, #40	; 0x28
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a4:	f107 0314 	add.w	r3, r7, #20
 80004a8:	2200      	movs	r2, #0
 80004aa:	601a      	str	r2, [r3, #0]
 80004ac:	605a      	str	r2, [r3, #4]
 80004ae:	609a      	str	r2, [r3, #8]
 80004b0:	60da      	str	r2, [r3, #12]
 80004b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	4a1b      	ldr	r2, [pc, #108]	; (8000528 <HAL_UART_MspInit+0x8c>)
 80004ba:	4293      	cmp	r3, r2
 80004bc:	d12f      	bne.n	800051e <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80004be:	4b1b      	ldr	r3, [pc, #108]	; (800052c <HAL_UART_MspInit+0x90>)
 80004c0:	699b      	ldr	r3, [r3, #24]
 80004c2:	4a1a      	ldr	r2, [pc, #104]	; (800052c <HAL_UART_MspInit+0x90>)
 80004c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004c8:	6193      	str	r3, [r2, #24]
 80004ca:	4b18      	ldr	r3, [pc, #96]	; (800052c <HAL_UART_MspInit+0x90>)
 80004cc:	699b      	ldr	r3, [r3, #24]
 80004ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80004d2:	613b      	str	r3, [r7, #16]
 80004d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d6:	4b15      	ldr	r3, [pc, #84]	; (800052c <HAL_UART_MspInit+0x90>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	4a14      	ldr	r2, [pc, #80]	; (800052c <HAL_UART_MspInit+0x90>)
 80004dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004e0:	6153      	str	r3, [r2, #20]
 80004e2:	4b12      	ldr	r3, [pc, #72]	; (800052c <HAL_UART_MspInit+0x90>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004ea:	60fb      	str	r3, [r7, #12]
 80004ec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80004ee:	23c0      	movs	r3, #192	; 0xc0
 80004f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004f2:	2302      	movs	r3, #2
 80004f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f6:	2300      	movs	r3, #0
 80004f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004fa:	2303      	movs	r3, #3
 80004fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80004fe:	2307      	movs	r3, #7
 8000500:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000502:	f107 0314 	add.w	r3, r7, #20
 8000506:	4619      	mov	r1, r3
 8000508:	4809      	ldr	r0, [pc, #36]	; (8000530 <HAL_UART_MspInit+0x94>)
 800050a:	f000 fa71 	bl	80009f0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800050e:	2200      	movs	r2, #0
 8000510:	2100      	movs	r1, #0
 8000512:	2025      	movs	r0, #37	; 0x25
 8000514:	f000 f9bf 	bl	8000896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000518:	2025      	movs	r0, #37	; 0x25
 800051a:	f000 f9d8 	bl	80008ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800051e:	bf00      	nop
 8000520:	3728      	adds	r7, #40	; 0x28
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40013800 	.word	0x40013800
 800052c:	40021000 	.word	0x40021000
 8000530:	48000400 	.word	0x48000400

08000534 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000538:	e7fe      	b.n	8000538 <NMI_Handler+0x4>

0800053a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800053a:	b480      	push	{r7}
 800053c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800053e:	e7fe      	b.n	800053e <HardFault_Handler+0x4>

08000540 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000544:	e7fe      	b.n	8000544 <MemManage_Handler+0x4>

08000546 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000546:	b480      	push	{r7}
 8000548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800054a:	e7fe      	b.n	800054a <BusFault_Handler+0x4>

0800054c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000550:	e7fe      	b.n	8000550 <UsageFault_Handler+0x4>

08000552 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000552:	b480      	push	{r7}
 8000554:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000556:	bf00      	nop
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr

08000560 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000564:	bf00      	nop
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr

0800056e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800056e:	b480      	push	{r7}
 8000570:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000572:	bf00      	nop
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr

0800057c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000580:	f000 f88e 	bl	80006a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000584:	bf00      	nop
 8000586:	bd80      	pop	{r7, pc}

08000588 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800058c:	4802      	ldr	r0, [pc, #8]	; (8000598 <USART1_IRQHandler+0x10>)
 800058e:	f002 f899 	bl	80026c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	2000002c 	.word	0x2000002c

0800059c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <SystemInit+0x20>)
 80005a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005a6:	4a05      	ldr	r2, [pc, #20]	; (80005bc <SystemInit+0x20>)
 80005a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	e000ed00 	.word	0xe000ed00

080005c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005f8 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80005c4:	f7ff ffea 	bl	800059c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005c8:	480c      	ldr	r0, [pc, #48]	; (80005fc <LoopForever+0x6>)
  ldr r1, =_edata
 80005ca:	490d      	ldr	r1, [pc, #52]	; (8000600 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005cc:	4a0d      	ldr	r2, [pc, #52]	; (8000604 <LoopForever+0xe>)
  movs r3, #0
 80005ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005d0:	e002      	b.n	80005d8 <LoopCopyDataInit>

080005d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005d6:	3304      	adds	r3, #4

080005d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005dc:	d3f9      	bcc.n	80005d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005de:	4a0a      	ldr	r2, [pc, #40]	; (8000608 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005e0:	4c0a      	ldr	r4, [pc, #40]	; (800060c <LoopForever+0x16>)
  movs r3, #0
 80005e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005e4:	e001      	b.n	80005ea <LoopFillZerobss>

080005e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005e8:	3204      	adds	r2, #4

080005ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005ec:	d3fb      	bcc.n	80005e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005ee:	f003 f97b 	bl	80038e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005f2:	f7ff fdf1 	bl	80001d8 <main>

080005f6 <LoopForever>:

LoopForever:
    b LoopForever
 80005f6:	e7fe      	b.n	80005f6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005f8:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80005fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000600:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000604:	080039a0 	.word	0x080039a0
  ldr r2, =_sbss
 8000608:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800060c:	20000120 	.word	0x20000120

08000610 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000610:	e7fe      	b.n	8000610 <ADC1_2_IRQHandler>
	...

08000614 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000618:	4b08      	ldr	r3, [pc, #32]	; (800063c <HAL_Init+0x28>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a07      	ldr	r2, [pc, #28]	; (800063c <HAL_Init+0x28>)
 800061e:	f043 0310 	orr.w	r3, r3, #16
 8000622:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000624:	2003      	movs	r0, #3
 8000626:	f000 f92b 	bl	8000880 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800062a:	2000      	movs	r0, #0
 800062c:	f000 f808 	bl	8000640 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000630:	f7ff ff10 	bl	8000454 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	40022000 	.word	0x40022000

08000640 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000648:	4b12      	ldr	r3, [pc, #72]	; (8000694 <HAL_InitTick+0x54>)
 800064a:	681a      	ldr	r2, [r3, #0]
 800064c:	4b12      	ldr	r3, [pc, #72]	; (8000698 <HAL_InitTick+0x58>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	4619      	mov	r1, r3
 8000652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000656:	fbb3 f3f1 	udiv	r3, r3, r1
 800065a:	fbb2 f3f3 	udiv	r3, r2, r3
 800065e:	4618      	mov	r0, r3
 8000660:	f000 f943 	bl	80008ea <HAL_SYSTICK_Config>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800066a:	2301      	movs	r3, #1
 800066c:	e00e      	b.n	800068c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	2b0f      	cmp	r3, #15
 8000672:	d80a      	bhi.n	800068a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000674:	2200      	movs	r2, #0
 8000676:	6879      	ldr	r1, [r7, #4]
 8000678:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800067c:	f000 f90b 	bl	8000896 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000680:	4a06      	ldr	r2, [pc, #24]	; (800069c <HAL_InitTick+0x5c>)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000686:	2300      	movs	r3, #0
 8000688:	e000      	b.n	800068c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800068a:	2301      	movs	r3, #1
}
 800068c:	4618      	mov	r0, r3
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000004 	.word	0x20000004
 8000698:	2000000c 	.word	0x2000000c
 800069c:	20000008 	.word	0x20000008

080006a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006a4:	4b06      	ldr	r3, [pc, #24]	; (80006c0 <HAL_IncTick+0x20>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	461a      	mov	r2, r3
 80006aa:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <HAL_IncTick+0x24>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4413      	add	r3, r2
 80006b0:	4a04      	ldr	r2, [pc, #16]	; (80006c4 <HAL_IncTick+0x24>)
 80006b2:	6013      	str	r3, [r2, #0]
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	2000000c 	.word	0x2000000c
 80006c4:	2000011c 	.word	0x2000011c

080006c8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  return uwTick;  
 80006cc:	4b03      	ldr	r3, [pc, #12]	; (80006dc <HAL_GetTick+0x14>)
 80006ce:	681b      	ldr	r3, [r3, #0]
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	2000011c 	.word	0x2000011c

080006e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	f003 0307 	and.w	r3, r3, #7
 80006ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006f0:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <__NVIC_SetPriorityGrouping+0x44>)
 80006f2:	68db      	ldr	r3, [r3, #12]
 80006f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006f6:	68ba      	ldr	r2, [r7, #8]
 80006f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006fc:	4013      	ands	r3, r2
 80006fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000708:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800070c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000712:	4a04      	ldr	r2, [pc, #16]	; (8000724 <__NVIC_SetPriorityGrouping+0x44>)
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	60d3      	str	r3, [r2, #12]
}
 8000718:	bf00      	nop
 800071a:	3714      	adds	r7, #20
 800071c:	46bd      	mov	sp, r7
 800071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000722:	4770      	bx	lr
 8000724:	e000ed00 	.word	0xe000ed00

08000728 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800072c:	4b04      	ldr	r3, [pc, #16]	; (8000740 <__NVIC_GetPriorityGrouping+0x18>)
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	0a1b      	lsrs	r3, r3, #8
 8000732:	f003 0307 	and.w	r3, r3, #7
}
 8000736:	4618      	mov	r0, r3
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr
 8000740:	e000ed00 	.word	0xe000ed00

08000744 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800074e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000752:	2b00      	cmp	r3, #0
 8000754:	db0b      	blt.n	800076e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	f003 021f 	and.w	r2, r3, #31
 800075c:	4907      	ldr	r1, [pc, #28]	; (800077c <__NVIC_EnableIRQ+0x38>)
 800075e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000762:	095b      	lsrs	r3, r3, #5
 8000764:	2001      	movs	r0, #1
 8000766:	fa00 f202 	lsl.w	r2, r0, r2
 800076a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800076e:	bf00      	nop
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	e000e100 	.word	0xe000e100

08000780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	6039      	str	r1, [r7, #0]
 800078a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800078c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000790:	2b00      	cmp	r3, #0
 8000792:	db0a      	blt.n	80007aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	b2da      	uxtb	r2, r3
 8000798:	490c      	ldr	r1, [pc, #48]	; (80007cc <__NVIC_SetPriority+0x4c>)
 800079a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079e:	0112      	lsls	r2, r2, #4
 80007a0:	b2d2      	uxtb	r2, r2
 80007a2:	440b      	add	r3, r1
 80007a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007a8:	e00a      	b.n	80007c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	b2da      	uxtb	r2, r3
 80007ae:	4908      	ldr	r1, [pc, #32]	; (80007d0 <__NVIC_SetPriority+0x50>)
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	f003 030f 	and.w	r3, r3, #15
 80007b6:	3b04      	subs	r3, #4
 80007b8:	0112      	lsls	r2, r2, #4
 80007ba:	b2d2      	uxtb	r2, r2
 80007bc:	440b      	add	r3, r1
 80007be:	761a      	strb	r2, [r3, #24]
}
 80007c0:	bf00      	nop
 80007c2:	370c      	adds	r7, #12
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr
 80007cc:	e000e100 	.word	0xe000e100
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b089      	sub	sp, #36	; 0x24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	60f8      	str	r0, [r7, #12]
 80007dc:	60b9      	str	r1, [r7, #8]
 80007de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	f003 0307 	and.w	r3, r3, #7
 80007e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007e8:	69fb      	ldr	r3, [r7, #28]
 80007ea:	f1c3 0307 	rsb	r3, r3, #7
 80007ee:	2b04      	cmp	r3, #4
 80007f0:	bf28      	it	cs
 80007f2:	2304      	movcs	r3, #4
 80007f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	3304      	adds	r3, #4
 80007fa:	2b06      	cmp	r3, #6
 80007fc:	d902      	bls.n	8000804 <NVIC_EncodePriority+0x30>
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	3b03      	subs	r3, #3
 8000802:	e000      	b.n	8000806 <NVIC_EncodePriority+0x32>
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000808:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800080c:	69bb      	ldr	r3, [r7, #24]
 800080e:	fa02 f303 	lsl.w	r3, r2, r3
 8000812:	43da      	mvns	r2, r3
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	401a      	ands	r2, r3
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800081c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	fa01 f303 	lsl.w	r3, r1, r3
 8000826:	43d9      	mvns	r1, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800082c:	4313      	orrs	r3, r2
         );
}
 800082e:	4618      	mov	r0, r3
 8000830:	3724      	adds	r7, #36	; 0x24
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
	...

0800083c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	3b01      	subs	r3, #1
 8000848:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800084c:	d301      	bcc.n	8000852 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800084e:	2301      	movs	r3, #1
 8000850:	e00f      	b.n	8000872 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000852:	4a0a      	ldr	r2, [pc, #40]	; (800087c <SysTick_Config+0x40>)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	3b01      	subs	r3, #1
 8000858:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800085a:	210f      	movs	r1, #15
 800085c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000860:	f7ff ff8e 	bl	8000780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <SysTick_Config+0x40>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800086a:	4b04      	ldr	r3, [pc, #16]	; (800087c <SysTick_Config+0x40>)
 800086c:	2207      	movs	r2, #7
 800086e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000870:	2300      	movs	r3, #0
}
 8000872:	4618      	mov	r0, r3
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	e000e010 	.word	0xe000e010

08000880 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f7ff ff29 	bl	80006e0 <__NVIC_SetPriorityGrouping>
}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	b086      	sub	sp, #24
 800089a:	af00      	add	r7, sp, #0
 800089c:	4603      	mov	r3, r0
 800089e:	60b9      	str	r1, [r7, #8]
 80008a0:	607a      	str	r2, [r7, #4]
 80008a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008a8:	f7ff ff3e 	bl	8000728 <__NVIC_GetPriorityGrouping>
 80008ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	68b9      	ldr	r1, [r7, #8]
 80008b2:	6978      	ldr	r0, [r7, #20]
 80008b4:	f7ff ff8e 	bl	80007d4 <NVIC_EncodePriority>
 80008b8:	4602      	mov	r2, r0
 80008ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008be:	4611      	mov	r1, r2
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff ff5d 	bl	8000780 <__NVIC_SetPriority>
}
 80008c6:	bf00      	nop
 80008c8:	3718      	adds	r7, #24
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b082      	sub	sp, #8
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	4603      	mov	r3, r0
 80008d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff ff31 	bl	8000744 <__NVIC_EnableIRQ>
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b082      	sub	sp, #8
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008f2:	6878      	ldr	r0, [r7, #4]
 80008f4:	f7ff ffa2 	bl	800083c <SysTick_Config>
 80008f8:	4603      	mov	r3, r0
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000902:	b480      	push	{r7}
 8000904:	b083      	sub	sp, #12
 8000906:	af00      	add	r7, sp, #0
 8000908:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000910:	2b02      	cmp	r3, #2
 8000912:	d008      	beq.n	8000926 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2204      	movs	r2, #4
 8000918:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	2200      	movs	r2, #0
 800091e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000922:	2301      	movs	r3, #1
 8000924:	e020      	b.n	8000968 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f022 020e 	bic.w	r2, r2, #14
 8000934:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f022 0201 	bic.w	r2, r2, #1
 8000944:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800094e:	2101      	movs	r1, #1
 8000950:	fa01 f202 	lsl.w	r2, r1, r2
 8000954:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	2201      	movs	r2, #1
 800095a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2200      	movs	r2, #0
 8000962:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8000966:	2300      	movs	r3, #0
}
 8000968:	4618      	mov	r0, r3
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800097c:	2300      	movs	r3, #0
 800097e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000986:	2b02      	cmp	r3, #2
 8000988:	d005      	beq.n	8000996 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2204      	movs	r2, #4
 800098e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000990:	2301      	movs	r3, #1
 8000992:	73fb      	strb	r3, [r7, #15]
 8000994:	e027      	b.n	80009e6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f022 020e 	bic.w	r2, r2, #14
 80009a4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f022 0201 	bic.w	r2, r2, #1
 80009b4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009be:	2101      	movs	r1, #1
 80009c0:	fa01 f202 	lsl.w	r2, r1, r2
 80009c4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	2201      	movs	r2, #1
 80009ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2200      	movs	r2, #0
 80009d2:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d003      	beq.n	80009e6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	4798      	blx	r3
    } 
  }
  return status;
 80009e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3710      	adds	r7, #16
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b087      	sub	sp, #28
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009fa:	2300      	movs	r3, #0
 80009fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009fe:	e14e      	b.n	8000c9e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	2101      	movs	r1, #1
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	fa01 f303 	lsl.w	r3, r1, r3
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	f000 8140 	beq.w	8000c98 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	f003 0303 	and.w	r3, r3, #3
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d005      	beq.n	8000a30 <HAL_GPIO_Init+0x40>
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	f003 0303 	and.w	r3, r3, #3
 8000a2c:	2b02      	cmp	r3, #2
 8000a2e:	d130      	bne.n	8000a92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	689b      	ldr	r3, [r3, #8]
 8000a34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	2203      	movs	r2, #3
 8000a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a40:	43db      	mvns	r3, r3
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	4013      	ands	r3, r2
 8000a46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	68da      	ldr	r2, [r3, #12]
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	fa02 f303 	lsl.w	r3, r2, r3
 8000a54:	693a      	ldr	r2, [r7, #16]
 8000a56:	4313      	orrs	r3, r2
 8000a58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	693a      	ldr	r2, [r7, #16]
 8000a5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a66:	2201      	movs	r2, #1
 8000a68:	697b      	ldr	r3, [r7, #20]
 8000a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6e:	43db      	mvns	r3, r3
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	4013      	ands	r3, r2
 8000a74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	685b      	ldr	r3, [r3, #4]
 8000a7a:	091b      	lsrs	r3, r3, #4
 8000a7c:	f003 0201 	and.w	r2, r3, #1
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	fa02 f303 	lsl.w	r3, r2, r3
 8000a86:	693a      	ldr	r2, [r7, #16]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	f003 0303 	and.w	r3, r3, #3
 8000a9a:	2b03      	cmp	r3, #3
 8000a9c:	d017      	beq.n	8000ace <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	68db      	ldr	r3, [r3, #12]
 8000aa2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	005b      	lsls	r3, r3, #1
 8000aa8:	2203      	movs	r2, #3
 8000aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000aae:	43db      	mvns	r3, r3
 8000ab0:	693a      	ldr	r2, [r7, #16]
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	689a      	ldr	r2, [r3, #8]
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	4313      	orrs	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	685b      	ldr	r3, [r3, #4]
 8000ad2:	f003 0303 	and.w	r3, r3, #3
 8000ad6:	2b02      	cmp	r3, #2
 8000ad8:	d123      	bne.n	8000b22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	08da      	lsrs	r2, r3, #3
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	3208      	adds	r2, #8
 8000ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	f003 0307 	and.w	r3, r3, #7
 8000aee:	009b      	lsls	r3, r3, #2
 8000af0:	220f      	movs	r2, #15
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	43db      	mvns	r3, r3
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	4013      	ands	r3, r2
 8000afc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	691a      	ldr	r2, [r3, #16]
 8000b02:	697b      	ldr	r3, [r7, #20]
 8000b04:	f003 0307 	and.w	r3, r3, #7
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	08da      	lsrs	r2, r3, #3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	3208      	adds	r2, #8
 8000b1c:	6939      	ldr	r1, [r7, #16]
 8000b1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	2203      	movs	r2, #3
 8000b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b32:	43db      	mvns	r3, r3
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	4013      	ands	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f003 0203 	and.w	r2, r3, #3
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	005b      	lsls	r3, r3, #1
 8000b46:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	f000 809a 	beq.w	8000c98 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b64:	4b55      	ldr	r3, [pc, #340]	; (8000cbc <HAL_GPIO_Init+0x2cc>)
 8000b66:	699b      	ldr	r3, [r3, #24]
 8000b68:	4a54      	ldr	r2, [pc, #336]	; (8000cbc <HAL_GPIO_Init+0x2cc>)
 8000b6a:	f043 0301 	orr.w	r3, r3, #1
 8000b6e:	6193      	str	r3, [r2, #24]
 8000b70:	4b52      	ldr	r3, [pc, #328]	; (8000cbc <HAL_GPIO_Init+0x2cc>)
 8000b72:	699b      	ldr	r3, [r3, #24]
 8000b74:	f003 0301 	and.w	r3, r3, #1
 8000b78:	60bb      	str	r3, [r7, #8]
 8000b7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b7c:	4a50      	ldr	r2, [pc, #320]	; (8000cc0 <HAL_GPIO_Init+0x2d0>)
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	089b      	lsrs	r3, r3, #2
 8000b82:	3302      	adds	r3, #2
 8000b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	f003 0303 	and.w	r3, r3, #3
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	220f      	movs	r2, #15
 8000b94:	fa02 f303 	lsl.w	r3, r2, r3
 8000b98:	43db      	mvns	r3, r3
 8000b9a:	693a      	ldr	r2, [r7, #16]
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000ba6:	d013      	beq.n	8000bd0 <HAL_GPIO_Init+0x1e0>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4a46      	ldr	r2, [pc, #280]	; (8000cc4 <HAL_GPIO_Init+0x2d4>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d00d      	beq.n	8000bcc <HAL_GPIO_Init+0x1dc>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4a45      	ldr	r2, [pc, #276]	; (8000cc8 <HAL_GPIO_Init+0x2d8>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d007      	beq.n	8000bc8 <HAL_GPIO_Init+0x1d8>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	4a44      	ldr	r2, [pc, #272]	; (8000ccc <HAL_GPIO_Init+0x2dc>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d101      	bne.n	8000bc4 <HAL_GPIO_Init+0x1d4>
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	e006      	b.n	8000bd2 <HAL_GPIO_Init+0x1e2>
 8000bc4:	2305      	movs	r3, #5
 8000bc6:	e004      	b.n	8000bd2 <HAL_GPIO_Init+0x1e2>
 8000bc8:	2302      	movs	r3, #2
 8000bca:	e002      	b.n	8000bd2 <HAL_GPIO_Init+0x1e2>
 8000bcc:	2301      	movs	r3, #1
 8000bce:	e000      	b.n	8000bd2 <HAL_GPIO_Init+0x1e2>
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	697a      	ldr	r2, [r7, #20]
 8000bd4:	f002 0203 	and.w	r2, r2, #3
 8000bd8:	0092      	lsls	r2, r2, #2
 8000bda:	4093      	lsls	r3, r2
 8000bdc:	693a      	ldr	r2, [r7, #16]
 8000bde:	4313      	orrs	r3, r2
 8000be0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000be2:	4937      	ldr	r1, [pc, #220]	; (8000cc0 <HAL_GPIO_Init+0x2d0>)
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	089b      	lsrs	r3, r3, #2
 8000be8:	3302      	adds	r3, #2
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bf0:	4b37      	ldr	r3, [pc, #220]	; (8000cd0 <HAL_GPIO_Init+0x2e0>)
 8000bf2:	689b      	ldr	r3, [r3, #8]
 8000bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	43db      	mvns	r3, r3
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	4013      	ands	r3, r2
 8000bfe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d003      	beq.n	8000c14 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c14:	4a2e      	ldr	r2, [pc, #184]	; (8000cd0 <HAL_GPIO_Init+0x2e0>)
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c1a:	4b2d      	ldr	r3, [pc, #180]	; (8000cd0 <HAL_GPIO_Init+0x2e0>)
 8000c1c:	68db      	ldr	r3, [r3, #12]
 8000c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	43db      	mvns	r3, r3
 8000c24:	693a      	ldr	r2, [r7, #16]
 8000c26:	4013      	ands	r3, r2
 8000c28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d003      	beq.n	8000c3e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c3e:	4a24      	ldr	r2, [pc, #144]	; (8000cd0 <HAL_GPIO_Init+0x2e0>)
 8000c40:	693b      	ldr	r3, [r7, #16]
 8000c42:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000c44:	4b22      	ldr	r3, [pc, #136]	; (8000cd0 <HAL_GPIO_Init+0x2e0>)
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	43db      	mvns	r3, r3
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	4013      	ands	r3, r2
 8000c52:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d003      	beq.n	8000c68 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000c60:	693a      	ldr	r2, [r7, #16]
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c68:	4a19      	ldr	r2, [pc, #100]	; (8000cd0 <HAL_GPIO_Init+0x2e0>)
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c6e:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <HAL_GPIO_Init+0x2e0>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	43db      	mvns	r3, r3
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d003      	beq.n	8000c92 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c92:	4a0f      	ldr	r2, [pc, #60]	; (8000cd0 <HAL_GPIO_Init+0x2e0>)
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	f47f aea9 	bne.w	8000a00 <HAL_GPIO_Init+0x10>
  }
}
 8000cae:	bf00      	nop
 8000cb0:	bf00      	nop
 8000cb2:	371c      	adds	r7, #28
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	40010000 	.word	0x40010000
 8000cc4:	48000400 	.word	0x48000400
 8000cc8:	48000800 	.word	0x48000800
 8000ccc:	48000c00 	.word	0x48000c00
 8000cd0:	40010400 	.word	0x40010400

08000cd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	460b      	mov	r3, r1
 8000cde:	807b      	strh	r3, [r7, #2]
 8000ce0:	4613      	mov	r3, r2
 8000ce2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ce4:	787b      	ldrb	r3, [r7, #1]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d003      	beq.n	8000cf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cea:	887a      	ldrh	r2, [r7, #2]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000cf0:	e002      	b.n	8000cf8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cf2:	887a      	ldrh	r2, [r7, #2]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	695b      	ldr	r3, [r3, #20]
 8000d14:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d16:	887a      	ldrh	r2, [r7, #2]
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	041a      	lsls	r2, r3, #16
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	43d9      	mvns	r1, r3
 8000d22:	887b      	ldrh	r3, [r7, #2]
 8000d24:	400b      	ands	r3, r1
 8000d26:	431a      	orrs	r2, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	619a      	str	r2, [r3, #24]
}
 8000d2c:	bf00      	nop
 8000d2e:	3714      	adds	r7, #20
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d48:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d102      	bne.n	8000d5e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	f001 b823 	b.w	8001da4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f003 0301 	and.w	r3, r3, #1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f000 817d 	beq.w	800106e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d74:	4bbc      	ldr	r3, [pc, #752]	; (8001068 <HAL_RCC_OscConfig+0x330>)
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f003 030c 	and.w	r3, r3, #12
 8000d7c:	2b04      	cmp	r3, #4
 8000d7e:	d00c      	beq.n	8000d9a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d80:	4bb9      	ldr	r3, [pc, #740]	; (8001068 <HAL_RCC_OscConfig+0x330>)
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f003 030c 	and.w	r3, r3, #12
 8000d88:	2b08      	cmp	r3, #8
 8000d8a:	d15c      	bne.n	8000e46 <HAL_RCC_OscConfig+0x10e>
 8000d8c:	4bb6      	ldr	r3, [pc, #728]	; (8001068 <HAL_RCC_OscConfig+0x330>)
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d98:	d155      	bne.n	8000e46 <HAL_RCC_OscConfig+0x10e>
 8000d9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d9e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000da2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000da6:	fa93 f3a3 	rbit	r3, r3
 8000daa:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000dae:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000db2:	fab3 f383 	clz	r3, r3
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	095b      	lsrs	r3, r3, #5
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d102      	bne.n	8000dcc <HAL_RCC_OscConfig+0x94>
 8000dc6:	4ba8      	ldr	r3, [pc, #672]	; (8001068 <HAL_RCC_OscConfig+0x330>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	e015      	b.n	8000df8 <HAL_RCC_OscConfig+0xc0>
 8000dcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dd0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dd4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000dd8:	fa93 f3a3 	rbit	r3, r3
 8000ddc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000de0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000de4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000de8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000dec:	fa93 f3a3 	rbit	r3, r3
 8000df0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000df4:	4b9c      	ldr	r3, [pc, #624]	; (8001068 <HAL_RCC_OscConfig+0x330>)
 8000df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000df8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000dfc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000e00:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000e04:	fa92 f2a2 	rbit	r2, r2
 8000e08:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000e0c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	b2d2      	uxtb	r2, r2
 8000e16:	f042 0220 	orr.w	r2, r2, #32
 8000e1a:	b2d2      	uxtb	r2, r2
 8000e1c:	f002 021f 	and.w	r2, r2, #31
 8000e20:	2101      	movs	r1, #1
 8000e22:	fa01 f202 	lsl.w	r2, r1, r2
 8000e26:	4013      	ands	r3, r2
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	f000 811f 	beq.w	800106c <HAL_RCC_OscConfig+0x334>
 8000e2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	f040 8116 	bne.w	800106c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000e40:	2301      	movs	r3, #1
 8000e42:	f000 bfaf 	b.w	8001da4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e56:	d106      	bne.n	8000e66 <HAL_RCC_OscConfig+0x12e>
 8000e58:	4b83      	ldr	r3, [pc, #524]	; (8001068 <HAL_RCC_OscConfig+0x330>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a82      	ldr	r2, [pc, #520]	; (8001068 <HAL_RCC_OscConfig+0x330>)
 8000e5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e62:	6013      	str	r3, [r2, #0]
 8000e64:	e036      	b.n	8000ed4 <HAL_RCC_OscConfig+0x19c>
 8000e66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d10c      	bne.n	8000e90 <HAL_RCC_OscConfig+0x158>
 8000e76:	4b7c      	ldr	r3, [pc, #496]	; (8001068 <HAL_RCC_OscConfig+0x330>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a7b      	ldr	r2, [pc, #492]	; (8001068 <HAL_RCC_OscConfig+0x330>)
 8000e7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e80:	6013      	str	r3, [r2, #0]
 8000e82:	4b79      	ldr	r3, [pc, #484]	; (8001068 <HAL_RCC_OscConfig+0x330>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a78      	ldr	r2, [pc, #480]	; (8001068 <HAL_RCC_OscConfig+0x330>)
 8000e88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e8c:	6013      	str	r3, [r2, #0]
 8000e8e:	e021      	b.n	8000ed4 <HAL_RCC_OscConfig+0x19c>
 8000e90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e94:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ea0:	d10c      	bne.n	8000ebc <HAL_RCC_OscConfig+0x184>
 8000ea2:	4b71      	ldr	r3, [pc, #452]	; (8001068 <HAL_RCC_OscConfig+0x330>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a70      	ldr	r2, [pc, #448]	; (8001068 <HAL_RCC_OscConfig+0x330>)
 8000ea8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eac:	6013      	str	r3, [r2, #0]
 8000eae:	4b6e      	ldr	r3, [pc, #440]	; (8001068 <HAL_RCC_OscConfig+0x330>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a6d      	ldr	r2, [pc, #436]	; (8001068 <HAL_RCC_OscConfig+0x330>)
 8000eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eb8:	6013      	str	r3, [r2, #0]
 8000eba:	e00b      	b.n	8000ed4 <HAL_RCC_OscConfig+0x19c>
 8000ebc:	4b6a      	ldr	r3, [pc, #424]	; (8001068 <HAL_RCC_OscConfig+0x330>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a69      	ldr	r2, [pc, #420]	; (8001068 <HAL_RCC_OscConfig+0x330>)
 8000ec2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ec6:	6013      	str	r3, [r2, #0]
 8000ec8:	4b67      	ldr	r3, [pc, #412]	; (8001068 <HAL_RCC_OscConfig+0x330>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a66      	ldr	r2, [pc, #408]	; (8001068 <HAL_RCC_OscConfig+0x330>)
 8000ece:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ed2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ed4:	4b64      	ldr	r3, [pc, #400]	; (8001068 <HAL_RCC_OscConfig+0x330>)
 8000ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ed8:	f023 020f 	bic.w	r2, r3, #15
 8000edc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ee0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	495f      	ldr	r1, [pc, #380]	; (8001068 <HAL_RCC_OscConfig+0x330>)
 8000eea:	4313      	orrs	r3, r2
 8000eec:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000eee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ef2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d059      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000efe:	f7ff fbe3 	bl	80006c8 <HAL_GetTick>
 8000f02:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f06:	e00a      	b.n	8000f1e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f08:	f7ff fbde 	bl	80006c8 <HAL_GetTick>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	2b64      	cmp	r3, #100	; 0x64
 8000f16:	d902      	bls.n	8000f1e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	f000 bf43 	b.w	8001da4 <HAL_RCC_OscConfig+0x106c>
 8000f1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f22:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f26:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000f2a:	fa93 f3a3 	rbit	r3, r3
 8000f2e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000f32:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f36:	fab3 f383 	clz	r3, r3
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	095b      	lsrs	r3, r3, #5
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d102      	bne.n	8000f50 <HAL_RCC_OscConfig+0x218>
 8000f4a:	4b47      	ldr	r3, [pc, #284]	; (8001068 <HAL_RCC_OscConfig+0x330>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	e015      	b.n	8000f7c <HAL_RCC_OscConfig+0x244>
 8000f50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f54:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f58:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000f5c:	fa93 f3a3 	rbit	r3, r3
 8000f60:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000f64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f68:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000f6c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000f70:	fa93 f3a3 	rbit	r3, r3
 8000f74:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000f78:	4b3b      	ldr	r3, [pc, #236]	; (8001068 <HAL_RCC_OscConfig+0x330>)
 8000f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f7c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f80:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000f84:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000f88:	fa92 f2a2 	rbit	r2, r2
 8000f8c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000f90:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000f94:	fab2 f282 	clz	r2, r2
 8000f98:	b2d2      	uxtb	r2, r2
 8000f9a:	f042 0220 	orr.w	r2, r2, #32
 8000f9e:	b2d2      	uxtb	r2, r2
 8000fa0:	f002 021f 	and.w	r2, r2, #31
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	fa01 f202 	lsl.w	r2, r1, r2
 8000faa:	4013      	ands	r3, r2
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d0ab      	beq.n	8000f08 <HAL_RCC_OscConfig+0x1d0>
 8000fb0:	e05d      	b.n	800106e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb2:	f7ff fb89 	bl	80006c8 <HAL_GetTick>
 8000fb6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fba:	e00a      	b.n	8000fd2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fbc:	f7ff fb84 	bl	80006c8 <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	2b64      	cmp	r3, #100	; 0x64
 8000fca:	d902      	bls.n	8000fd2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	f000 bee9 	b.w	8001da4 <HAL_RCC_OscConfig+0x106c>
 8000fd2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fd6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fda:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000fde:	fa93 f3a3 	rbit	r3, r3
 8000fe2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000fe6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fea:	fab3 f383 	clz	r3, r3
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	095b      	lsrs	r3, r3, #5
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	f043 0301 	orr.w	r3, r3, #1
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d102      	bne.n	8001004 <HAL_RCC_OscConfig+0x2cc>
 8000ffe:	4b1a      	ldr	r3, [pc, #104]	; (8001068 <HAL_RCC_OscConfig+0x330>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	e015      	b.n	8001030 <HAL_RCC_OscConfig+0x2f8>
 8001004:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001008:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800100c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001010:	fa93 f3a3 	rbit	r3, r3
 8001014:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001018:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800101c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001020:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001024:	fa93 f3a3 	rbit	r3, r3
 8001028:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800102c:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <HAL_RCC_OscConfig+0x330>)
 800102e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001030:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001034:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001038:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800103c:	fa92 f2a2 	rbit	r2, r2
 8001040:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001044:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001048:	fab2 f282 	clz	r2, r2
 800104c:	b2d2      	uxtb	r2, r2
 800104e:	f042 0220 	orr.w	r2, r2, #32
 8001052:	b2d2      	uxtb	r2, r2
 8001054:	f002 021f 	and.w	r2, r2, #31
 8001058:	2101      	movs	r1, #1
 800105a:	fa01 f202 	lsl.w	r2, r1, r2
 800105e:	4013      	ands	r3, r2
 8001060:	2b00      	cmp	r3, #0
 8001062:	d1ab      	bne.n	8000fbc <HAL_RCC_OscConfig+0x284>
 8001064:	e003      	b.n	800106e <HAL_RCC_OscConfig+0x336>
 8001066:	bf00      	nop
 8001068:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800106c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800106e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001072:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 0302 	and.w	r3, r3, #2
 800107e:	2b00      	cmp	r3, #0
 8001080:	f000 817d 	beq.w	800137e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001084:	4ba6      	ldr	r3, [pc, #664]	; (8001320 <HAL_RCC_OscConfig+0x5e8>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f003 030c 	and.w	r3, r3, #12
 800108c:	2b00      	cmp	r3, #0
 800108e:	d00b      	beq.n	80010a8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001090:	4ba3      	ldr	r3, [pc, #652]	; (8001320 <HAL_RCC_OscConfig+0x5e8>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f003 030c 	and.w	r3, r3, #12
 8001098:	2b08      	cmp	r3, #8
 800109a:	d172      	bne.n	8001182 <HAL_RCC_OscConfig+0x44a>
 800109c:	4ba0      	ldr	r3, [pc, #640]	; (8001320 <HAL_RCC_OscConfig+0x5e8>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d16c      	bne.n	8001182 <HAL_RCC_OscConfig+0x44a>
 80010a8:	2302      	movs	r3, #2
 80010aa:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ae:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80010b2:	fa93 f3a3 	rbit	r3, r3
 80010b6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80010ba:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010be:	fab3 f383 	clz	r3, r3
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	095b      	lsrs	r3, r3, #5
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d102      	bne.n	80010d8 <HAL_RCC_OscConfig+0x3a0>
 80010d2:	4b93      	ldr	r3, [pc, #588]	; (8001320 <HAL_RCC_OscConfig+0x5e8>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	e013      	b.n	8001100 <HAL_RCC_OscConfig+0x3c8>
 80010d8:	2302      	movs	r3, #2
 80010da:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010de:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80010e2:	fa93 f3a3 	rbit	r3, r3
 80010e6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80010ea:	2302      	movs	r3, #2
 80010ec:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80010f0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80010f4:	fa93 f3a3 	rbit	r3, r3
 80010f8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80010fc:	4b88      	ldr	r3, [pc, #544]	; (8001320 <HAL_RCC_OscConfig+0x5e8>)
 80010fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001100:	2202      	movs	r2, #2
 8001102:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001106:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800110a:	fa92 f2a2 	rbit	r2, r2
 800110e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001112:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001116:	fab2 f282 	clz	r2, r2
 800111a:	b2d2      	uxtb	r2, r2
 800111c:	f042 0220 	orr.w	r2, r2, #32
 8001120:	b2d2      	uxtb	r2, r2
 8001122:	f002 021f 	and.w	r2, r2, #31
 8001126:	2101      	movs	r1, #1
 8001128:	fa01 f202 	lsl.w	r2, r1, r2
 800112c:	4013      	ands	r3, r2
 800112e:	2b00      	cmp	r3, #0
 8001130:	d00a      	beq.n	8001148 <HAL_RCC_OscConfig+0x410>
 8001132:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001136:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	691b      	ldr	r3, [r3, #16]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d002      	beq.n	8001148 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	f000 be2e 	b.w	8001da4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001148:	4b75      	ldr	r3, [pc, #468]	; (8001320 <HAL_RCC_OscConfig+0x5e8>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001150:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001154:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	695b      	ldr	r3, [r3, #20]
 800115c:	21f8      	movs	r1, #248	; 0xf8
 800115e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001162:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001166:	fa91 f1a1 	rbit	r1, r1
 800116a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800116e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001172:	fab1 f181 	clz	r1, r1
 8001176:	b2c9      	uxtb	r1, r1
 8001178:	408b      	lsls	r3, r1
 800117a:	4969      	ldr	r1, [pc, #420]	; (8001320 <HAL_RCC_OscConfig+0x5e8>)
 800117c:	4313      	orrs	r3, r2
 800117e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001180:	e0fd      	b.n	800137e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001182:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001186:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	691b      	ldr	r3, [r3, #16]
 800118e:	2b00      	cmp	r3, #0
 8001190:	f000 8088 	beq.w	80012a4 <HAL_RCC_OscConfig+0x56c>
 8001194:	2301      	movs	r3, #1
 8001196:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800119a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800119e:	fa93 f3a3 	rbit	r3, r3
 80011a2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80011a6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011aa:	fab3 f383 	clz	r3, r3
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	461a      	mov	r2, r3
 80011bc:	2301      	movs	r3, #1
 80011be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c0:	f7ff fa82 	bl	80006c8 <HAL_GetTick>
 80011c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011c8:	e00a      	b.n	80011e0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011ca:	f7ff fa7d 	bl	80006c8 <HAL_GetTick>
 80011ce:	4602      	mov	r2, r0
 80011d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	2b02      	cmp	r3, #2
 80011d8:	d902      	bls.n	80011e0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80011da:	2303      	movs	r3, #3
 80011dc:	f000 bde2 	b.w	8001da4 <HAL_RCC_OscConfig+0x106c>
 80011e0:	2302      	movs	r3, #2
 80011e2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80011ea:	fa93 f3a3 	rbit	r3, r3
 80011ee:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80011f2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011f6:	fab3 f383 	clz	r3, r3
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	095b      	lsrs	r3, r3, #5
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	b2db      	uxtb	r3, r3
 8001206:	2b01      	cmp	r3, #1
 8001208:	d102      	bne.n	8001210 <HAL_RCC_OscConfig+0x4d8>
 800120a:	4b45      	ldr	r3, [pc, #276]	; (8001320 <HAL_RCC_OscConfig+0x5e8>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	e013      	b.n	8001238 <HAL_RCC_OscConfig+0x500>
 8001210:	2302      	movs	r3, #2
 8001212:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001216:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800121a:	fa93 f3a3 	rbit	r3, r3
 800121e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001222:	2302      	movs	r3, #2
 8001224:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001228:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800122c:	fa93 f3a3 	rbit	r3, r3
 8001230:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001234:	4b3a      	ldr	r3, [pc, #232]	; (8001320 <HAL_RCC_OscConfig+0x5e8>)
 8001236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001238:	2202      	movs	r2, #2
 800123a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800123e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001242:	fa92 f2a2 	rbit	r2, r2
 8001246:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800124a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800124e:	fab2 f282 	clz	r2, r2
 8001252:	b2d2      	uxtb	r2, r2
 8001254:	f042 0220 	orr.w	r2, r2, #32
 8001258:	b2d2      	uxtb	r2, r2
 800125a:	f002 021f 	and.w	r2, r2, #31
 800125e:	2101      	movs	r1, #1
 8001260:	fa01 f202 	lsl.w	r2, r1, r2
 8001264:	4013      	ands	r3, r2
 8001266:	2b00      	cmp	r3, #0
 8001268:	d0af      	beq.n	80011ca <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800126a:	4b2d      	ldr	r3, [pc, #180]	; (8001320 <HAL_RCC_OscConfig+0x5e8>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001272:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001276:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	695b      	ldr	r3, [r3, #20]
 800127e:	21f8      	movs	r1, #248	; 0xf8
 8001280:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001284:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001288:	fa91 f1a1 	rbit	r1, r1
 800128c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001290:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001294:	fab1 f181 	clz	r1, r1
 8001298:	b2c9      	uxtb	r1, r1
 800129a:	408b      	lsls	r3, r1
 800129c:	4920      	ldr	r1, [pc, #128]	; (8001320 <HAL_RCC_OscConfig+0x5e8>)
 800129e:	4313      	orrs	r3, r2
 80012a0:	600b      	str	r3, [r1, #0]
 80012a2:	e06c      	b.n	800137e <HAL_RCC_OscConfig+0x646>
 80012a4:	2301      	movs	r3, #1
 80012a6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012aa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80012ae:	fa93 f3a3 	rbit	r3, r3
 80012b2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80012b6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012ba:	fab3 f383 	clz	r3, r3
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	461a      	mov	r2, r3
 80012cc:	2300      	movs	r3, #0
 80012ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d0:	f7ff f9fa 	bl	80006c8 <HAL_GetTick>
 80012d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012d8:	e00a      	b.n	80012f0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012da:	f7ff f9f5 	bl	80006c8 <HAL_GetTick>
 80012de:	4602      	mov	r2, r0
 80012e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d902      	bls.n	80012f0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	f000 bd5a 	b.w	8001da4 <HAL_RCC_OscConfig+0x106c>
 80012f0:	2302      	movs	r3, #2
 80012f2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80012fa:	fa93 f3a3 	rbit	r3, r3
 80012fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001302:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001306:	fab3 f383 	clz	r3, r3
 800130a:	b2db      	uxtb	r3, r3
 800130c:	095b      	lsrs	r3, r3, #5
 800130e:	b2db      	uxtb	r3, r3
 8001310:	f043 0301 	orr.w	r3, r3, #1
 8001314:	b2db      	uxtb	r3, r3
 8001316:	2b01      	cmp	r3, #1
 8001318:	d104      	bne.n	8001324 <HAL_RCC_OscConfig+0x5ec>
 800131a:	4b01      	ldr	r3, [pc, #4]	; (8001320 <HAL_RCC_OscConfig+0x5e8>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	e015      	b.n	800134c <HAL_RCC_OscConfig+0x614>
 8001320:	40021000 	.word	0x40021000
 8001324:	2302      	movs	r3, #2
 8001326:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800132a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800132e:	fa93 f3a3 	rbit	r3, r3
 8001332:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001336:	2302      	movs	r3, #2
 8001338:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800133c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001340:	fa93 f3a3 	rbit	r3, r3
 8001344:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001348:	4bc8      	ldr	r3, [pc, #800]	; (800166c <HAL_RCC_OscConfig+0x934>)
 800134a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134c:	2202      	movs	r2, #2
 800134e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001352:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001356:	fa92 f2a2 	rbit	r2, r2
 800135a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800135e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001362:	fab2 f282 	clz	r2, r2
 8001366:	b2d2      	uxtb	r2, r2
 8001368:	f042 0220 	orr.w	r2, r2, #32
 800136c:	b2d2      	uxtb	r2, r2
 800136e:	f002 021f 	and.w	r2, r2, #31
 8001372:	2101      	movs	r1, #1
 8001374:	fa01 f202 	lsl.w	r2, r1, r2
 8001378:	4013      	ands	r3, r2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1ad      	bne.n	80012da <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800137e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001382:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0308 	and.w	r3, r3, #8
 800138e:	2b00      	cmp	r3, #0
 8001390:	f000 8110 	beq.w	80015b4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001394:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001398:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d079      	beq.n	8001498 <HAL_RCC_OscConfig+0x760>
 80013a4:	2301      	movs	r3, #1
 80013a6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013aa:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80013ae:	fa93 f3a3 	rbit	r3, r3
 80013b2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80013b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013ba:	fab3 f383 	clz	r3, r3
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	461a      	mov	r2, r3
 80013c2:	4bab      	ldr	r3, [pc, #684]	; (8001670 <HAL_RCC_OscConfig+0x938>)
 80013c4:	4413      	add	r3, r2
 80013c6:	009b      	lsls	r3, r3, #2
 80013c8:	461a      	mov	r2, r3
 80013ca:	2301      	movs	r3, #1
 80013cc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ce:	f7ff f97b 	bl	80006c8 <HAL_GetTick>
 80013d2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013d6:	e00a      	b.n	80013ee <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013d8:	f7ff f976 	bl	80006c8 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d902      	bls.n	80013ee <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	f000 bcdb 	b.w	8001da4 <HAL_RCC_OscConfig+0x106c>
 80013ee:	2302      	movs	r3, #2
 80013f0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80013f8:	fa93 f3a3 	rbit	r3, r3
 80013fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001400:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001404:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001408:	2202      	movs	r2, #2
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001410:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	fa93 f2a3 	rbit	r2, r3
 800141a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800141e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001428:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800142c:	2202      	movs	r2, #2
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001434:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	fa93 f2a3 	rbit	r2, r3
 800143e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001442:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001446:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001448:	4b88      	ldr	r3, [pc, #544]	; (800166c <HAL_RCC_OscConfig+0x934>)
 800144a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800144c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001450:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001454:	2102      	movs	r1, #2
 8001456:	6019      	str	r1, [r3, #0]
 8001458:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800145c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	fa93 f1a3 	rbit	r1, r3
 8001466:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800146a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800146e:	6019      	str	r1, [r3, #0]
  return result;
 8001470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001474:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	fab3 f383 	clz	r3, r3
 800147e:	b2db      	uxtb	r3, r3
 8001480:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001484:	b2db      	uxtb	r3, r3
 8001486:	f003 031f 	and.w	r3, r3, #31
 800148a:	2101      	movs	r1, #1
 800148c:	fa01 f303 	lsl.w	r3, r1, r3
 8001490:	4013      	ands	r3, r2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d0a0      	beq.n	80013d8 <HAL_RCC_OscConfig+0x6a0>
 8001496:	e08d      	b.n	80015b4 <HAL_RCC_OscConfig+0x87c>
 8001498:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800149c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80014a0:	2201      	movs	r2, #1
 80014a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014a8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	fa93 f2a3 	rbit	r2, r3
 80014b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014b6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80014ba:	601a      	str	r2, [r3, #0]
  return result;
 80014bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014c0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80014c4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014c6:	fab3 f383 	clz	r3, r3
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	461a      	mov	r2, r3
 80014ce:	4b68      	ldr	r3, [pc, #416]	; (8001670 <HAL_RCC_OscConfig+0x938>)
 80014d0:	4413      	add	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	461a      	mov	r2, r3
 80014d6:	2300      	movs	r3, #0
 80014d8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014da:	f7ff f8f5 	bl	80006c8 <HAL_GetTick>
 80014de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e2:	e00a      	b.n	80014fa <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014e4:	f7ff f8f0 	bl	80006c8 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d902      	bls.n	80014fa <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	f000 bc55 	b.w	8001da4 <HAL_RCC_OscConfig+0x106c>
 80014fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014fe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001502:	2202      	movs	r2, #2
 8001504:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001506:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800150a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	fa93 f2a3 	rbit	r2, r3
 8001514:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001518:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001522:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001526:	2202      	movs	r2, #2
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800152e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	fa93 f2a3 	rbit	r2, r3
 8001538:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800153c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001546:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800154a:	2202      	movs	r2, #2
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001552:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	fa93 f2a3 	rbit	r2, r3
 800155c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001560:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001564:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001566:	4b41      	ldr	r3, [pc, #260]	; (800166c <HAL_RCC_OscConfig+0x934>)
 8001568:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800156a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800156e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001572:	2102      	movs	r1, #2
 8001574:	6019      	str	r1, [r3, #0]
 8001576:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800157a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	fa93 f1a3 	rbit	r1, r3
 8001584:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001588:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800158c:	6019      	str	r1, [r3, #0]
  return result;
 800158e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001592:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	fab3 f383 	clz	r3, r3
 800159c:	b2db      	uxtb	r3, r3
 800159e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	f003 031f 	and.w	r3, r3, #31
 80015a8:	2101      	movs	r1, #1
 80015aa:	fa01 f303 	lsl.w	r3, r1, r3
 80015ae:	4013      	ands	r3, r2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d197      	bne.n	80014e4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015b8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	f000 81a1 	beq.w	800190c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015ca:	2300      	movs	r3, #0
 80015cc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015d0:	4b26      	ldr	r3, [pc, #152]	; (800166c <HAL_RCC_OscConfig+0x934>)
 80015d2:	69db      	ldr	r3, [r3, #28]
 80015d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d116      	bne.n	800160a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015dc:	4b23      	ldr	r3, [pc, #140]	; (800166c <HAL_RCC_OscConfig+0x934>)
 80015de:	69db      	ldr	r3, [r3, #28]
 80015e0:	4a22      	ldr	r2, [pc, #136]	; (800166c <HAL_RCC_OscConfig+0x934>)
 80015e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e6:	61d3      	str	r3, [r2, #28]
 80015e8:	4b20      	ldr	r3, [pc, #128]	; (800166c <HAL_RCC_OscConfig+0x934>)
 80015ea:	69db      	ldr	r3, [r3, #28]
 80015ec:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80015f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015f4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015fe:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001602:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001604:	2301      	movs	r3, #1
 8001606:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800160a:	4b1a      	ldr	r3, [pc, #104]	; (8001674 <HAL_RCC_OscConfig+0x93c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001612:	2b00      	cmp	r3, #0
 8001614:	d11a      	bne.n	800164c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001616:	4b17      	ldr	r3, [pc, #92]	; (8001674 <HAL_RCC_OscConfig+0x93c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a16      	ldr	r2, [pc, #88]	; (8001674 <HAL_RCC_OscConfig+0x93c>)
 800161c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001620:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001622:	f7ff f851 	bl	80006c8 <HAL_GetTick>
 8001626:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800162a:	e009      	b.n	8001640 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800162c:	f7ff f84c 	bl	80006c8 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b64      	cmp	r3, #100	; 0x64
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e3b1      	b.n	8001da4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001640:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <HAL_RCC_OscConfig+0x93c>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001648:	2b00      	cmp	r3, #0
 800164a:	d0ef      	beq.n	800162c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800164c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001650:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d10d      	bne.n	8001678 <HAL_RCC_OscConfig+0x940>
 800165c:	4b03      	ldr	r3, [pc, #12]	; (800166c <HAL_RCC_OscConfig+0x934>)
 800165e:	6a1b      	ldr	r3, [r3, #32]
 8001660:	4a02      	ldr	r2, [pc, #8]	; (800166c <HAL_RCC_OscConfig+0x934>)
 8001662:	f043 0301 	orr.w	r3, r3, #1
 8001666:	6213      	str	r3, [r2, #32]
 8001668:	e03c      	b.n	80016e4 <HAL_RCC_OscConfig+0x9ac>
 800166a:	bf00      	nop
 800166c:	40021000 	.word	0x40021000
 8001670:	10908120 	.word	0x10908120
 8001674:	40007000 	.word	0x40007000
 8001678:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800167c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d10c      	bne.n	80016a2 <HAL_RCC_OscConfig+0x96a>
 8001688:	4bc1      	ldr	r3, [pc, #772]	; (8001990 <HAL_RCC_OscConfig+0xc58>)
 800168a:	6a1b      	ldr	r3, [r3, #32]
 800168c:	4ac0      	ldr	r2, [pc, #768]	; (8001990 <HAL_RCC_OscConfig+0xc58>)
 800168e:	f023 0301 	bic.w	r3, r3, #1
 8001692:	6213      	str	r3, [r2, #32]
 8001694:	4bbe      	ldr	r3, [pc, #760]	; (8001990 <HAL_RCC_OscConfig+0xc58>)
 8001696:	6a1b      	ldr	r3, [r3, #32]
 8001698:	4abd      	ldr	r2, [pc, #756]	; (8001990 <HAL_RCC_OscConfig+0xc58>)
 800169a:	f023 0304 	bic.w	r3, r3, #4
 800169e:	6213      	str	r3, [r2, #32]
 80016a0:	e020      	b.n	80016e4 <HAL_RCC_OscConfig+0x9ac>
 80016a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	68db      	ldr	r3, [r3, #12]
 80016ae:	2b05      	cmp	r3, #5
 80016b0:	d10c      	bne.n	80016cc <HAL_RCC_OscConfig+0x994>
 80016b2:	4bb7      	ldr	r3, [pc, #732]	; (8001990 <HAL_RCC_OscConfig+0xc58>)
 80016b4:	6a1b      	ldr	r3, [r3, #32]
 80016b6:	4ab6      	ldr	r2, [pc, #728]	; (8001990 <HAL_RCC_OscConfig+0xc58>)
 80016b8:	f043 0304 	orr.w	r3, r3, #4
 80016bc:	6213      	str	r3, [r2, #32]
 80016be:	4bb4      	ldr	r3, [pc, #720]	; (8001990 <HAL_RCC_OscConfig+0xc58>)
 80016c0:	6a1b      	ldr	r3, [r3, #32]
 80016c2:	4ab3      	ldr	r2, [pc, #716]	; (8001990 <HAL_RCC_OscConfig+0xc58>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	6213      	str	r3, [r2, #32]
 80016ca:	e00b      	b.n	80016e4 <HAL_RCC_OscConfig+0x9ac>
 80016cc:	4bb0      	ldr	r3, [pc, #704]	; (8001990 <HAL_RCC_OscConfig+0xc58>)
 80016ce:	6a1b      	ldr	r3, [r3, #32]
 80016d0:	4aaf      	ldr	r2, [pc, #700]	; (8001990 <HAL_RCC_OscConfig+0xc58>)
 80016d2:	f023 0301 	bic.w	r3, r3, #1
 80016d6:	6213      	str	r3, [r2, #32]
 80016d8:	4bad      	ldr	r3, [pc, #692]	; (8001990 <HAL_RCC_OscConfig+0xc58>)
 80016da:	6a1b      	ldr	r3, [r3, #32]
 80016dc:	4aac      	ldr	r2, [pc, #688]	; (8001990 <HAL_RCC_OscConfig+0xc58>)
 80016de:	f023 0304 	bic.w	r3, r3, #4
 80016e2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f000 8081 	beq.w	80017f8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f6:	f7fe ffe7 	bl	80006c8 <HAL_GetTick>
 80016fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016fe:	e00b      	b.n	8001718 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001700:	f7fe ffe2 	bl	80006c8 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001710:	4293      	cmp	r3, r2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e345      	b.n	8001da4 <HAL_RCC_OscConfig+0x106c>
 8001718:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800171c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001720:	2202      	movs	r2, #2
 8001722:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001724:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001728:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	fa93 f2a3 	rbit	r2, r3
 8001732:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001736:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001740:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001744:	2202      	movs	r2, #2
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800174c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	fa93 f2a3 	rbit	r2, r3
 8001756:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800175a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800175e:	601a      	str	r2, [r3, #0]
  return result;
 8001760:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001764:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001768:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800176a:	fab3 f383 	clz	r3, r3
 800176e:	b2db      	uxtb	r3, r3
 8001770:	095b      	lsrs	r3, r3, #5
 8001772:	b2db      	uxtb	r3, r3
 8001774:	f043 0302 	orr.w	r3, r3, #2
 8001778:	b2db      	uxtb	r3, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d102      	bne.n	8001784 <HAL_RCC_OscConfig+0xa4c>
 800177e:	4b84      	ldr	r3, [pc, #528]	; (8001990 <HAL_RCC_OscConfig+0xc58>)
 8001780:	6a1b      	ldr	r3, [r3, #32]
 8001782:	e013      	b.n	80017ac <HAL_RCC_OscConfig+0xa74>
 8001784:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001788:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800178c:	2202      	movs	r2, #2
 800178e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001794:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	fa93 f2a3 	rbit	r2, r3
 800179e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017a2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	4b79      	ldr	r3, [pc, #484]	; (8001990 <HAL_RCC_OscConfig+0xc58>)
 80017aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017b0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80017b4:	2102      	movs	r1, #2
 80017b6:	6011      	str	r1, [r2, #0]
 80017b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017bc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80017c0:	6812      	ldr	r2, [r2, #0]
 80017c2:	fa92 f1a2 	rbit	r1, r2
 80017c6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017ca:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80017ce:	6011      	str	r1, [r2, #0]
  return result;
 80017d0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017d4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80017d8:	6812      	ldr	r2, [r2, #0]
 80017da:	fab2 f282 	clz	r2, r2
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017e4:	b2d2      	uxtb	r2, r2
 80017e6:	f002 021f 	and.w	r2, r2, #31
 80017ea:	2101      	movs	r1, #1
 80017ec:	fa01 f202 	lsl.w	r2, r1, r2
 80017f0:	4013      	ands	r3, r2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d084      	beq.n	8001700 <HAL_RCC_OscConfig+0x9c8>
 80017f6:	e07f      	b.n	80018f8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f8:	f7fe ff66 	bl	80006c8 <HAL_GetTick>
 80017fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001800:	e00b      	b.n	800181a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001802:	f7fe ff61 	bl	80006c8 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001812:	4293      	cmp	r3, r2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e2c4      	b.n	8001da4 <HAL_RCC_OscConfig+0x106c>
 800181a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800181e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001822:	2202      	movs	r2, #2
 8001824:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001826:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800182a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	fa93 f2a3 	rbit	r2, r3
 8001834:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001838:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001842:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001846:	2202      	movs	r2, #2
 8001848:	601a      	str	r2, [r3, #0]
 800184a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800184e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	fa93 f2a3 	rbit	r2, r3
 8001858:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800185c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001860:	601a      	str	r2, [r3, #0]
  return result;
 8001862:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001866:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800186a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800186c:	fab3 f383 	clz	r3, r3
 8001870:	b2db      	uxtb	r3, r3
 8001872:	095b      	lsrs	r3, r3, #5
 8001874:	b2db      	uxtb	r3, r3
 8001876:	f043 0302 	orr.w	r3, r3, #2
 800187a:	b2db      	uxtb	r3, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d102      	bne.n	8001886 <HAL_RCC_OscConfig+0xb4e>
 8001880:	4b43      	ldr	r3, [pc, #268]	; (8001990 <HAL_RCC_OscConfig+0xc58>)
 8001882:	6a1b      	ldr	r3, [r3, #32]
 8001884:	e013      	b.n	80018ae <HAL_RCC_OscConfig+0xb76>
 8001886:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800188a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800188e:	2202      	movs	r2, #2
 8001890:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001892:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001896:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	fa93 f2a3 	rbit	r2, r3
 80018a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	4b39      	ldr	r3, [pc, #228]	; (8001990 <HAL_RCC_OscConfig+0xc58>)
 80018ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018b2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80018b6:	2102      	movs	r1, #2
 80018b8:	6011      	str	r1, [r2, #0]
 80018ba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018be:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80018c2:	6812      	ldr	r2, [r2, #0]
 80018c4:	fa92 f1a2 	rbit	r1, r2
 80018c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018cc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80018d0:	6011      	str	r1, [r2, #0]
  return result;
 80018d2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018d6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80018da:	6812      	ldr	r2, [r2, #0]
 80018dc:	fab2 f282 	clz	r2, r2
 80018e0:	b2d2      	uxtb	r2, r2
 80018e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	f002 021f 	and.w	r2, r2, #31
 80018ec:	2101      	movs	r1, #1
 80018ee:	fa01 f202 	lsl.w	r2, r1, r2
 80018f2:	4013      	ands	r3, r2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d184      	bne.n	8001802 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80018f8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d105      	bne.n	800190c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001900:	4b23      	ldr	r3, [pc, #140]	; (8001990 <HAL_RCC_OscConfig+0xc58>)
 8001902:	69db      	ldr	r3, [r3, #28]
 8001904:	4a22      	ldr	r2, [pc, #136]	; (8001990 <HAL_RCC_OscConfig+0xc58>)
 8001906:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800190a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800190c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001910:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	69db      	ldr	r3, [r3, #28]
 8001918:	2b00      	cmp	r3, #0
 800191a:	f000 8242 	beq.w	8001da2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800191e:	4b1c      	ldr	r3, [pc, #112]	; (8001990 <HAL_RCC_OscConfig+0xc58>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f003 030c 	and.w	r3, r3, #12
 8001926:	2b08      	cmp	r3, #8
 8001928:	f000 8213 	beq.w	8001d52 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800192c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001930:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	69db      	ldr	r3, [r3, #28]
 8001938:	2b02      	cmp	r3, #2
 800193a:	f040 8162 	bne.w	8001c02 <HAL_RCC_OscConfig+0xeca>
 800193e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001942:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001946:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800194a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001950:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	fa93 f2a3 	rbit	r2, r3
 800195a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800195e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001962:	601a      	str	r2, [r3, #0]
  return result;
 8001964:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001968:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800196c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800196e:	fab3 f383 	clz	r3, r3
 8001972:	b2db      	uxtb	r3, r3
 8001974:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001978:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	461a      	mov	r2, r3
 8001980:	2300      	movs	r3, #0
 8001982:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001984:	f7fe fea0 	bl	80006c8 <HAL_GetTick>
 8001988:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800198c:	e00c      	b.n	80019a8 <HAL_RCC_OscConfig+0xc70>
 800198e:	bf00      	nop
 8001990:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001994:	f7fe fe98 	bl	80006c8 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e1fd      	b.n	8001da4 <HAL_RCC_OscConfig+0x106c>
 80019a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ac:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80019b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ba:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	fa93 f2a3 	rbit	r2, r3
 80019c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019c8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80019cc:	601a      	str	r2, [r3, #0]
  return result;
 80019ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80019d6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019d8:	fab3 f383 	clz	r3, r3
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	095b      	lsrs	r3, r3, #5
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	f043 0301 	orr.w	r3, r3, #1
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d102      	bne.n	80019f2 <HAL_RCC_OscConfig+0xcba>
 80019ec:	4bb0      	ldr	r3, [pc, #704]	; (8001cb0 <HAL_RCC_OscConfig+0xf78>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	e027      	b.n	8001a42 <HAL_RCC_OscConfig+0xd0a>
 80019f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80019fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a04:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	fa93 f2a3 	rbit	r2, r3
 8001a0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a12:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a1c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001a20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a2a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	fa93 f2a3 	rbit	r2, r3
 8001a34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a38:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	4b9c      	ldr	r3, [pc, #624]	; (8001cb0 <HAL_RCC_OscConfig+0xf78>)
 8001a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a42:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a46:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001a4a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a4e:	6011      	str	r1, [r2, #0]
 8001a50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a54:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001a58:	6812      	ldr	r2, [r2, #0]
 8001a5a:	fa92 f1a2 	rbit	r1, r2
 8001a5e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a62:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a66:	6011      	str	r1, [r2, #0]
  return result;
 8001a68:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a6c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a70:	6812      	ldr	r2, [r2, #0]
 8001a72:	fab2 f282 	clz	r2, r2
 8001a76:	b2d2      	uxtb	r2, r2
 8001a78:	f042 0220 	orr.w	r2, r2, #32
 8001a7c:	b2d2      	uxtb	r2, r2
 8001a7e:	f002 021f 	and.w	r2, r2, #31
 8001a82:	2101      	movs	r1, #1
 8001a84:	fa01 f202 	lsl.w	r2, r1, r2
 8001a88:	4013      	ands	r3, r2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d182      	bne.n	8001994 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a8e:	4b88      	ldr	r3, [pc, #544]	; (8001cb0 <HAL_RCC_OscConfig+0xf78>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001aa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6a1b      	ldr	r3, [r3, #32]
 8001aae:	430b      	orrs	r3, r1
 8001ab0:	497f      	ldr	r1, [pc, #508]	; (8001cb0 <HAL_RCC_OscConfig+0xf78>)
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	604b      	str	r3, [r1, #4]
 8001ab6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aba:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001abe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ac2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	fa93 f2a3 	rbit	r2, r3
 8001ad2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001ada:	601a      	str	r2, [r3, #0]
  return result;
 8001adc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001ae4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ae6:	fab3 f383 	clz	r3, r3
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001af0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	461a      	mov	r2, r3
 8001af8:	2301      	movs	r3, #1
 8001afa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001afc:	f7fe fde4 	bl	80006c8 <HAL_GetTick>
 8001b00:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b04:	e009      	b.n	8001b1a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b06:	f7fe fddf 	bl	80006c8 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e144      	b.n	8001da4 <HAL_RCC_OscConfig+0x106c>
 8001b1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b1e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001b22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b2c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	fa93 f2a3 	rbit	r2, r3
 8001b36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b3a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001b3e:	601a      	str	r2, [r3, #0]
  return result;
 8001b40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b44:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001b48:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b4a:	fab3 f383 	clz	r3, r3
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	095b      	lsrs	r3, r3, #5
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d102      	bne.n	8001b64 <HAL_RCC_OscConfig+0xe2c>
 8001b5e:	4b54      	ldr	r3, [pc, #336]	; (8001cb0 <HAL_RCC_OscConfig+0xf78>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	e027      	b.n	8001bb4 <HAL_RCC_OscConfig+0xe7c>
 8001b64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b68:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b76:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	fa93 f2a3 	rbit	r2, r3
 8001b80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b84:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b8e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001b92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b9c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	fa93 f2a3 	rbit	r2, r3
 8001ba6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001baa:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	4b3f      	ldr	r3, [pc, #252]	; (8001cb0 <HAL_RCC_OscConfig+0xf78>)
 8001bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bb8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001bbc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001bc0:	6011      	str	r1, [r2, #0]
 8001bc2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bc6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001bca:	6812      	ldr	r2, [r2, #0]
 8001bcc:	fa92 f1a2 	rbit	r1, r2
 8001bd0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bd4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001bd8:	6011      	str	r1, [r2, #0]
  return result;
 8001bda:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bde:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001be2:	6812      	ldr	r2, [r2, #0]
 8001be4:	fab2 f282 	clz	r2, r2
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	f042 0220 	orr.w	r2, r2, #32
 8001bee:	b2d2      	uxtb	r2, r2
 8001bf0:	f002 021f 	and.w	r2, r2, #31
 8001bf4:	2101      	movs	r1, #1
 8001bf6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d082      	beq.n	8001b06 <HAL_RCC_OscConfig+0xdce>
 8001c00:	e0cf      	b.n	8001da2 <HAL_RCC_OscConfig+0x106a>
 8001c02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c06:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001c0a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c14:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	fa93 f2a3 	rbit	r2, r3
 8001c1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c22:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001c26:	601a      	str	r2, [r3, #0]
  return result;
 8001c28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c2c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001c30:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c32:	fab3 f383 	clz	r3, r3
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c3c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	461a      	mov	r2, r3
 8001c44:	2300      	movs	r3, #0
 8001c46:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c48:	f7fe fd3e 	bl	80006c8 <HAL_GetTick>
 8001c4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c50:	e009      	b.n	8001c66 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c52:	f7fe fd39 	bl	80006c8 <HAL_GetTick>
 8001c56:	4602      	mov	r2, r0
 8001c58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e09e      	b.n	8001da4 <HAL_RCC_OscConfig+0x106c>
 8001c66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c6a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c78:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	fa93 f2a3 	rbit	r2, r3
 8001c82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c86:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001c8a:	601a      	str	r2, [r3, #0]
  return result;
 8001c8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c90:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001c94:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c96:	fab3 f383 	clz	r3, r3
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	095b      	lsrs	r3, r3, #5
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d104      	bne.n	8001cb4 <HAL_RCC_OscConfig+0xf7c>
 8001caa:	4b01      	ldr	r3, [pc, #4]	; (8001cb0 <HAL_RCC_OscConfig+0xf78>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	e029      	b.n	8001d04 <HAL_RCC_OscConfig+0xfcc>
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cb8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001cbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	fa93 f2a3 	rbit	r2, r3
 8001cd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cde:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001ce2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cec:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	fa93 f2a3 	rbit	r2, r3
 8001cf6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cfa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	4b2b      	ldr	r3, [pc, #172]	; (8001db0 <HAL_RCC_OscConfig+0x1078>)
 8001d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d04:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d08:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001d0c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d10:	6011      	str	r1, [r2, #0]
 8001d12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d16:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001d1a:	6812      	ldr	r2, [r2, #0]
 8001d1c:	fa92 f1a2 	rbit	r1, r2
 8001d20:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d24:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001d28:	6011      	str	r1, [r2, #0]
  return result;
 8001d2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d2e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001d32:	6812      	ldr	r2, [r2, #0]
 8001d34:	fab2 f282 	clz	r2, r2
 8001d38:	b2d2      	uxtb	r2, r2
 8001d3a:	f042 0220 	orr.w	r2, r2, #32
 8001d3e:	b2d2      	uxtb	r2, r2
 8001d40:	f002 021f 	and.w	r2, r2, #31
 8001d44:	2101      	movs	r1, #1
 8001d46:	fa01 f202 	lsl.w	r2, r1, r2
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d180      	bne.n	8001c52 <HAL_RCC_OscConfig+0xf1a>
 8001d50:	e027      	b.n	8001da2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d101      	bne.n	8001d66 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e01e      	b.n	8001da4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d66:	4b12      	ldr	r3, [pc, #72]	; (8001db0 <HAL_RCC_OscConfig+0x1078>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d6e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d72:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	6a1b      	ldr	r3, [r3, #32]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d10b      	bne.n	8001d9e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001d86:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d8a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d001      	beq.n	8001da2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e000      	b.n	8001da4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40021000 	.word	0x40021000

08001db4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b09e      	sub	sp, #120	; 0x78
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e162      	b.n	8002092 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dcc:	4b90      	ldr	r3, [pc, #576]	; (8002010 <HAL_RCC_ClockConfig+0x25c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0307 	and.w	r3, r3, #7
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d910      	bls.n	8001dfc <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dda:	4b8d      	ldr	r3, [pc, #564]	; (8002010 <HAL_RCC_ClockConfig+0x25c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f023 0207 	bic.w	r2, r3, #7
 8001de2:	498b      	ldr	r1, [pc, #556]	; (8002010 <HAL_RCC_ClockConfig+0x25c>)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dea:	4b89      	ldr	r3, [pc, #548]	; (8002010 <HAL_RCC_ClockConfig+0x25c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	683a      	ldr	r2, [r7, #0]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d001      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e14a      	b.n	8002092 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d008      	beq.n	8001e1a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e08:	4b82      	ldr	r3, [pc, #520]	; (8002014 <HAL_RCC_ClockConfig+0x260>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	497f      	ldr	r1, [pc, #508]	; (8002014 <HAL_RCC_ClockConfig+0x260>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f000 80dc 	beq.w	8001fe0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d13c      	bne.n	8001eaa <HAL_RCC_ClockConfig+0xf6>
 8001e30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e34:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e38:	fa93 f3a3 	rbit	r3, r3
 8001e3c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e40:	fab3 f383 	clz	r3, r3
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	095b      	lsrs	r3, r3, #5
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	f043 0301 	orr.w	r3, r3, #1
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d102      	bne.n	8001e5a <HAL_RCC_ClockConfig+0xa6>
 8001e54:	4b6f      	ldr	r3, [pc, #444]	; (8002014 <HAL_RCC_ClockConfig+0x260>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	e00f      	b.n	8001e7a <HAL_RCC_ClockConfig+0xc6>
 8001e5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e5e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e62:	fa93 f3a3 	rbit	r3, r3
 8001e66:	667b      	str	r3, [r7, #100]	; 0x64
 8001e68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e6c:	663b      	str	r3, [r7, #96]	; 0x60
 8001e6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e70:	fa93 f3a3 	rbit	r3, r3
 8001e74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e76:	4b67      	ldr	r3, [pc, #412]	; (8002014 <HAL_RCC_ClockConfig+0x260>)
 8001e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e7e:	65ba      	str	r2, [r7, #88]	; 0x58
 8001e80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e82:	fa92 f2a2 	rbit	r2, r2
 8001e86:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001e88:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e8a:	fab2 f282 	clz	r2, r2
 8001e8e:	b2d2      	uxtb	r2, r2
 8001e90:	f042 0220 	orr.w	r2, r2, #32
 8001e94:	b2d2      	uxtb	r2, r2
 8001e96:	f002 021f 	and.w	r2, r2, #31
 8001e9a:	2101      	movs	r1, #1
 8001e9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d17b      	bne.n	8001f9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e0f3      	b.n	8002092 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d13c      	bne.n	8001f2c <HAL_RCC_ClockConfig+0x178>
 8001eb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001eb6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001eba:	fa93 f3a3 	rbit	r3, r3
 8001ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001ec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ec2:	fab3 f383 	clz	r3, r3
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	095b      	lsrs	r3, r3, #5
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	f043 0301 	orr.w	r3, r3, #1
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d102      	bne.n	8001edc <HAL_RCC_ClockConfig+0x128>
 8001ed6:	4b4f      	ldr	r3, [pc, #316]	; (8002014 <HAL_RCC_ClockConfig+0x260>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	e00f      	b.n	8001efc <HAL_RCC_ClockConfig+0x148>
 8001edc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ee0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ee4:	fa93 f3a3 	rbit	r3, r3
 8001ee8:	647b      	str	r3, [r7, #68]	; 0x44
 8001eea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001eee:	643b      	str	r3, [r7, #64]	; 0x40
 8001ef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ef2:	fa93 f3a3 	rbit	r3, r3
 8001ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ef8:	4b46      	ldr	r3, [pc, #280]	; (8002014 <HAL_RCC_ClockConfig+0x260>)
 8001efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f00:	63ba      	str	r2, [r7, #56]	; 0x38
 8001f02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f04:	fa92 f2a2 	rbit	r2, r2
 8001f08:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001f0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f0c:	fab2 f282 	clz	r2, r2
 8001f10:	b2d2      	uxtb	r2, r2
 8001f12:	f042 0220 	orr.w	r2, r2, #32
 8001f16:	b2d2      	uxtb	r2, r2
 8001f18:	f002 021f 	and.w	r2, r2, #31
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f22:	4013      	ands	r3, r2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d13a      	bne.n	8001f9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e0b2      	b.n	8002092 <HAL_RCC_ClockConfig+0x2de>
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f32:	fa93 f3a3 	rbit	r3, r3
 8001f36:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f3a:	fab3 f383 	clz	r3, r3
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	095b      	lsrs	r3, r3, #5
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d102      	bne.n	8001f54 <HAL_RCC_ClockConfig+0x1a0>
 8001f4e:	4b31      	ldr	r3, [pc, #196]	; (8002014 <HAL_RCC_ClockConfig+0x260>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	e00d      	b.n	8001f70 <HAL_RCC_ClockConfig+0x1bc>
 8001f54:	2302      	movs	r3, #2
 8001f56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f5a:	fa93 f3a3 	rbit	r3, r3
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f60:	2302      	movs	r3, #2
 8001f62:	623b      	str	r3, [r7, #32]
 8001f64:	6a3b      	ldr	r3, [r7, #32]
 8001f66:	fa93 f3a3 	rbit	r3, r3
 8001f6a:	61fb      	str	r3, [r7, #28]
 8001f6c:	4b29      	ldr	r3, [pc, #164]	; (8002014 <HAL_RCC_ClockConfig+0x260>)
 8001f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f70:	2202      	movs	r2, #2
 8001f72:	61ba      	str	r2, [r7, #24]
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	fa92 f2a2 	rbit	r2, r2
 8001f7a:	617a      	str	r2, [r7, #20]
  return result;
 8001f7c:	697a      	ldr	r2, [r7, #20]
 8001f7e:	fab2 f282 	clz	r2, r2
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	f042 0220 	orr.w	r2, r2, #32
 8001f88:	b2d2      	uxtb	r2, r2
 8001f8a:	f002 021f 	and.w	r2, r2, #31
 8001f8e:	2101      	movs	r1, #1
 8001f90:	fa01 f202 	lsl.w	r2, r1, r2
 8001f94:	4013      	ands	r3, r2
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e079      	b.n	8002092 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f9e:	4b1d      	ldr	r3, [pc, #116]	; (8002014 <HAL_RCC_ClockConfig+0x260>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f023 0203 	bic.w	r2, r3, #3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	491a      	ldr	r1, [pc, #104]	; (8002014 <HAL_RCC_ClockConfig+0x260>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fb0:	f7fe fb8a 	bl	80006c8 <HAL_GetTick>
 8001fb4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fb6:	e00a      	b.n	8001fce <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fb8:	f7fe fb86 	bl	80006c8 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e061      	b.n	8002092 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fce:	4b11      	ldr	r3, [pc, #68]	; (8002014 <HAL_RCC_ClockConfig+0x260>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f003 020c 	and.w	r2, r3, #12
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d1eb      	bne.n	8001fb8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fe0:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <HAL_RCC_ClockConfig+0x25c>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d214      	bcs.n	8002018 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fee:	4b08      	ldr	r3, [pc, #32]	; (8002010 <HAL_RCC_ClockConfig+0x25c>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f023 0207 	bic.w	r2, r3, #7
 8001ff6:	4906      	ldr	r1, [pc, #24]	; (8002010 <HAL_RCC_ClockConfig+0x25c>)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffe:	4b04      	ldr	r3, [pc, #16]	; (8002010 <HAL_RCC_ClockConfig+0x25c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	429a      	cmp	r2, r3
 800200a:	d005      	beq.n	8002018 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e040      	b.n	8002092 <HAL_RCC_ClockConfig+0x2de>
 8002010:	40022000 	.word	0x40022000
 8002014:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	2b00      	cmp	r3, #0
 8002022:	d008      	beq.n	8002036 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002024:	4b1d      	ldr	r3, [pc, #116]	; (800209c <HAL_RCC_ClockConfig+0x2e8>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	491a      	ldr	r1, [pc, #104]	; (800209c <HAL_RCC_ClockConfig+0x2e8>)
 8002032:	4313      	orrs	r3, r2
 8002034:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0308 	and.w	r3, r3, #8
 800203e:	2b00      	cmp	r3, #0
 8002040:	d009      	beq.n	8002056 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002042:	4b16      	ldr	r3, [pc, #88]	; (800209c <HAL_RCC_ClockConfig+0x2e8>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	4912      	ldr	r1, [pc, #72]	; (800209c <HAL_RCC_ClockConfig+0x2e8>)
 8002052:	4313      	orrs	r3, r2
 8002054:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002056:	f000 f829 	bl	80020ac <HAL_RCC_GetSysClockFreq>
 800205a:	4601      	mov	r1, r0
 800205c:	4b0f      	ldr	r3, [pc, #60]	; (800209c <HAL_RCC_ClockConfig+0x2e8>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002064:	22f0      	movs	r2, #240	; 0xf0
 8002066:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	fa92 f2a2 	rbit	r2, r2
 800206e:	60fa      	str	r2, [r7, #12]
  return result;
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	fab2 f282 	clz	r2, r2
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	40d3      	lsrs	r3, r2
 800207a:	4a09      	ldr	r2, [pc, #36]	; (80020a0 <HAL_RCC_ClockConfig+0x2ec>)
 800207c:	5cd3      	ldrb	r3, [r2, r3]
 800207e:	fa21 f303 	lsr.w	r3, r1, r3
 8002082:	4a08      	ldr	r2, [pc, #32]	; (80020a4 <HAL_RCC_ClockConfig+0x2f0>)
 8002084:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002086:	4b08      	ldr	r3, [pc, #32]	; (80020a8 <HAL_RCC_ClockConfig+0x2f4>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f7fe fad8 	bl	8000640 <HAL_InitTick>
  
  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3778      	adds	r7, #120	; 0x78
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40021000 	.word	0x40021000
 80020a0:	08003960 	.word	0x08003960
 80020a4:	20000004 	.word	0x20000004
 80020a8:	20000008 	.word	0x20000008

080020ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b08b      	sub	sp, #44	; 0x2c
 80020b0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020b2:	2300      	movs	r3, #0
 80020b4:	61fb      	str	r3, [r7, #28]
 80020b6:	2300      	movs	r3, #0
 80020b8:	61bb      	str	r3, [r7, #24]
 80020ba:	2300      	movs	r3, #0
 80020bc:	627b      	str	r3, [r7, #36]	; 0x24
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80020c6:	4b29      	ldr	r3, [pc, #164]	; (800216c <HAL_RCC_GetSysClockFreq+0xc0>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	f003 030c 	and.w	r3, r3, #12
 80020d2:	2b04      	cmp	r3, #4
 80020d4:	d002      	beq.n	80020dc <HAL_RCC_GetSysClockFreq+0x30>
 80020d6:	2b08      	cmp	r3, #8
 80020d8:	d003      	beq.n	80020e2 <HAL_RCC_GetSysClockFreq+0x36>
 80020da:	e03c      	b.n	8002156 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020dc:	4b24      	ldr	r3, [pc, #144]	; (8002170 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020de:	623b      	str	r3, [r7, #32]
      break;
 80020e0:	e03c      	b.n	800215c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80020e8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80020ec:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ee:	68ba      	ldr	r2, [r7, #8]
 80020f0:	fa92 f2a2 	rbit	r2, r2
 80020f4:	607a      	str	r2, [r7, #4]
  return result;
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	fab2 f282 	clz	r2, r2
 80020fc:	b2d2      	uxtb	r2, r2
 80020fe:	40d3      	lsrs	r3, r2
 8002100:	4a1c      	ldr	r2, [pc, #112]	; (8002174 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002102:	5cd3      	ldrb	r3, [r2, r3]
 8002104:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002106:	4b19      	ldr	r3, [pc, #100]	; (800216c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	220f      	movs	r2, #15
 8002110:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	fa92 f2a2 	rbit	r2, r2
 8002118:	60fa      	str	r2, [r7, #12]
  return result;
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	fab2 f282 	clz	r2, r2
 8002120:	b2d2      	uxtb	r2, r2
 8002122:	40d3      	lsrs	r3, r2
 8002124:	4a14      	ldr	r2, [pc, #80]	; (8002178 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002126:	5cd3      	ldrb	r3, [r2, r3]
 8002128:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d008      	beq.n	8002146 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002134:	4a0e      	ldr	r2, [pc, #56]	; (8002170 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	fbb2 f2f3 	udiv	r2, r2, r3
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	fb02 f303 	mul.w	r3, r2, r3
 8002142:	627b      	str	r3, [r7, #36]	; 0x24
 8002144:	e004      	b.n	8002150 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	4a0c      	ldr	r2, [pc, #48]	; (800217c <HAL_RCC_GetSysClockFreq+0xd0>)
 800214a:	fb02 f303 	mul.w	r3, r2, r3
 800214e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002152:	623b      	str	r3, [r7, #32]
      break;
 8002154:	e002      	b.n	800215c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002156:	4b06      	ldr	r3, [pc, #24]	; (8002170 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002158:	623b      	str	r3, [r7, #32]
      break;
 800215a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800215c:	6a3b      	ldr	r3, [r7, #32]
}
 800215e:	4618      	mov	r0, r3
 8002160:	372c      	adds	r7, #44	; 0x2c
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	40021000 	.word	0x40021000
 8002170:	007a1200 	.word	0x007a1200
 8002174:	08003978 	.word	0x08003978
 8002178:	08003988 	.word	0x08003988
 800217c:	003d0900 	.word	0x003d0900

08002180 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002184:	4b03      	ldr	r3, [pc, #12]	; (8002194 <HAL_RCC_GetHCLKFreq+0x14>)
 8002186:	681b      	ldr	r3, [r3, #0]
}
 8002188:	4618      	mov	r0, r3
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	20000004 	.word	0x20000004

08002198 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800219e:	f7ff ffef 	bl	8002180 <HAL_RCC_GetHCLKFreq>
 80021a2:	4601      	mov	r1, r0
 80021a4:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80021ac:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80021b0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	fa92 f2a2 	rbit	r2, r2
 80021b8:	603a      	str	r2, [r7, #0]
  return result;
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	fab2 f282 	clz	r2, r2
 80021c0:	b2d2      	uxtb	r2, r2
 80021c2:	40d3      	lsrs	r3, r2
 80021c4:	4a04      	ldr	r2, [pc, #16]	; (80021d8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80021c6:	5cd3      	ldrb	r3, [r2, r3]
 80021c8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80021cc:	4618      	mov	r0, r3
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40021000 	.word	0x40021000
 80021d8:	08003970 	.word	0x08003970

080021dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80021e2:	f7ff ffcd 	bl	8002180 <HAL_RCC_GetHCLKFreq>
 80021e6:	4601      	mov	r1, r0
 80021e8:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80021f0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80021f4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	fa92 f2a2 	rbit	r2, r2
 80021fc:	603a      	str	r2, [r7, #0]
  return result;
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	fab2 f282 	clz	r2, r2
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	40d3      	lsrs	r3, r2
 8002208:	4a04      	ldr	r2, [pc, #16]	; (800221c <HAL_RCC_GetPCLK2Freq+0x40>)
 800220a:	5cd3      	ldrb	r3, [r2, r3]
 800220c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002210:	4618      	mov	r0, r3
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40021000 	.word	0x40021000
 800221c:	08003970 	.word	0x08003970

08002220 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b092      	sub	sp, #72	; 0x48
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002228:	2300      	movs	r3, #0
 800222a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800222c:	2300      	movs	r3, #0
 800222e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002230:	2300      	movs	r3, #0
 8002232:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800223e:	2b00      	cmp	r3, #0
 8002240:	f000 80cd 	beq.w	80023de <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002244:	4b8e      	ldr	r3, [pc, #568]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002246:	69db      	ldr	r3, [r3, #28]
 8002248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d10e      	bne.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002250:	4b8b      	ldr	r3, [pc, #556]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002252:	69db      	ldr	r3, [r3, #28]
 8002254:	4a8a      	ldr	r2, [pc, #552]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800225a:	61d3      	str	r3, [r2, #28]
 800225c:	4b88      	ldr	r3, [pc, #544]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800225e:	69db      	ldr	r3, [r3, #28]
 8002260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002264:	60bb      	str	r3, [r7, #8]
 8002266:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002268:	2301      	movs	r3, #1
 800226a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800226e:	4b85      	ldr	r3, [pc, #532]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002276:	2b00      	cmp	r3, #0
 8002278:	d118      	bne.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800227a:	4b82      	ldr	r3, [pc, #520]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a81      	ldr	r2, [pc, #516]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002284:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002286:	f7fe fa1f 	bl	80006c8 <HAL_GetTick>
 800228a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800228c:	e008      	b.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800228e:	f7fe fa1b 	bl	80006c8 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b64      	cmp	r3, #100	; 0x64
 800229a:	d901      	bls.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e0ea      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a0:	4b78      	ldr	r3, [pc, #480]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d0f0      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022ac:	4b74      	ldr	r3, [pc, #464]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d07d      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d076      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022ca:	4b6d      	ldr	r3, [pc, #436]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022d8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022dc:	fa93 f3a3 	rbit	r3, r3
 80022e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80022e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022e4:	fab3 f383 	clz	r3, r3
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	461a      	mov	r2, r3
 80022ec:	4b66      	ldr	r3, [pc, #408]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80022ee:	4413      	add	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	461a      	mov	r2, r3
 80022f4:	2301      	movs	r3, #1
 80022f6:	6013      	str	r3, [r2, #0]
 80022f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002300:	fa93 f3a3 	rbit	r3, r3
 8002304:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002308:	fab3 f383 	clz	r3, r3
 800230c:	b2db      	uxtb	r3, r3
 800230e:	461a      	mov	r2, r3
 8002310:	4b5d      	ldr	r3, [pc, #372]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002312:	4413      	add	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	461a      	mov	r2, r3
 8002318:	2300      	movs	r3, #0
 800231a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800231c:	4a58      	ldr	r2, [pc, #352]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800231e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002320:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002324:	f003 0301 	and.w	r3, r3, #1
 8002328:	2b00      	cmp	r3, #0
 800232a:	d045      	beq.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232c:	f7fe f9cc 	bl	80006c8 <HAL_GetTick>
 8002330:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002332:	e00a      	b.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002334:	f7fe f9c8 	bl	80006c8 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002342:	4293      	cmp	r3, r2
 8002344:	d901      	bls.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e095      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x256>
 800234a:	2302      	movs	r3, #2
 800234c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002350:	fa93 f3a3 	rbit	r3, r3
 8002354:	627b      	str	r3, [r7, #36]	; 0x24
 8002356:	2302      	movs	r3, #2
 8002358:	623b      	str	r3, [r7, #32]
 800235a:	6a3b      	ldr	r3, [r7, #32]
 800235c:	fa93 f3a3 	rbit	r3, r3
 8002360:	61fb      	str	r3, [r7, #28]
  return result;
 8002362:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002364:	fab3 f383 	clz	r3, r3
 8002368:	b2db      	uxtb	r3, r3
 800236a:	095b      	lsrs	r3, r3, #5
 800236c:	b2db      	uxtb	r3, r3
 800236e:	f043 0302 	orr.w	r3, r3, #2
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d102      	bne.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002378:	4b41      	ldr	r3, [pc, #260]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800237a:	6a1b      	ldr	r3, [r3, #32]
 800237c:	e007      	b.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800237e:	2302      	movs	r3, #2
 8002380:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	fa93 f3a3 	rbit	r3, r3
 8002388:	617b      	str	r3, [r7, #20]
 800238a:	4b3d      	ldr	r3, [pc, #244]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800238c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238e:	2202      	movs	r2, #2
 8002390:	613a      	str	r2, [r7, #16]
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	fa92 f2a2 	rbit	r2, r2
 8002398:	60fa      	str	r2, [r7, #12]
  return result;
 800239a:	68fa      	ldr	r2, [r7, #12]
 800239c:	fab2 f282 	clz	r2, r2
 80023a0:	b2d2      	uxtb	r2, r2
 80023a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023a6:	b2d2      	uxtb	r2, r2
 80023a8:	f002 021f 	and.w	r2, r2, #31
 80023ac:	2101      	movs	r1, #1
 80023ae:	fa01 f202 	lsl.w	r2, r1, r2
 80023b2:	4013      	ands	r3, r2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0bd      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80023b8:	4b31      	ldr	r3, [pc, #196]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	492e      	ldr	r1, [pc, #184]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023ca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d105      	bne.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023d2:	4b2b      	ldr	r3, [pc, #172]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d4:	69db      	ldr	r3, [r3, #28]
 80023d6:	4a2a      	ldr	r2, [pc, #168]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023dc:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d008      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023ea:	4b25      	ldr	r3, [pc, #148]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	f023 0203 	bic.w	r2, r3, #3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	4922      	ldr	r1, [pc, #136]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0320 	and.w	r3, r3, #32
 8002404:	2b00      	cmp	r3, #0
 8002406:	d008      	beq.n	800241a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002408:	4b1d      	ldr	r3, [pc, #116]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800240a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240c:	f023 0210 	bic.w	r2, r3, #16
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	491a      	ldr	r1, [pc, #104]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002416:	4313      	orrs	r3, r2
 8002418:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002422:	2b00      	cmp	r3, #0
 8002424:	d008      	beq.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002426:	4b16      	ldr	r3, [pc, #88]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	4913      	ldr	r1, [pc, #76]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002434:	4313      	orrs	r3, r2
 8002436:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d008      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002444:	4b0e      	ldr	r3, [pc, #56]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002448:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	490b      	ldr	r1, [pc, #44]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002452:	4313      	orrs	r3, r2
 8002454:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d008      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002462:	4b07      	ldr	r3, [pc, #28]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	4904      	ldr	r1, [pc, #16]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002470:	4313      	orrs	r3, r2
 8002472:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3748      	adds	r7, #72	; 0x48
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40021000 	.word	0x40021000
 8002484:	40007000 	.word	0x40007000
 8002488:	10908100 	.word	0x10908100

0800248c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e040      	b.n	8002520 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d106      	bne.n	80024b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f7fd fff4 	bl	800049c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2224      	movs	r2, #36	; 0x24
 80024b8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f022 0201 	bic.w	r2, r2, #1
 80024c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 fc00 	bl	8002cd0 <UART_SetConfig>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d101      	bne.n	80024da <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e022      	b.n	8002520 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d002      	beq.n	80024e8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 fd2a 	bl	8002f3c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	685a      	ldr	r2, [r3, #4]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689a      	ldr	r2, [r3, #8]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002506:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f042 0201 	orr.w	r2, r2, #1
 8002516:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 fdb1 	bl	8003080 <UART_CheckIdleState>
 800251e:	4603      	mov	r3, r0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b08a      	sub	sp, #40	; 0x28
 800252c:	af02      	add	r7, sp, #8
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	603b      	str	r3, [r7, #0]
 8002534:	4613      	mov	r3, r2
 8002536:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800253c:	2b20      	cmp	r3, #32
 800253e:	d178      	bne.n	8002632 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d002      	beq.n	800254c <HAL_UART_Transmit+0x24>
 8002546:	88fb      	ldrh	r3, [r7, #6]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d101      	bne.n	8002550 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e071      	b.n	8002634 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2221      	movs	r2, #33	; 0x21
 800255c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800255e:	f7fe f8b3 	bl	80006c8 <HAL_GetTick>
 8002562:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	88fa      	ldrh	r2, [r7, #6]
 8002568:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	88fa      	ldrh	r2, [r7, #6]
 8002570:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800257c:	d108      	bne.n	8002590 <HAL_UART_Transmit+0x68>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d104      	bne.n	8002590 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002586:	2300      	movs	r3, #0
 8002588:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	61bb      	str	r3, [r7, #24]
 800258e:	e003      	b.n	8002598 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002594:	2300      	movs	r3, #0
 8002596:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002598:	e030      	b.n	80025fc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	9300      	str	r3, [sp, #0]
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	2200      	movs	r2, #0
 80025a2:	2180      	movs	r1, #128	; 0x80
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f000 fe13 	bl	80031d0 <UART_WaitOnFlagUntilTimeout>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d004      	beq.n	80025ba <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2220      	movs	r2, #32
 80025b4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e03c      	b.n	8002634 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d10b      	bne.n	80025d8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	881a      	ldrh	r2, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025cc:	b292      	uxth	r2, r2
 80025ce:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	3302      	adds	r3, #2
 80025d4:	61bb      	str	r3, [r7, #24]
 80025d6:	e008      	b.n	80025ea <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	781a      	ldrb	r2, [r3, #0]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	b292      	uxth	r2, r2
 80025e2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	3301      	adds	r3, #1
 80025e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	3b01      	subs	r3, #1
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002602:	b29b      	uxth	r3, r3
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1c8      	bne.n	800259a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	2200      	movs	r2, #0
 8002610:	2140      	movs	r1, #64	; 0x40
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f000 fddc 	bl	80031d0 <UART_WaitOnFlagUntilTimeout>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d004      	beq.n	8002628 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2220      	movs	r2, #32
 8002622:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002624:	2303      	movs	r3, #3
 8002626:	e005      	b.n	8002634 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2220      	movs	r2, #32
 800262c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800262e:	2300      	movs	r3, #0
 8002630:	e000      	b.n	8002634 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002632:	2302      	movs	r3, #2
  }
}
 8002634:	4618      	mov	r0, r3
 8002636:	3720      	adds	r7, #32
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b08a      	sub	sp, #40	; 0x28
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	4613      	mov	r3, r2
 8002648:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002650:	2b20      	cmp	r3, #32
 8002652:	d132      	bne.n	80026ba <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d002      	beq.n	8002660 <HAL_UART_Receive_IT+0x24>
 800265a:	88fb      	ldrh	r3, [r7, #6]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e02b      	b.n	80026bc <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2200      	movs	r2, #0
 8002668:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d018      	beq.n	80026aa <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	e853 3f00 	ldrex	r3, [r3]
 8002684:	613b      	str	r3, [r7, #16]
   return(result);
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800268c:	627b      	str	r3, [r7, #36]	; 0x24
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	461a      	mov	r2, r3
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	623b      	str	r3, [r7, #32]
 8002698:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800269a:	69f9      	ldr	r1, [r7, #28]
 800269c:	6a3a      	ldr	r2, [r7, #32]
 800269e:	e841 2300 	strex	r3, r2, [r1]
 80026a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1e6      	bne.n	8002678 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80026aa:	88fb      	ldrh	r3, [r7, #6]
 80026ac:	461a      	mov	r2, r3
 80026ae:	68b9      	ldr	r1, [r7, #8]
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f000 fdf5 	bl	80032a0 <UART_Start_Receive_IT>
 80026b6:	4603      	mov	r3, r0
 80026b8:	e000      	b.n	80026bc <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80026ba:	2302      	movs	r3, #2
  }
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3728      	adds	r7, #40	; 0x28
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b0ba      	sub	sp, #232	; 0xe8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80026ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80026ee:	f640 030f 	movw	r3, #2063	; 0x80f
 80026f2:	4013      	ands	r3, r2
 80026f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80026f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d115      	bne.n	800272c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002704:	f003 0320 	and.w	r3, r3, #32
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00f      	beq.n	800272c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800270c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002710:	f003 0320 	and.w	r3, r3, #32
 8002714:	2b00      	cmp	r3, #0
 8002716:	d009      	beq.n	800272c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800271c:	2b00      	cmp	r3, #0
 800271e:	f000 82ab 	beq.w	8002c78 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	4798      	blx	r3
      }
      return;
 800272a:	e2a5      	b.n	8002c78 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800272c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002730:	2b00      	cmp	r3, #0
 8002732:	f000 8117 	beq.w	8002964 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002736:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b00      	cmp	r3, #0
 8002740:	d106      	bne.n	8002750 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002742:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002746:	4b85      	ldr	r3, [pc, #532]	; (800295c <HAL_UART_IRQHandler+0x298>)
 8002748:	4013      	ands	r3, r2
 800274a:	2b00      	cmp	r3, #0
 800274c:	f000 810a 	beq.w	8002964 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	2b00      	cmp	r3, #0
 800275a:	d011      	beq.n	8002780 <HAL_UART_IRQHandler+0xbc>
 800275c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00b      	beq.n	8002780 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2201      	movs	r2, #1
 800276e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002776:	f043 0201 	orr.w	r2, r3, #1
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d011      	beq.n	80027b0 <HAL_UART_IRQHandler+0xec>
 800278c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00b      	beq.n	80027b0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2202      	movs	r2, #2
 800279e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027a6:	f043 0204 	orr.w	r2, r3, #4
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80027b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d011      	beq.n	80027e0 <HAL_UART_IRQHandler+0x11c>
 80027bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00b      	beq.n	80027e0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2204      	movs	r2, #4
 80027ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027d6:	f043 0202 	orr.w	r2, r3, #2
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80027e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027e4:	f003 0308 	and.w	r3, r3, #8
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d017      	beq.n	800281c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80027ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027f0:	f003 0320 	and.w	r3, r3, #32
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d105      	bne.n	8002804 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80027f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80027fc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00b      	beq.n	800281c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2208      	movs	r2, #8
 800280a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002812:	f043 0208 	orr.w	r2, r3, #8
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800281c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002820:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002824:	2b00      	cmp	r3, #0
 8002826:	d012      	beq.n	800284e <HAL_UART_IRQHandler+0x18a>
 8002828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800282c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00c      	beq.n	800284e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800283c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002844:	f043 0220 	orr.w	r2, r3, #32
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002854:	2b00      	cmp	r3, #0
 8002856:	f000 8211 	beq.w	8002c7c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800285a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800285e:	f003 0320 	and.w	r3, r3, #32
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00d      	beq.n	8002882 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002866:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800286a:	f003 0320 	and.w	r3, r3, #32
 800286e:	2b00      	cmp	r3, #0
 8002870:	d007      	beq.n	8002882 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002888:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002896:	2b40      	cmp	r3, #64	; 0x40
 8002898:	d005      	beq.n	80028a6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800289a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800289e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d04f      	beq.n	8002946 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 fdc0 	bl	800342c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b6:	2b40      	cmp	r3, #64	; 0x40
 80028b8:	d141      	bne.n	800293e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	3308      	adds	r3, #8
 80028c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80028c8:	e853 3f00 	ldrex	r3, [r3]
 80028cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80028d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	3308      	adds	r3, #8
 80028e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80028e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80028ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80028f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80028f6:	e841 2300 	strex	r3, r2, [r1]
 80028fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80028fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1d9      	bne.n	80028ba <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800290a:	2b00      	cmp	r3, #0
 800290c:	d013      	beq.n	8002936 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002912:	4a13      	ldr	r2, [pc, #76]	; (8002960 <HAL_UART_IRQHandler+0x29c>)
 8002914:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800291a:	4618      	mov	r0, r3
 800291c:	f7fe f82a 	bl	8000974 <HAL_DMA_Abort_IT>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d017      	beq.n	8002956 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800292a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002930:	4610      	mov	r0, r2
 8002932:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002934:	e00f      	b.n	8002956 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 f9b4 	bl	8002ca4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800293c:	e00b      	b.n	8002956 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 f9b0 	bl	8002ca4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002944:	e007      	b.n	8002956 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 f9ac 	bl	8002ca4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8002954:	e192      	b.n	8002c7c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002956:	bf00      	nop
    return;
 8002958:	e190      	b.n	8002c7c <HAL_UART_IRQHandler+0x5b8>
 800295a:	bf00      	nop
 800295c:	04000120 	.word	0x04000120
 8002960:	080034f5 	.word	0x080034f5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002968:	2b01      	cmp	r3, #1
 800296a:	f040 814b 	bne.w	8002c04 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800296e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002972:	f003 0310 	and.w	r3, r3, #16
 8002976:	2b00      	cmp	r3, #0
 8002978:	f000 8144 	beq.w	8002c04 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800297c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002980:	f003 0310 	and.w	r3, r3, #16
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 813d 	beq.w	8002c04 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2210      	movs	r2, #16
 8002990:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800299c:	2b40      	cmp	r3, #64	; 0x40
 800299e:	f040 80b5 	bne.w	8002b0c <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80029ae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f000 8164 	beq.w	8002c80 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80029be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80029c2:	429a      	cmp	r2, r3
 80029c4:	f080 815c 	bcs.w	8002c80 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80029ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	2b20      	cmp	r3, #32
 80029da:	f000 8086 	beq.w	8002aea <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80029ea:	e853 3f00 	ldrex	r3, [r3]
 80029ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80029f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80029f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	461a      	mov	r2, r3
 8002a04:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002a08:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002a0c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a10:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002a14:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002a18:	e841 2300 	strex	r3, r2, [r1]
 8002a1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002a20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1da      	bne.n	80029de <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	3308      	adds	r3, #8
 8002a2e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a32:	e853 3f00 	ldrex	r3, [r3]
 8002a36:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002a38:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002a3a:	f023 0301 	bic.w	r3, r3, #1
 8002a3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	3308      	adds	r3, #8
 8002a48:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002a4c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002a50:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a52:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002a54:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002a58:	e841 2300 	strex	r3, r2, [r1]
 8002a5c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002a5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1e1      	bne.n	8002a28 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	3308      	adds	r3, #8
 8002a6a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a6e:	e853 3f00 	ldrex	r3, [r3]
 8002a72:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002a74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	3308      	adds	r3, #8
 8002a84:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002a88:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002a8a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a8c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002a8e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002a90:	e841 2300 	strex	r3, r2, [r1]
 8002a94:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002a96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d1e3      	bne.n	8002a64 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ab0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ab2:	e853 3f00 	ldrex	r3, [r3]
 8002ab6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002ab8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002aba:	f023 0310 	bic.w	r3, r3, #16
 8002abe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002acc:	65bb      	str	r3, [r7, #88]	; 0x58
 8002ace:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ad0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002ad2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ad4:	e841 2300 	strex	r3, r2, [r1]
 8002ad8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002ada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d1e4      	bne.n	8002aaa <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7fd ff0c 	bl	8000902 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2202      	movs	r2, #2
 8002aee:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	4619      	mov	r1, r3
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f000 f8d7 	bl	8002cb8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002b0a:	e0b9      	b.n	8002c80 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f000 80ab 	beq.w	8002c84 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8002b2e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f000 80a6 	beq.w	8002c84 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b40:	e853 3f00 	ldrex	r3, [r3]
 8002b44:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	461a      	mov	r2, r3
 8002b56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b5a:	647b      	str	r3, [r7, #68]	; 0x44
 8002b5c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002b60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b62:	e841 2300 	strex	r3, r2, [r1]
 8002b66:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d1e4      	bne.n	8002b38 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	3308      	adds	r3, #8
 8002b74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	e853 3f00 	ldrex	r3, [r3]
 8002b7c:	623b      	str	r3, [r7, #32]
   return(result);
 8002b7e:	6a3b      	ldr	r3, [r7, #32]
 8002b80:	f023 0301 	bic.w	r3, r3, #1
 8002b84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	3308      	adds	r3, #8
 8002b8e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002b92:	633a      	str	r2, [r7, #48]	; 0x30
 8002b94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b9a:	e841 2300 	strex	r3, r2, [r1]
 8002b9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1e3      	bne.n	8002b6e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2220      	movs	r2, #32
 8002baa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	e853 3f00 	ldrex	r3, [r3]
 8002bc6:	60fb      	str	r3, [r7, #12]
   return(result);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f023 0310 	bic.w	r3, r3, #16
 8002bce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002bdc:	61fb      	str	r3, [r7, #28]
 8002bde:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002be0:	69b9      	ldr	r1, [r7, #24]
 8002be2:	69fa      	ldr	r2, [r7, #28]
 8002be4:	e841 2300 	strex	r3, r2, [r1]
 8002be8:	617b      	str	r3, [r7, #20]
   return(result);
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d1e4      	bne.n	8002bba <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002bf6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 f85b 	bl	8002cb8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c02:	e03f      	b.n	8002c84 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002c04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00e      	beq.n	8002c2e <HAL_UART_IRQHandler+0x56a>
 8002c10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d008      	beq.n	8002c2e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002c24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 fe4c 	bl	80038c4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002c2c:	e02d      	b.n	8002c8a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00e      	beq.n	8002c58 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002c3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d008      	beq.n	8002c58 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d01c      	beq.n	8002c88 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	4798      	blx	r3
    }
    return;
 8002c56:	e017      	b.n	8002c88 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d012      	beq.n	8002c8a <HAL_UART_IRQHandler+0x5c6>
 8002c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d00c      	beq.n	8002c8a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 fc55 	bl	8003520 <UART_EndTransmit_IT>
    return;
 8002c76:	e008      	b.n	8002c8a <HAL_UART_IRQHandler+0x5c6>
      return;
 8002c78:	bf00      	nop
 8002c7a:	e006      	b.n	8002c8a <HAL_UART_IRQHandler+0x5c6>
    return;
 8002c7c:	bf00      	nop
 8002c7e:	e004      	b.n	8002c8a <HAL_UART_IRQHandler+0x5c6>
      return;
 8002c80:	bf00      	nop
 8002c82:	e002      	b.n	8002c8a <HAL_UART_IRQHandler+0x5c6>
      return;
 8002c84:	bf00      	nop
 8002c86:	e000      	b.n	8002c8a <HAL_UART_IRQHandler+0x5c6>
    return;
 8002c88:	bf00      	nop
  }

}
 8002c8a:	37e8      	adds	r7, #232	; 0xe8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b088      	sub	sp, #32
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	431a      	orrs	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	69db      	ldr	r3, [r3, #28]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	4b8a      	ldr	r3, [pc, #552]	; (8002f24 <UART_SetConfig+0x254>)
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	6812      	ldr	r2, [r2, #0]
 8002d02:	6979      	ldr	r1, [r7, #20]
 8002d04:	430b      	orrs	r3, r1
 8002d06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	68da      	ldr	r2, [r3, #12]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a1b      	ldr	r3, [r3, #32]
 8002d28:	697a      	ldr	r2, [r7, #20]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	697a      	ldr	r2, [r7, #20]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a78      	ldr	r2, [pc, #480]	; (8002f28 <UART_SetConfig+0x258>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d120      	bne.n	8002d8e <UART_SetConfig+0xbe>
 8002d4c:	4b77      	ldr	r3, [pc, #476]	; (8002f2c <UART_SetConfig+0x25c>)
 8002d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d50:	f003 0303 	and.w	r3, r3, #3
 8002d54:	2b03      	cmp	r3, #3
 8002d56:	d817      	bhi.n	8002d88 <UART_SetConfig+0xb8>
 8002d58:	a201      	add	r2, pc, #4	; (adr r2, 8002d60 <UART_SetConfig+0x90>)
 8002d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d5e:	bf00      	nop
 8002d60:	08002d71 	.word	0x08002d71
 8002d64:	08002d7d 	.word	0x08002d7d
 8002d68:	08002d83 	.word	0x08002d83
 8002d6c:	08002d77 	.word	0x08002d77
 8002d70:	2300      	movs	r3, #0
 8002d72:	77fb      	strb	r3, [r7, #31]
 8002d74:	e01d      	b.n	8002db2 <UART_SetConfig+0xe2>
 8002d76:	2302      	movs	r3, #2
 8002d78:	77fb      	strb	r3, [r7, #31]
 8002d7a:	e01a      	b.n	8002db2 <UART_SetConfig+0xe2>
 8002d7c:	2304      	movs	r3, #4
 8002d7e:	77fb      	strb	r3, [r7, #31]
 8002d80:	e017      	b.n	8002db2 <UART_SetConfig+0xe2>
 8002d82:	2308      	movs	r3, #8
 8002d84:	77fb      	strb	r3, [r7, #31]
 8002d86:	e014      	b.n	8002db2 <UART_SetConfig+0xe2>
 8002d88:	2310      	movs	r3, #16
 8002d8a:	77fb      	strb	r3, [r7, #31]
 8002d8c:	e011      	b.n	8002db2 <UART_SetConfig+0xe2>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a67      	ldr	r2, [pc, #412]	; (8002f30 <UART_SetConfig+0x260>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d102      	bne.n	8002d9e <UART_SetConfig+0xce>
 8002d98:	2300      	movs	r3, #0
 8002d9a:	77fb      	strb	r3, [r7, #31]
 8002d9c:	e009      	b.n	8002db2 <UART_SetConfig+0xe2>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a64      	ldr	r2, [pc, #400]	; (8002f34 <UART_SetConfig+0x264>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d102      	bne.n	8002dae <UART_SetConfig+0xde>
 8002da8:	2300      	movs	r3, #0
 8002daa:	77fb      	strb	r3, [r7, #31]
 8002dac:	e001      	b.n	8002db2 <UART_SetConfig+0xe2>
 8002dae:	2310      	movs	r3, #16
 8002db0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dba:	d15a      	bne.n	8002e72 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8002dbc:	7ffb      	ldrb	r3, [r7, #31]
 8002dbe:	2b08      	cmp	r3, #8
 8002dc0:	d827      	bhi.n	8002e12 <UART_SetConfig+0x142>
 8002dc2:	a201      	add	r2, pc, #4	; (adr r2, 8002dc8 <UART_SetConfig+0xf8>)
 8002dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc8:	08002ded 	.word	0x08002ded
 8002dcc:	08002df5 	.word	0x08002df5
 8002dd0:	08002dfd 	.word	0x08002dfd
 8002dd4:	08002e13 	.word	0x08002e13
 8002dd8:	08002e03 	.word	0x08002e03
 8002ddc:	08002e13 	.word	0x08002e13
 8002de0:	08002e13 	.word	0x08002e13
 8002de4:	08002e13 	.word	0x08002e13
 8002de8:	08002e0b 	.word	0x08002e0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dec:	f7ff f9d4 	bl	8002198 <HAL_RCC_GetPCLK1Freq>
 8002df0:	61b8      	str	r0, [r7, #24]
        break;
 8002df2:	e013      	b.n	8002e1c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002df4:	f7ff f9f2 	bl	80021dc <HAL_RCC_GetPCLK2Freq>
 8002df8:	61b8      	str	r0, [r7, #24]
        break;
 8002dfa:	e00f      	b.n	8002e1c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002dfc:	4b4e      	ldr	r3, [pc, #312]	; (8002f38 <UART_SetConfig+0x268>)
 8002dfe:	61bb      	str	r3, [r7, #24]
        break;
 8002e00:	e00c      	b.n	8002e1c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e02:	f7ff f953 	bl	80020ac <HAL_RCC_GetSysClockFreq>
 8002e06:	61b8      	str	r0, [r7, #24]
        break;
 8002e08:	e008      	b.n	8002e1c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e0e:	61bb      	str	r3, [r7, #24]
        break;
 8002e10:	e004      	b.n	8002e1c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002e12:	2300      	movs	r3, #0
 8002e14:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	77bb      	strb	r3, [r7, #30]
        break;
 8002e1a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d074      	beq.n	8002f0c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	005a      	lsls	r2, r3, #1
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	085b      	lsrs	r3, r3, #1
 8002e2c:	441a      	add	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e36:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	2b0f      	cmp	r3, #15
 8002e3c:	d916      	bls.n	8002e6c <UART_SetConfig+0x19c>
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e44:	d212      	bcs.n	8002e6c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	f023 030f 	bic.w	r3, r3, #15
 8002e4e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	085b      	lsrs	r3, r3, #1
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	89fb      	ldrh	r3, [r7, #14]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	89fa      	ldrh	r2, [r7, #14]
 8002e68:	60da      	str	r2, [r3, #12]
 8002e6a:	e04f      	b.n	8002f0c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	77bb      	strb	r3, [r7, #30]
 8002e70:	e04c      	b.n	8002f0c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002e72:	7ffb      	ldrb	r3, [r7, #31]
 8002e74:	2b08      	cmp	r3, #8
 8002e76:	d828      	bhi.n	8002eca <UART_SetConfig+0x1fa>
 8002e78:	a201      	add	r2, pc, #4	; (adr r2, 8002e80 <UART_SetConfig+0x1b0>)
 8002e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e7e:	bf00      	nop
 8002e80:	08002ea5 	.word	0x08002ea5
 8002e84:	08002ead 	.word	0x08002ead
 8002e88:	08002eb5 	.word	0x08002eb5
 8002e8c:	08002ecb 	.word	0x08002ecb
 8002e90:	08002ebb 	.word	0x08002ebb
 8002e94:	08002ecb 	.word	0x08002ecb
 8002e98:	08002ecb 	.word	0x08002ecb
 8002e9c:	08002ecb 	.word	0x08002ecb
 8002ea0:	08002ec3 	.word	0x08002ec3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ea4:	f7ff f978 	bl	8002198 <HAL_RCC_GetPCLK1Freq>
 8002ea8:	61b8      	str	r0, [r7, #24]
        break;
 8002eaa:	e013      	b.n	8002ed4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002eac:	f7ff f996 	bl	80021dc <HAL_RCC_GetPCLK2Freq>
 8002eb0:	61b8      	str	r0, [r7, #24]
        break;
 8002eb2:	e00f      	b.n	8002ed4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002eb4:	4b20      	ldr	r3, [pc, #128]	; (8002f38 <UART_SetConfig+0x268>)
 8002eb6:	61bb      	str	r3, [r7, #24]
        break;
 8002eb8:	e00c      	b.n	8002ed4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002eba:	f7ff f8f7 	bl	80020ac <HAL_RCC_GetSysClockFreq>
 8002ebe:	61b8      	str	r0, [r7, #24]
        break;
 8002ec0:	e008      	b.n	8002ed4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ec2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ec6:	61bb      	str	r3, [r7, #24]
        break;
 8002ec8:	e004      	b.n	8002ed4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	77bb      	strb	r3, [r7, #30]
        break;
 8002ed2:	bf00      	nop
    }

    if (pclk != 0U)
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d018      	beq.n	8002f0c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	085a      	lsrs	r2, r3, #1
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	441a      	add	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	2b0f      	cmp	r3, #15
 8002ef2:	d909      	bls.n	8002f08 <UART_SetConfig+0x238>
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002efa:	d205      	bcs.n	8002f08 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	60da      	str	r2, [r3, #12]
 8002f06:	e001      	b.n	8002f0c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002f18:	7fbb      	ldrb	r3, [r7, #30]
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3720      	adds	r7, #32
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	efff69f3 	.word	0xefff69f3
 8002f28:	40013800 	.word	0x40013800
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	40004400 	.word	0x40004400
 8002f34:	40004800 	.word	0x40004800
 8002f38:	007a1200 	.word	0x007a1200

08002f3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00a      	beq.n	8002f66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	430a      	orrs	r2, r1
 8002f64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00a      	beq.n	8002f88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8c:	f003 0304 	and.w	r3, r3, #4
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00a      	beq.n	8002faa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	f003 0308 	and.w	r3, r3, #8
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00a      	beq.n	8002fcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd0:	f003 0310 	and.w	r3, r3, #16
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00a      	beq.n	8002fee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff2:	f003 0320 	and.w	r3, r3, #32
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00a      	beq.n	8003010 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	430a      	orrs	r2, r1
 800300e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003018:	2b00      	cmp	r3, #0
 800301a:	d01a      	beq.n	8003052 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	430a      	orrs	r2, r1
 8003030:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800303a:	d10a      	bne.n	8003052 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	430a      	orrs	r2, r1
 8003050:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00a      	beq.n	8003074 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	430a      	orrs	r2, r1
 8003072:	605a      	str	r2, [r3, #4]
  }
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b098      	sub	sp, #96	; 0x60
 8003084:	af02      	add	r7, sp, #8
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003090:	f7fd fb1a 	bl	80006c8 <HAL_GetTick>
 8003094:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0308 	and.w	r3, r3, #8
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d12e      	bne.n	8003102 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030ac:	2200      	movs	r2, #0
 80030ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 f88c 	bl	80031d0 <UART_WaitOnFlagUntilTimeout>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d021      	beq.n	8003102 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c6:	e853 3f00 	ldrex	r3, [r3]
 80030ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80030cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030d2:	653b      	str	r3, [r7, #80]	; 0x50
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	461a      	mov	r2, r3
 80030da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030dc:	647b      	str	r3, [r7, #68]	; 0x44
 80030de:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80030e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030e4:	e841 2300 	strex	r3, r2, [r1]
 80030e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80030ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1e6      	bne.n	80030be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2220      	movs	r2, #32
 80030f4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e062      	b.n	80031c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0304 	and.w	r3, r3, #4
 800310c:	2b04      	cmp	r3, #4
 800310e:	d149      	bne.n	80031a4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003110:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003118:	2200      	movs	r2, #0
 800311a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 f856 	bl	80031d0 <UART_WaitOnFlagUntilTimeout>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d03c      	beq.n	80031a4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003132:	e853 3f00 	ldrex	r3, [r3]
 8003136:	623b      	str	r3, [r7, #32]
   return(result);
 8003138:	6a3b      	ldr	r3, [r7, #32]
 800313a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800313e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	461a      	mov	r2, r3
 8003146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003148:	633b      	str	r3, [r7, #48]	; 0x30
 800314a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800314c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800314e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003150:	e841 2300 	strex	r3, r2, [r1]
 8003154:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1e6      	bne.n	800312a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	3308      	adds	r3, #8
 8003162:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	e853 3f00 	ldrex	r3, [r3]
 800316a:	60fb      	str	r3, [r7, #12]
   return(result);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f023 0301 	bic.w	r3, r3, #1
 8003172:	64bb      	str	r3, [r7, #72]	; 0x48
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	3308      	adds	r3, #8
 800317a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800317c:	61fa      	str	r2, [r7, #28]
 800317e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003180:	69b9      	ldr	r1, [r7, #24]
 8003182:	69fa      	ldr	r2, [r7, #28]
 8003184:	e841 2300 	strex	r3, r2, [r1]
 8003188:	617b      	str	r3, [r7, #20]
   return(result);
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1e5      	bne.n	800315c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2220      	movs	r2, #32
 8003194:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e011      	b.n	80031c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2220      	movs	r2, #32
 80031a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2220      	movs	r2, #32
 80031ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3758      	adds	r7, #88	; 0x58
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	60b9      	str	r1, [r7, #8]
 80031da:	603b      	str	r3, [r7, #0]
 80031dc:	4613      	mov	r3, r2
 80031de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031e0:	e049      	b.n	8003276 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031e8:	d045      	beq.n	8003276 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ea:	f7fd fa6d 	bl	80006c8 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d302      	bcc.n	8003200 <UART_WaitOnFlagUntilTimeout+0x30>
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d101      	bne.n	8003204 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e048      	b.n	8003296 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0304 	and.w	r3, r3, #4
 800320e:	2b00      	cmp	r3, #0
 8003210:	d031      	beq.n	8003276 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	69db      	ldr	r3, [r3, #28]
 8003218:	f003 0308 	and.w	r3, r3, #8
 800321c:	2b08      	cmp	r3, #8
 800321e:	d110      	bne.n	8003242 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2208      	movs	r2, #8
 8003226:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f000 f8ff 	bl	800342c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2208      	movs	r2, #8
 8003232:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e029      	b.n	8003296 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	69db      	ldr	r3, [r3, #28]
 8003248:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800324c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003250:	d111      	bne.n	8003276 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800325a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f000 f8e5 	bl	800342c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2220      	movs	r2, #32
 8003266:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e00f      	b.n	8003296 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	69da      	ldr	r2, [r3, #28]
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	4013      	ands	r3, r2
 8003280:	68ba      	ldr	r2, [r7, #8]
 8003282:	429a      	cmp	r2, r3
 8003284:	bf0c      	ite	eq
 8003286:	2301      	moveq	r3, #1
 8003288:	2300      	movne	r3, #0
 800328a:	b2db      	uxtb	r3, r3
 800328c:	461a      	mov	r2, r3
 800328e:	79fb      	ldrb	r3, [r7, #7]
 8003290:	429a      	cmp	r2, r3
 8003292:	d0a6      	beq.n	80031e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
	...

080032a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b097      	sub	sp, #92	; 0x5c
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	4613      	mov	r3, r2
 80032ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	68ba      	ldr	r2, [r7, #8]
 80032b2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	88fa      	ldrh	r2, [r7, #6]
 80032b8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	88fa      	ldrh	r2, [r7, #6]
 80032c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032d2:	d10e      	bne.n	80032f2 <UART_Start_Receive_IT+0x52>
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d105      	bne.n	80032e8 <UART_Start_Receive_IT+0x48>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f240 12ff 	movw	r2, #511	; 0x1ff
 80032e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80032e6:	e02d      	b.n	8003344 <UART_Start_Receive_IT+0xa4>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	22ff      	movs	r2, #255	; 0xff
 80032ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80032f0:	e028      	b.n	8003344 <UART_Start_Receive_IT+0xa4>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10d      	bne.n	8003316 <UART_Start_Receive_IT+0x76>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d104      	bne.n	800330c <UART_Start_Receive_IT+0x6c>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	22ff      	movs	r2, #255	; 0xff
 8003306:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800330a:	e01b      	b.n	8003344 <UART_Start_Receive_IT+0xa4>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	227f      	movs	r2, #127	; 0x7f
 8003310:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003314:	e016      	b.n	8003344 <UART_Start_Receive_IT+0xa4>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800331e:	d10d      	bne.n	800333c <UART_Start_Receive_IT+0x9c>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d104      	bne.n	8003332 <UART_Start_Receive_IT+0x92>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	227f      	movs	r2, #127	; 0x7f
 800332c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003330:	e008      	b.n	8003344 <UART_Start_Receive_IT+0xa4>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	223f      	movs	r2, #63	; 0x3f
 8003336:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800333a:	e003      	b.n	8003344 <UART_Start_Receive_IT+0xa4>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2222      	movs	r2, #34	; 0x22
 8003350:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	3308      	adds	r3, #8
 800335a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800335c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800335e:	e853 3f00 	ldrex	r3, [r3]
 8003362:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003366:	f043 0301 	orr.w	r3, r3, #1
 800336a:	657b      	str	r3, [r7, #84]	; 0x54
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	3308      	adds	r3, #8
 8003372:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003374:	64ba      	str	r2, [r7, #72]	; 0x48
 8003376:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003378:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800337a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800337c:	e841 2300 	strex	r3, r2, [r1]
 8003380:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003382:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1e5      	bne.n	8003354 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003390:	d107      	bne.n	80033a2 <UART_Start_Receive_IT+0x102>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d103      	bne.n	80033a2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4a21      	ldr	r2, [pc, #132]	; (8003424 <UART_Start_Receive_IT+0x184>)
 800339e:	669a      	str	r2, [r3, #104]	; 0x68
 80033a0:	e002      	b.n	80033a8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	4a20      	ldr	r2, [pc, #128]	; (8003428 <UART_Start_Receive_IT+0x188>)
 80033a6:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d019      	beq.n	80033e4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033b8:	e853 3f00 	ldrex	r3, [r3]
 80033bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80033be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c0:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80033c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	461a      	mov	r2, r3
 80033cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033ce:	637b      	str	r3, [r7, #52]	; 0x34
 80033d0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033d6:	e841 2300 	strex	r3, r2, [r1]
 80033da:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80033dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1e6      	bne.n	80033b0 <UART_Start_Receive_IT+0x110>
 80033e2:	e018      	b.n	8003416 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	e853 3f00 	ldrex	r3, [r3]
 80033f0:	613b      	str	r3, [r7, #16]
   return(result);
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	f043 0320 	orr.w	r3, r3, #32
 80033f8:	653b      	str	r3, [r7, #80]	; 0x50
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	461a      	mov	r2, r3
 8003400:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003402:	623b      	str	r3, [r7, #32]
 8003404:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003406:	69f9      	ldr	r1, [r7, #28]
 8003408:	6a3a      	ldr	r2, [r7, #32]
 800340a:	e841 2300 	strex	r3, r2, [r1]
 800340e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1e6      	bne.n	80033e4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	375c      	adds	r7, #92	; 0x5c
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	0800371d 	.word	0x0800371d
 8003428:	08003575 	.word	0x08003575

0800342c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800342c:	b480      	push	{r7}
 800342e:	b095      	sub	sp, #84	; 0x54
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800343a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800343c:	e853 3f00 	ldrex	r3, [r3]
 8003440:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003444:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003448:	64fb      	str	r3, [r7, #76]	; 0x4c
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	461a      	mov	r2, r3
 8003450:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003452:	643b      	str	r3, [r7, #64]	; 0x40
 8003454:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003456:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003458:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800345a:	e841 2300 	strex	r3, r2, [r1]
 800345e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1e6      	bne.n	8003434 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	3308      	adds	r3, #8
 800346c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346e:	6a3b      	ldr	r3, [r7, #32]
 8003470:	e853 3f00 	ldrex	r3, [r3]
 8003474:	61fb      	str	r3, [r7, #28]
   return(result);
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	f023 0301 	bic.w	r3, r3, #1
 800347c:	64bb      	str	r3, [r7, #72]	; 0x48
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	3308      	adds	r3, #8
 8003484:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003486:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003488:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800348c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800348e:	e841 2300 	strex	r3, r2, [r1]
 8003492:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1e5      	bne.n	8003466 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d118      	bne.n	80034d4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	e853 3f00 	ldrex	r3, [r3]
 80034ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	f023 0310 	bic.w	r3, r3, #16
 80034b6:	647b      	str	r3, [r7, #68]	; 0x44
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	461a      	mov	r2, r3
 80034be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034c0:	61bb      	str	r3, [r7, #24]
 80034c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c4:	6979      	ldr	r1, [r7, #20]
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	e841 2300 	strex	r3, r2, [r1]
 80034cc:	613b      	str	r3, [r7, #16]
   return(result);
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1e6      	bne.n	80034a2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80034e8:	bf00      	nop
 80034ea:	3754      	adds	r7, #84	; 0x54
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr

080034f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003500:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f7ff fbc6 	bl	8002ca4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003518:	bf00      	nop
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b088      	sub	sp, #32
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	e853 3f00 	ldrex	r3, [r3]
 8003534:	60bb      	str	r3, [r7, #8]
   return(result);
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800353c:	61fb      	str	r3, [r7, #28]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	461a      	mov	r2, r3
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	61bb      	str	r3, [r7, #24]
 8003548:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800354a:	6979      	ldr	r1, [r7, #20]
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	e841 2300 	strex	r3, r2, [r1]
 8003552:	613b      	str	r3, [r7, #16]
   return(result);
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1e6      	bne.n	8003528 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2220      	movs	r2, #32
 800355e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7ff fb92 	bl	8002c90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800356c:	bf00      	nop
 800356e:	3720      	adds	r7, #32
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b09c      	sub	sp, #112	; 0x70
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003582:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800358c:	2b22      	cmp	r3, #34	; 0x22
 800358e:	f040 80b9 	bne.w	8003704 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003598:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800359c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80035a0:	b2d9      	uxtb	r1, r3
 80035a2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80035a6:	b2da      	uxtb	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ac:	400a      	ands	r2, r1
 80035ae:	b2d2      	uxtb	r2, r2
 80035b0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b6:	1c5a      	adds	r2, r3, #1
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	3b01      	subs	r3, #1
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f040 809c 	bne.w	8003714 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035e4:	e853 3f00 	ldrex	r3, [r3]
 80035e8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80035ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80035f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	461a      	mov	r2, r3
 80035f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80035fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80035fc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003600:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003602:	e841 2300 	strex	r3, r2, [r1]
 8003606:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003608:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1e6      	bne.n	80035dc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	3308      	adds	r3, #8
 8003614:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003618:	e853 3f00 	ldrex	r3, [r3]
 800361c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800361e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003620:	f023 0301 	bic.w	r3, r3, #1
 8003624:	667b      	str	r3, [r7, #100]	; 0x64
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	3308      	adds	r3, #8
 800362c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800362e:	647a      	str	r2, [r7, #68]	; 0x44
 8003630:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003632:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003634:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003636:	e841 2300 	strex	r3, r2, [r1]
 800363a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800363c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1e5      	bne.n	800360e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2220      	movs	r2, #32
 8003646:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d018      	beq.n	8003696 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	e853 3f00 	ldrex	r3, [r3]
 8003670:	623b      	str	r3, [r7, #32]
   return(result);
 8003672:	6a3b      	ldr	r3, [r7, #32]
 8003674:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003678:	663b      	str	r3, [r7, #96]	; 0x60
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	461a      	mov	r2, r3
 8003680:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003682:	633b      	str	r3, [r7, #48]	; 0x30
 8003684:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003686:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800368a:	e841 2300 	strex	r3, r2, [r1]
 800368e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1e6      	bne.n	8003664 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800369a:	2b01      	cmp	r3, #1
 800369c:	d12e      	bne.n	80036fc <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	e853 3f00 	ldrex	r3, [r3]
 80036b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f023 0310 	bic.w	r3, r3, #16
 80036b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	461a      	mov	r2, r3
 80036c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80036c2:	61fb      	str	r3, [r7, #28]
 80036c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c6:	69b9      	ldr	r1, [r7, #24]
 80036c8:	69fa      	ldr	r2, [r7, #28]
 80036ca:	e841 2300 	strex	r3, r2, [r1]
 80036ce:	617b      	str	r3, [r7, #20]
   return(result);
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1e6      	bne.n	80036a4 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	69db      	ldr	r3, [r3, #28]
 80036dc:	f003 0310 	and.w	r3, r3, #16
 80036e0:	2b10      	cmp	r3, #16
 80036e2:	d103      	bne.n	80036ec <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2210      	movs	r2, #16
 80036ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80036f2:	4619      	mov	r1, r3
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f7ff fadf 	bl	8002cb8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80036fa:	e00b      	b.n	8003714 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f7fc fe4b 	bl	8000398 <HAL_UART_RxCpltCallback>
}
 8003702:	e007      	b.n	8003714 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	699a      	ldr	r2, [r3, #24]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f042 0208 	orr.w	r2, r2, #8
 8003712:	619a      	str	r2, [r3, #24]
}
 8003714:	bf00      	nop
 8003716:	3770      	adds	r7, #112	; 0x70
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b09c      	sub	sp, #112	; 0x70
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800372a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003734:	2b22      	cmp	r3, #34	; 0x22
 8003736:	f040 80b9 	bne.w	80038ac <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003740:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003748:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800374a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800374e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8003752:	4013      	ands	r3, r2
 8003754:	b29a      	uxth	r2, r3
 8003756:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003758:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800375e:	1c9a      	adds	r2, r3, #2
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800376a:	b29b      	uxth	r3, r3
 800376c:	3b01      	subs	r3, #1
 800376e:	b29a      	uxth	r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800377c:	b29b      	uxth	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	f040 809c 	bne.w	80038bc <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800378c:	e853 3f00 	ldrex	r3, [r3]
 8003790:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003792:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003794:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003798:	667b      	str	r3, [r7, #100]	; 0x64
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	461a      	mov	r2, r3
 80037a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037a2:	657b      	str	r3, [r7, #84]	; 0x54
 80037a4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80037a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80037aa:	e841 2300 	strex	r3, r2, [r1]
 80037ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80037b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d1e6      	bne.n	8003784 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	3308      	adds	r3, #8
 80037bc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037c0:	e853 3f00 	ldrex	r3, [r3]
 80037c4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80037c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c8:	f023 0301 	bic.w	r3, r3, #1
 80037cc:	663b      	str	r3, [r7, #96]	; 0x60
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	3308      	adds	r3, #8
 80037d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80037d6:	643a      	str	r2, [r7, #64]	; 0x40
 80037d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80037dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80037de:	e841 2300 	strex	r3, r2, [r1]
 80037e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1e5      	bne.n	80037b6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2220      	movs	r2, #32
 80037ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2200      	movs	r2, #0
 80037f6:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d018      	beq.n	800383e <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003812:	6a3b      	ldr	r3, [r7, #32]
 8003814:	e853 3f00 	ldrex	r3, [r3]
 8003818:	61fb      	str	r3, [r7, #28]
   return(result);
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003820:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	461a      	mov	r2, r3
 8003828:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800382a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800382c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800382e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003832:	e841 2300 	strex	r3, r2, [r1]
 8003836:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383a:	2b00      	cmp	r3, #0
 800383c:	d1e6      	bne.n	800380c <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003842:	2b01      	cmp	r3, #1
 8003844:	d12e      	bne.n	80038a4 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	e853 3f00 	ldrex	r3, [r3]
 8003858:	60bb      	str	r3, [r7, #8]
   return(result);
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	f023 0310 	bic.w	r3, r3, #16
 8003860:	65bb      	str	r3, [r7, #88]	; 0x58
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	461a      	mov	r2, r3
 8003868:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800386a:	61bb      	str	r3, [r7, #24]
 800386c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800386e:	6979      	ldr	r1, [r7, #20]
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	e841 2300 	strex	r3, r2, [r1]
 8003876:	613b      	str	r3, [r7, #16]
   return(result);
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1e6      	bne.n	800384c <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	69db      	ldr	r3, [r3, #28]
 8003884:	f003 0310 	and.w	r3, r3, #16
 8003888:	2b10      	cmp	r3, #16
 800388a:	d103      	bne.n	8003894 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2210      	movs	r2, #16
 8003892:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800389a:	4619      	mov	r1, r3
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f7ff fa0b 	bl	8002cb8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80038a2:	e00b      	b.n	80038bc <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f7fc fd77 	bl	8000398 <HAL_UART_RxCpltCallback>
}
 80038aa:	e007      	b.n	80038bc <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	699a      	ldr	r2, [r3, #24]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f042 0208 	orr.w	r2, r2, #8
 80038ba:	619a      	str	r2, [r3, #24]
}
 80038bc:	bf00      	nop
 80038be:	3770      	adds	r7, #112	; 0x70
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr

080038d8 <memset>:
 80038d8:	4402      	add	r2, r0
 80038da:	4603      	mov	r3, r0
 80038dc:	4293      	cmp	r3, r2
 80038de:	d100      	bne.n	80038e2 <memset+0xa>
 80038e0:	4770      	bx	lr
 80038e2:	f803 1b01 	strb.w	r1, [r3], #1
 80038e6:	e7f9      	b.n	80038dc <memset+0x4>

080038e8 <__libc_init_array>:
 80038e8:	b570      	push	{r4, r5, r6, lr}
 80038ea:	4d0d      	ldr	r5, [pc, #52]	; (8003920 <__libc_init_array+0x38>)
 80038ec:	4c0d      	ldr	r4, [pc, #52]	; (8003924 <__libc_init_array+0x3c>)
 80038ee:	1b64      	subs	r4, r4, r5
 80038f0:	10a4      	asrs	r4, r4, #2
 80038f2:	2600      	movs	r6, #0
 80038f4:	42a6      	cmp	r6, r4
 80038f6:	d109      	bne.n	800390c <__libc_init_array+0x24>
 80038f8:	4d0b      	ldr	r5, [pc, #44]	; (8003928 <__libc_init_array+0x40>)
 80038fa:	4c0c      	ldr	r4, [pc, #48]	; (800392c <__libc_init_array+0x44>)
 80038fc:	f000 f818 	bl	8003930 <_init>
 8003900:	1b64      	subs	r4, r4, r5
 8003902:	10a4      	asrs	r4, r4, #2
 8003904:	2600      	movs	r6, #0
 8003906:	42a6      	cmp	r6, r4
 8003908:	d105      	bne.n	8003916 <__libc_init_array+0x2e>
 800390a:	bd70      	pop	{r4, r5, r6, pc}
 800390c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003910:	4798      	blx	r3
 8003912:	3601      	adds	r6, #1
 8003914:	e7ee      	b.n	80038f4 <__libc_init_array+0xc>
 8003916:	f855 3b04 	ldr.w	r3, [r5], #4
 800391a:	4798      	blx	r3
 800391c:	3601      	adds	r6, #1
 800391e:	e7f2      	b.n	8003906 <__libc_init_array+0x1e>
 8003920:	08003998 	.word	0x08003998
 8003924:	08003998 	.word	0x08003998
 8003928:	08003998 	.word	0x08003998
 800392c:	0800399c 	.word	0x0800399c

08003930 <_init>:
 8003930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003932:	bf00      	nop
 8003934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003936:	bc08      	pop	{r3}
 8003938:	469e      	mov	lr, r3
 800393a:	4770      	bx	lr

0800393c <_fini>:
 800393c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800393e:	bf00      	nop
 8003940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003942:	bc08      	pop	{r3}
 8003944:	469e      	mov	lr, r3
 8003946:	4770      	bx	lr
