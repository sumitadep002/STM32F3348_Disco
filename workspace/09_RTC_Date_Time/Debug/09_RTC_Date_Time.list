
09_RTC_Date_Time.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003acc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08003c5c  08003c5c  00013c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cec  08003cec  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08003cec  08003cec  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003cec  08003cec  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cec  08003cec  00013cec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cf0  08003cf0  00013cf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08003cf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          00000268  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002c4  200002c4  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00009a4f  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000178c  00000000  00000000  00029b1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000760  00000000  00000000  0002b2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000005a2  00000000  00000000  0002ba10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001fe13  00000000  00000000  0002bfb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000a211  00000000  00000000  0004bdc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bedfa  00000000  00000000  00055fd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000021f8  00000000  00000000  00114dd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  00116fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003c44 	.word	0x08003c44

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08003c44 	.word	0x08003c44

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000280:	b5b0      	push	{r4, r5, r7, lr}
 8000282:	b084      	sub	sp, #16
 8000284:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000286:	f000 fa7d 	bl	8000784 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800028a:	f000 f847 	bl	800031c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800028e:	f000 f931 	bl	80004f4 <MX_GPIO_Init>
	MX_RTC_Init();
 8000292:	f000 f8a3 	bl	80003dc <MX_RTC_Init>
	MX_USART1_UART_Init();
 8000296:	f000 f8fd 	bl	8000494 <MX_USART1_UART_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800029a:	2200      	movs	r2, #0
 800029c:	4919      	ldr	r1, [pc, #100]	; (8000304 <main+0x84>)
 800029e:	481a      	ldr	r0, [pc, #104]	; (8000308 <main+0x88>)
 80002a0:	f002 fafb 	bl	800289a <HAL_RTC_GetDate>
		  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80002a4:	2200      	movs	r2, #0
 80002a6:	4919      	ldr	r1, [pc, #100]	; (800030c <main+0x8c>)
 80002a8:	4817      	ldr	r0, [pc, #92]	; (8000308 <main+0x88>)
 80002aa:	f002 fa14 	bl	80026d6 <HAL_RTC_GetTime>

		  sprintf(time_date,"%02d.%02d.%02d and %02d.%02d.%02d\r\n",sTime.Hours,sTime.Minutes,sTime.Seconds,sDate.Date,sDate.Month,sDate.Year);
 80002ae:	4b17      	ldr	r3, [pc, #92]	; (800030c <main+0x8c>)
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	461c      	mov	r4, r3
 80002b4:	4b15      	ldr	r3, [pc, #84]	; (800030c <main+0x8c>)
 80002b6:	785b      	ldrb	r3, [r3, #1]
 80002b8:	461d      	mov	r5, r3
 80002ba:	4b14      	ldr	r3, [pc, #80]	; (800030c <main+0x8c>)
 80002bc:	789b      	ldrb	r3, [r3, #2]
 80002be:	461a      	mov	r2, r3
 80002c0:	4b10      	ldr	r3, [pc, #64]	; (8000304 <main+0x84>)
 80002c2:	789b      	ldrb	r3, [r3, #2]
 80002c4:	4619      	mov	r1, r3
 80002c6:	4b0f      	ldr	r3, [pc, #60]	; (8000304 <main+0x84>)
 80002c8:	785b      	ldrb	r3, [r3, #1]
 80002ca:	4618      	mov	r0, r3
 80002cc:	4b0d      	ldr	r3, [pc, #52]	; (8000304 <main+0x84>)
 80002ce:	78db      	ldrb	r3, [r3, #3]
 80002d0:	9303      	str	r3, [sp, #12]
 80002d2:	9002      	str	r0, [sp, #8]
 80002d4:	9101      	str	r1, [sp, #4]
 80002d6:	9200      	str	r2, [sp, #0]
 80002d8:	462b      	mov	r3, r5
 80002da:	4622      	mov	r2, r4
 80002dc:	490c      	ldr	r1, [pc, #48]	; (8000310 <main+0x90>)
 80002de:	480d      	ldr	r0, [pc, #52]	; (8000314 <main+0x94>)
 80002e0:	f003 f80c 	bl	80032fc <siprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t*)time_date, strlen(time_date), HAL_MAX_DELAY);
 80002e4:	480b      	ldr	r0, [pc, #44]	; (8000314 <main+0x94>)
 80002e6:	f7ff ff73 	bl	80001d0 <strlen>
 80002ea:	4603      	mov	r3, r0
 80002ec:	b29a      	uxth	r2, r3
 80002ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80002f2:	4908      	ldr	r1, [pc, #32]	; (8000314 <main+0x94>)
 80002f4:	4808      	ldr	r0, [pc, #32]	; (8000318 <main+0x98>)
 80002f6:	f002 fc2b 	bl	8002b50 <HAL_UART_Transmit>
		  HAL_Delay(1000);
 80002fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002fe:	f000 faa7 	bl	8000850 <HAL_Delay>
		  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000302:	e7ca      	b.n	800029a <main+0x1a>
 8000304:	2000008c 	.word	0x2000008c
 8000308:	20000090 	.word	0x20000090
 800030c:	20000078 	.word	0x20000078
 8000310:	08003c5c 	.word	0x08003c5c
 8000314:	20000138 	.word	0x20000138
 8000318:	200000b0 	.word	0x200000b0

0800031c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800031c:	b580      	push	{r7, lr}
 800031e:	b096      	sub	sp, #88	; 0x58
 8000320:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000322:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000326:	2228      	movs	r2, #40	; 0x28
 8000328:	2100      	movs	r1, #0
 800032a:	4618      	mov	r0, r3
 800032c:	f003 f806 	bl	800333c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000330:	f107 031c 	add.w	r3, r7, #28
 8000334:	2200      	movs	r2, #0
 8000336:	601a      	str	r2, [r3, #0]
 8000338:	605a      	str	r2, [r3, #4]
 800033a:	609a      	str	r2, [r3, #8]
 800033c:	60da      	str	r2, [r3, #12]
 800033e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000340:	463b      	mov	r3, r7
 8000342:	2200      	movs	r2, #0
 8000344:	601a      	str	r2, [r3, #0]
 8000346:	605a      	str	r2, [r3, #4]
 8000348:	609a      	str	r2, [r3, #8]
 800034a:	60da      	str	r2, [r3, #12]
 800034c:	611a      	str	r2, [r3, #16]
 800034e:	615a      	str	r2, [r3, #20]
 8000350:	619a      	str	r2, [r3, #24]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000352:	230a      	movs	r3, #10
 8000354:	633b      	str	r3, [r7, #48]	; 0x30
			| RCC_OSCILLATORTYPE_LSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000356:	2301      	movs	r3, #1
 8000358:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800035a:	2310      	movs	r3, #16
 800035c:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800035e:	2301      	movs	r3, #1
 8000360:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000362:	2302      	movs	r3, #2
 8000364:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000366:	2300      	movs	r3, #0
 8000368:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800036a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800036e:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000370:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000374:	4618      	mov	r0, r3
 8000376:	f000 fce7 	bl	8000d48 <HAL_RCC_OscConfig>
 800037a:	4603      	mov	r3, r0
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <SystemClock_Config+0x68>
		Error_Handler();
 8000380:	f000 f8d0 	bl	8000524 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000384:	230f      	movs	r3, #15
 8000386:	61fb      	str	r3, [r7, #28]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000388:	2302      	movs	r3, #2
 800038a:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800038c:	2300      	movs	r3, #0
 800038e:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000390:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000394:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000396:	2300      	movs	r3, #0
 8000398:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800039a:	f107 031c 	add.w	r3, r7, #28
 800039e:	2101      	movs	r1, #1
 80003a0:	4618      	mov	r0, r3
 80003a2:	f001 fd0f 	bl	8001dc4 <HAL_RCC_ClockConfig>
 80003a6:	4603      	mov	r3, r0
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d001      	beq.n	80003b0 <SystemClock_Config+0x94>
		Error_Handler();
 80003ac:	f000 f8ba 	bl	8000524 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 80003b0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80003b4:	603b      	str	r3, [r7, #0]
			| RCC_PERIPHCLK_RTC;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80003b6:	2300      	movs	r3, #0
 80003b8:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80003ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80003be:	607b      	str	r3, [r7, #4]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80003c0:	463b      	mov	r3, r7
 80003c2:	4618      	mov	r0, r3
 80003c4:	f001 ff34 	bl	8002230 <HAL_RCCEx_PeriphCLKConfig>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <SystemClock_Config+0xb6>
		Error_Handler();
 80003ce:	f000 f8a9 	bl	8000524 <Error_Handler>
	}
}
 80003d2:	bf00      	nop
 80003d4:	3758      	adds	r7, #88	; 0x58
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
	...

080003dc <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 80003dc:	b580      	push	{r7, lr}
 80003de:	b086      	sub	sp, #24
 80003e0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 80003e2:	1d3b      	adds	r3, r7, #4
 80003e4:	2200      	movs	r2, #0
 80003e6:	601a      	str	r2, [r3, #0]
 80003e8:	605a      	str	r2, [r3, #4]
 80003ea:	609a      	str	r2, [r3, #8]
 80003ec:	60da      	str	r2, [r3, #12]
 80003ee:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 80003f0:	2300      	movs	r3, #0
 80003f2:	603b      	str	r3, [r7, #0]

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 80003f4:	4b25      	ldr	r3, [pc, #148]	; (800048c <MX_RTC_Init+0xb0>)
 80003f6:	4a26      	ldr	r2, [pc, #152]	; (8000490 <MX_RTC_Init+0xb4>)
 80003f8:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 80003fa:	4b24      	ldr	r3, [pc, #144]	; (800048c <MX_RTC_Init+0xb0>)
 80003fc:	2240      	movs	r2, #64	; 0x40
 80003fe:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 8000400:	4b22      	ldr	r3, [pc, #136]	; (800048c <MX_RTC_Init+0xb0>)
 8000402:	227f      	movs	r2, #127	; 0x7f
 8000404:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8000406:	4b21      	ldr	r3, [pc, #132]	; (800048c <MX_RTC_Init+0xb0>)
 8000408:	22ff      	movs	r2, #255	; 0xff
 800040a:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800040c:	4b1f      	ldr	r3, [pc, #124]	; (800048c <MX_RTC_Init+0xb0>)
 800040e:	2200      	movs	r2, #0
 8000410:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000412:	4b1e      	ldr	r3, [pc, #120]	; (800048c <MX_RTC_Init+0xb0>)
 8000414:	2200      	movs	r2, #0
 8000416:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000418:	4b1c      	ldr	r3, [pc, #112]	; (800048c <MX_RTC_Init+0xb0>)
 800041a:	2200      	movs	r2, #0
 800041c:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 800041e:	481b      	ldr	r0, [pc, #108]	; (800048c <MX_RTC_Init+0xb0>)
 8000420:	f002 f83c 	bl	800249c <HAL_RTC_Init>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <MX_RTC_Init+0x52>
		Error_Handler();
 800042a:	f000 f87b 	bl	8000524 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x12;
 800042e:	2312      	movs	r3, #18
 8000430:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x15;
 8000432:	2315      	movs	r3, #21
 8000434:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 8000436:	2300      	movs	r3, #0
 8000438:	71bb      	strb	r3, [r7, #6]
	sTime.TimeFormat = RTC_HOURFORMAT12_PM;
 800043a:	2301      	movs	r3, #1
 800043c:	71fb      	strb	r3, [r7, #7]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800043e:	2300      	movs	r3, #0
 8000440:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000442:	2300      	movs	r3, #0
 8000444:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8000446:	1d3b      	adds	r3, r7, #4
 8000448:	2201      	movs	r2, #1
 800044a:	4619      	mov	r1, r3
 800044c:	480f      	ldr	r0, [pc, #60]	; (800048c <MX_RTC_Init+0xb0>)
 800044e:	f002 f8a8 	bl	80025a2 <HAL_RTC_SetTime>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d001      	beq.n	800045c <MX_RTC_Init+0x80>
		Error_Handler();
 8000458:	f000 f864 	bl	8000524 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 800045c:	2304      	movs	r3, #4
 800045e:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_OCTOBER;
 8000460:	2310      	movs	r3, #16
 8000462:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x26;
 8000464:	2326      	movs	r3, #38	; 0x26
 8000466:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x23;
 8000468:	2323      	movs	r3, #35	; 0x23
 800046a:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 800046c:	463b      	mov	r3, r7
 800046e:	2201      	movs	r2, #1
 8000470:	4619      	mov	r1, r3
 8000472:	4806      	ldr	r0, [pc, #24]	; (800048c <MX_RTC_Init+0xb0>)
 8000474:	f002 f98d 	bl	8002792 <HAL_RTC_SetDate>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <MX_RTC_Init+0xa6>
		Error_Handler();
 800047e:	f000 f851 	bl	8000524 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */
//	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
	/* USER CODE END RTC_Init 2 */

}
 8000482:	bf00      	nop
 8000484:	3718      	adds	r7, #24
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	20000090 	.word	0x20000090
 8000490:	40002800 	.word	0x40002800

08000494 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000498:	4b14      	ldr	r3, [pc, #80]	; (80004ec <MX_USART1_UART_Init+0x58>)
 800049a:	4a15      	ldr	r2, [pc, #84]	; (80004f0 <MX_USART1_UART_Init+0x5c>)
 800049c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800049e:	4b13      	ldr	r3, [pc, #76]	; (80004ec <MX_USART1_UART_Init+0x58>)
 80004a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80004a4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004a6:	4b11      	ldr	r3, [pc, #68]	; (80004ec <MX_USART1_UART_Init+0x58>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80004ac:	4b0f      	ldr	r3, [pc, #60]	; (80004ec <MX_USART1_UART_Init+0x58>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80004b2:	4b0e      	ldr	r3, [pc, #56]	; (80004ec <MX_USART1_UART_Init+0x58>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80004b8:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <MX_USART1_UART_Init+0x58>)
 80004ba:	220c      	movs	r2, #12
 80004bc:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004be:	4b0b      	ldr	r3, [pc, #44]	; (80004ec <MX_USART1_UART_Init+0x58>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004c4:	4b09      	ldr	r3, [pc, #36]	; (80004ec <MX_USART1_UART_Init+0x58>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004ca:	4b08      	ldr	r3, [pc, #32]	; (80004ec <MX_USART1_UART_Init+0x58>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004d0:	4b06      	ldr	r3, [pc, #24]	; (80004ec <MX_USART1_UART_Init+0x58>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80004d6:	4805      	ldr	r0, [pc, #20]	; (80004ec <MX_USART1_UART_Init+0x58>)
 80004d8:	f002 faec 	bl	8002ab4 <HAL_UART_Init>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <MX_USART1_UART_Init+0x52>
		Error_Handler();
 80004e2:	f000 f81f 	bl	8000524 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	200000b0 	.word	0x200000b0
 80004f0:	40013800 	.word	0x40013800

080004f4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80004fa:	4b09      	ldr	r3, [pc, #36]	; (8000520 <MX_GPIO_Init+0x2c>)
 80004fc:	695b      	ldr	r3, [r3, #20]
 80004fe:	4a08      	ldr	r2, [pc, #32]	; (8000520 <MX_GPIO_Init+0x2c>)
 8000500:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000504:	6153      	str	r3, [r2, #20]
 8000506:	4b06      	ldr	r3, [pc, #24]	; (8000520 <MX_GPIO_Init+0x2c>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000512:	bf00      	nop
 8000514:	370c      	adds	r7, #12
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop
 8000520:	40021000 	.word	0x40021000

08000524 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000528:	b672      	cpsid	i
}
 800052a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800052c:	e7fe      	b.n	800052c <Error_Handler+0x8>
	...

08000530 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000536:	4b0f      	ldr	r3, [pc, #60]	; (8000574 <HAL_MspInit+0x44>)
 8000538:	699b      	ldr	r3, [r3, #24]
 800053a:	4a0e      	ldr	r2, [pc, #56]	; (8000574 <HAL_MspInit+0x44>)
 800053c:	f043 0301 	orr.w	r3, r3, #1
 8000540:	6193      	str	r3, [r2, #24]
 8000542:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <HAL_MspInit+0x44>)
 8000544:	699b      	ldr	r3, [r3, #24]
 8000546:	f003 0301 	and.w	r3, r3, #1
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800054e:	4b09      	ldr	r3, [pc, #36]	; (8000574 <HAL_MspInit+0x44>)
 8000550:	69db      	ldr	r3, [r3, #28]
 8000552:	4a08      	ldr	r2, [pc, #32]	; (8000574 <HAL_MspInit+0x44>)
 8000554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000558:	61d3      	str	r3, [r2, #28]
 800055a:	4b06      	ldr	r3, [pc, #24]	; (8000574 <HAL_MspInit+0x44>)
 800055c:	69db      	ldr	r3, [r3, #28]
 800055e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000562:	603b      	str	r3, [r7, #0]
 8000564:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000566:	2007      	movs	r0, #7
 8000568:	f000 fa48 	bl	80009fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800056c:	bf00      	nop
 800056e:	3708      	adds	r7, #8
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	40021000 	.word	0x40021000

08000578 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a0d      	ldr	r2, [pc, #52]	; (80005bc <HAL_RTC_MspInit+0x44>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d111      	bne.n	80005ae <HAL_RTC_MspInit+0x36>
 800058a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800058e:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	fa93 f3a3 	rbit	r3, r3
 8000596:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000598:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800059a:	fab3 f383 	clz	r3, r3
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	461a      	mov	r2, r3
 80005a2:	4b07      	ldr	r3, [pc, #28]	; (80005c0 <HAL_RTC_MspInit+0x48>)
 80005a4:	4413      	add	r3, r2
 80005a6:	009b      	lsls	r3, r3, #2
 80005a8:	461a      	mov	r2, r3
 80005aa:	2301      	movs	r3, #1
 80005ac:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80005ae:	bf00      	nop
 80005b0:	3714      	adds	r7, #20
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	40002800 	.word	0x40002800
 80005c0:	10908100 	.word	0x10908100

080005c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08a      	sub	sp, #40	; 0x28
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005cc:	f107 0314 	add.w	r3, r7, #20
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a18      	ldr	r2, [pc, #96]	; (8000644 <HAL_UART_MspInit+0x80>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d129      	bne.n	800063a <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005e6:	4b18      	ldr	r3, [pc, #96]	; (8000648 <HAL_UART_MspInit+0x84>)
 80005e8:	699b      	ldr	r3, [r3, #24]
 80005ea:	4a17      	ldr	r2, [pc, #92]	; (8000648 <HAL_UART_MspInit+0x84>)
 80005ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f0:	6193      	str	r3, [r2, #24]
 80005f2:	4b15      	ldr	r3, [pc, #84]	; (8000648 <HAL_UART_MspInit+0x84>)
 80005f4:	699b      	ldr	r3, [r3, #24]
 80005f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005fa:	613b      	str	r3, [r7, #16]
 80005fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	4b12      	ldr	r3, [pc, #72]	; (8000648 <HAL_UART_MspInit+0x84>)
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	4a11      	ldr	r2, [pc, #68]	; (8000648 <HAL_UART_MspInit+0x84>)
 8000604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000608:	6153      	str	r3, [r2, #20]
 800060a:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <HAL_UART_MspInit+0x84>)
 800060c:	695b      	ldr	r3, [r3, #20]
 800060e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000612:	60fb      	str	r3, [r7, #12]
 8000614:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000616:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800061a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800061c:	2302      	movs	r3, #2
 800061e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000620:	2300      	movs	r3, #0
 8000622:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000624:	2303      	movs	r3, #3
 8000626:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000628:	2307      	movs	r3, #7
 800062a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062c:	f107 0314 	add.w	r3, r7, #20
 8000630:	4619      	mov	r1, r3
 8000632:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000636:	f000 fa15 	bl	8000a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800063a:	bf00      	nop
 800063c:	3728      	adds	r7, #40	; 0x28
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40013800 	.word	0x40013800
 8000648:	40021000 	.word	0x40021000

0800064c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000650:	e7fe      	b.n	8000650 <NMI_Handler+0x4>

08000652 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000652:	b480      	push	{r7}
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000656:	e7fe      	b.n	8000656 <HardFault_Handler+0x4>

08000658 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800065c:	e7fe      	b.n	800065c <MemManage_Handler+0x4>

0800065e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800065e:	b480      	push	{r7}
 8000660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000662:	e7fe      	b.n	8000662 <BusFault_Handler+0x4>

08000664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000668:	e7fe      	b.n	8000668 <UsageFault_Handler+0x4>

0800066a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800066a:	b480      	push	{r7}
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800066e:	bf00      	nop
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr

08000678 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr

08000686 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000686:	b480      	push	{r7}
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800068a:	bf00      	nop
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr

08000694 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000698:	f000 f8ba 	bl	8000810 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}

080006a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b086      	sub	sp, #24
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006a8:	4a14      	ldr	r2, [pc, #80]	; (80006fc <_sbrk+0x5c>)
 80006aa:	4b15      	ldr	r3, [pc, #84]	; (8000700 <_sbrk+0x60>)
 80006ac:	1ad3      	subs	r3, r2, r3
 80006ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006b0:	697b      	ldr	r3, [r7, #20]
 80006b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006b4:	4b13      	ldr	r3, [pc, #76]	; (8000704 <_sbrk+0x64>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d102      	bne.n	80006c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006bc:	4b11      	ldr	r3, [pc, #68]	; (8000704 <_sbrk+0x64>)
 80006be:	4a12      	ldr	r2, [pc, #72]	; (8000708 <_sbrk+0x68>)
 80006c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006c2:	4b10      	ldr	r3, [pc, #64]	; (8000704 <_sbrk+0x64>)
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	4413      	add	r3, r2
 80006ca:	693a      	ldr	r2, [r7, #16]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	d207      	bcs.n	80006e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006d0:	f002 fe3c 	bl	800334c <__errno>
 80006d4:	4603      	mov	r3, r0
 80006d6:	220c      	movs	r2, #12
 80006d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006de:	e009      	b.n	80006f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006e0:	4b08      	ldr	r3, [pc, #32]	; (8000704 <_sbrk+0x64>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006e6:	4b07      	ldr	r3, [pc, #28]	; (8000704 <_sbrk+0x64>)
 80006e8:	681a      	ldr	r2, [r3, #0]
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4413      	add	r3, r2
 80006ee:	4a05      	ldr	r2, [pc, #20]	; (8000704 <_sbrk+0x64>)
 80006f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006f2:	68fb      	ldr	r3, [r7, #12]
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3718      	adds	r7, #24
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20003000 	.word	0x20003000
 8000700:	00000400 	.word	0x00000400
 8000704:	20000174 	.word	0x20000174
 8000708:	200002c8 	.word	0x200002c8

0800070c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <SystemInit+0x20>)
 8000712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000716:	4a05      	ldr	r2, [pc, #20]	; (800072c <SystemInit+0x20>)
 8000718:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800071c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	e000ed00 	.word	0xe000ed00

08000730 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000730:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000768 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000734:	f7ff ffea 	bl	800070c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000738:	480c      	ldr	r0, [pc, #48]	; (800076c <LoopForever+0x6>)
  ldr r1, =_edata
 800073a:	490d      	ldr	r1, [pc, #52]	; (8000770 <LoopForever+0xa>)
  ldr r2, =_sidata
 800073c:	4a0d      	ldr	r2, [pc, #52]	; (8000774 <LoopForever+0xe>)
  movs r3, #0
 800073e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000740:	e002      	b.n	8000748 <LoopCopyDataInit>

08000742 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000742:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000744:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000746:	3304      	adds	r3, #4

08000748 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000748:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800074a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800074c:	d3f9      	bcc.n	8000742 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800074e:	4a0a      	ldr	r2, [pc, #40]	; (8000778 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000750:	4c0a      	ldr	r4, [pc, #40]	; (800077c <LoopForever+0x16>)
  movs r3, #0
 8000752:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000754:	e001      	b.n	800075a <LoopFillZerobss>

08000756 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000756:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000758:	3204      	adds	r2, #4

0800075a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800075a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800075c:	d3fb      	bcc.n	8000756 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800075e:	f002 fdfb 	bl	8003358 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000762:	f7ff fd8d 	bl	8000280 <main>

08000766 <LoopForever>:

LoopForever:
    b LoopForever
 8000766:	e7fe      	b.n	8000766 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000768:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800076c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000770:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000774:	08003cf4 	.word	0x08003cf4
  ldr r2, =_sbss
 8000778:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800077c:	200002c4 	.word	0x200002c4

08000780 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000780:	e7fe      	b.n	8000780 <ADC1_2_IRQHandler>
	...

08000784 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000788:	4b08      	ldr	r3, [pc, #32]	; (80007ac <HAL_Init+0x28>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a07      	ldr	r2, [pc, #28]	; (80007ac <HAL_Init+0x28>)
 800078e:	f043 0310 	orr.w	r3, r3, #16
 8000792:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000794:	2003      	movs	r0, #3
 8000796:	f000 f931 	bl	80009fc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800079a:	2000      	movs	r0, #0
 800079c:	f000 f808 	bl	80007b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007a0:	f7ff fec6 	bl	8000530 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007a4:	2300      	movs	r3, #0
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40022000 	.word	0x40022000

080007b0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <HAL_InitTick+0x54>)
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <HAL_InitTick+0x58>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	4619      	mov	r1, r3
 80007c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ce:	4618      	mov	r0, r3
 80007d0:	f000 f93b 	bl	8000a4a <HAL_SYSTICK_Config>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007da:	2301      	movs	r3, #1
 80007dc:	e00e      	b.n	80007fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2b0f      	cmp	r3, #15
 80007e2:	d80a      	bhi.n	80007fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007e4:	2200      	movs	r2, #0
 80007e6:	6879      	ldr	r1, [r7, #4]
 80007e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007ec:	f000 f911 	bl	8000a12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007f0:	4a06      	ldr	r2, [pc, #24]	; (800080c <HAL_InitTick+0x5c>)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80007f6:	2300      	movs	r3, #0
 80007f8:	e000      	b.n	80007fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007fa:	2301      	movs	r3, #1
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000000 	.word	0x20000000
 8000808:	20000008 	.word	0x20000008
 800080c:	20000004 	.word	0x20000004

08000810 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <HAL_IncTick+0x20>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	461a      	mov	r2, r3
 800081a:	4b06      	ldr	r3, [pc, #24]	; (8000834 <HAL_IncTick+0x24>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4413      	add	r3, r2
 8000820:	4a04      	ldr	r2, [pc, #16]	; (8000834 <HAL_IncTick+0x24>)
 8000822:	6013      	str	r3, [r2, #0]
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	20000008 	.word	0x20000008
 8000834:	20000178 	.word	0x20000178

08000838 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  return uwTick;  
 800083c:	4b03      	ldr	r3, [pc, #12]	; (800084c <HAL_GetTick+0x14>)
 800083e:	681b      	ldr	r3, [r3, #0]
}
 8000840:	4618      	mov	r0, r3
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	20000178 	.word	0x20000178

08000850 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000858:	f7ff ffee 	bl	8000838 <HAL_GetTick>
 800085c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000868:	d005      	beq.n	8000876 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800086a:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <HAL_Delay+0x44>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	461a      	mov	r2, r3
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	4413      	add	r3, r2
 8000874:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000876:	bf00      	nop
 8000878:	f7ff ffde 	bl	8000838 <HAL_GetTick>
 800087c:	4602      	mov	r2, r0
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	1ad3      	subs	r3, r2, r3
 8000882:	68fa      	ldr	r2, [r7, #12]
 8000884:	429a      	cmp	r2, r3
 8000886:	d8f7      	bhi.n	8000878 <HAL_Delay+0x28>
  {
  }
}
 8000888:	bf00      	nop
 800088a:	bf00      	nop
 800088c:	3710      	adds	r7, #16
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20000008 	.word	0x20000008

08000898 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	f003 0307 	and.w	r3, r3, #7
 80008a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <__NVIC_SetPriorityGrouping+0x44>)
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ae:	68ba      	ldr	r2, [r7, #8]
 80008b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008b4:	4013      	ands	r3, r2
 80008b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ca:	4a04      	ldr	r2, [pc, #16]	; (80008dc <__NVIC_SetPriorityGrouping+0x44>)
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	60d3      	str	r3, [r2, #12]
}
 80008d0:	bf00      	nop
 80008d2:	3714      	adds	r7, #20
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	e000ed00 	.word	0xe000ed00

080008e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008e4:	4b04      	ldr	r3, [pc, #16]	; (80008f8 <__NVIC_GetPriorityGrouping+0x18>)
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	0a1b      	lsrs	r3, r3, #8
 80008ea:	f003 0307 	and.w	r3, r3, #7
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr
 80008f8:	e000ed00 	.word	0xe000ed00

080008fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	6039      	str	r1, [r7, #0]
 8000906:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090c:	2b00      	cmp	r3, #0
 800090e:	db0a      	blt.n	8000926 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	b2da      	uxtb	r2, r3
 8000914:	490c      	ldr	r1, [pc, #48]	; (8000948 <__NVIC_SetPriority+0x4c>)
 8000916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091a:	0112      	lsls	r2, r2, #4
 800091c:	b2d2      	uxtb	r2, r2
 800091e:	440b      	add	r3, r1
 8000920:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000924:	e00a      	b.n	800093c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	b2da      	uxtb	r2, r3
 800092a:	4908      	ldr	r1, [pc, #32]	; (800094c <__NVIC_SetPriority+0x50>)
 800092c:	79fb      	ldrb	r3, [r7, #7]
 800092e:	f003 030f 	and.w	r3, r3, #15
 8000932:	3b04      	subs	r3, #4
 8000934:	0112      	lsls	r2, r2, #4
 8000936:	b2d2      	uxtb	r2, r2
 8000938:	440b      	add	r3, r1
 800093a:	761a      	strb	r2, [r3, #24]
}
 800093c:	bf00      	nop
 800093e:	370c      	adds	r7, #12
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr
 8000948:	e000e100 	.word	0xe000e100
 800094c:	e000ed00 	.word	0xe000ed00

08000950 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000950:	b480      	push	{r7}
 8000952:	b089      	sub	sp, #36	; 0x24
 8000954:	af00      	add	r7, sp, #0
 8000956:	60f8      	str	r0, [r7, #12]
 8000958:	60b9      	str	r1, [r7, #8]
 800095a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	f003 0307 	and.w	r3, r3, #7
 8000962:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000964:	69fb      	ldr	r3, [r7, #28]
 8000966:	f1c3 0307 	rsb	r3, r3, #7
 800096a:	2b04      	cmp	r3, #4
 800096c:	bf28      	it	cs
 800096e:	2304      	movcs	r3, #4
 8000970:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	3304      	adds	r3, #4
 8000976:	2b06      	cmp	r3, #6
 8000978:	d902      	bls.n	8000980 <NVIC_EncodePriority+0x30>
 800097a:	69fb      	ldr	r3, [r7, #28]
 800097c:	3b03      	subs	r3, #3
 800097e:	e000      	b.n	8000982 <NVIC_EncodePriority+0x32>
 8000980:	2300      	movs	r3, #0
 8000982:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000984:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000988:	69bb      	ldr	r3, [r7, #24]
 800098a:	fa02 f303 	lsl.w	r3, r2, r3
 800098e:	43da      	mvns	r2, r3
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	401a      	ands	r2, r3
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000998:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	fa01 f303 	lsl.w	r3, r1, r3
 80009a2:	43d9      	mvns	r1, r3
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009a8:	4313      	orrs	r3, r2
         );
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	3724      	adds	r7, #36	; 0x24
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
	...

080009b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	3b01      	subs	r3, #1
 80009c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009c8:	d301      	bcc.n	80009ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ca:	2301      	movs	r3, #1
 80009cc:	e00f      	b.n	80009ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ce:	4a0a      	ldr	r2, [pc, #40]	; (80009f8 <SysTick_Config+0x40>)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	3b01      	subs	r3, #1
 80009d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009d6:	210f      	movs	r1, #15
 80009d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009dc:	f7ff ff8e 	bl	80008fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009e0:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <SysTick_Config+0x40>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009e6:	4b04      	ldr	r3, [pc, #16]	; (80009f8 <SysTick_Config+0x40>)
 80009e8:	2207      	movs	r2, #7
 80009ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009ec:	2300      	movs	r3, #0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	e000e010 	.word	0xe000e010

080009fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	f7ff ff47 	bl	8000898 <__NVIC_SetPriorityGrouping>
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b086      	sub	sp, #24
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	4603      	mov	r3, r0
 8000a1a:	60b9      	str	r1, [r7, #8]
 8000a1c:	607a      	str	r2, [r7, #4]
 8000a1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a24:	f7ff ff5c 	bl	80008e0 <__NVIC_GetPriorityGrouping>
 8000a28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a2a:	687a      	ldr	r2, [r7, #4]
 8000a2c:	68b9      	ldr	r1, [r7, #8]
 8000a2e:	6978      	ldr	r0, [r7, #20]
 8000a30:	f7ff ff8e 	bl	8000950 <NVIC_EncodePriority>
 8000a34:	4602      	mov	r2, r0
 8000a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a3a:	4611      	mov	r1, r2
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff ff5d 	bl	80008fc <__NVIC_SetPriority>
}
 8000a42:	bf00      	nop
 8000a44:	3718      	adds	r7, #24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b082      	sub	sp, #8
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a52:	6878      	ldr	r0, [r7, #4]
 8000a54:	f7ff ffb0 	bl	80009b8 <SysTick_Config>
 8000a58:	4603      	mov	r3, r0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
	...

08000a64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b087      	sub	sp, #28
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a72:	e14e      	b.n	8000d12 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	2101      	movs	r1, #1
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a80:	4013      	ands	r3, r2
 8000a82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	f000 8140 	beq.w	8000d0c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	f003 0303 	and.w	r3, r3, #3
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d005      	beq.n	8000aa4 <HAL_GPIO_Init+0x40>
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	f003 0303 	and.w	r3, r3, #3
 8000aa0:	2b02      	cmp	r3, #2
 8000aa2:	d130      	bne.n	8000b06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	689b      	ldr	r3, [r3, #8]
 8000aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	2203      	movs	r2, #3
 8000ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab4:	43db      	mvns	r3, r3
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	4013      	ands	r3, r2
 8000aba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	68da      	ldr	r2, [r3, #12]
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	005b      	lsls	r3, r3, #1
 8000ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac8:	693a      	ldr	r2, [r7, #16]
 8000aca:	4313      	orrs	r3, r2
 8000acc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	693a      	ldr	r2, [r7, #16]
 8000ad2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ada:	2201      	movs	r2, #1
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	43db      	mvns	r3, r3
 8000ae4:	693a      	ldr	r2, [r7, #16]
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	091b      	lsrs	r3, r3, #4
 8000af0:	f003 0201 	and.w	r2, r3, #1
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	fa02 f303 	lsl.w	r3, r2, r3
 8000afa:	693a      	ldr	r2, [r7, #16]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	f003 0303 	and.w	r3, r3, #3
 8000b0e:	2b03      	cmp	r3, #3
 8000b10:	d017      	beq.n	8000b42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	68db      	ldr	r3, [r3, #12]
 8000b16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	2203      	movs	r2, #3
 8000b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b22:	43db      	mvns	r3, r3
 8000b24:	693a      	ldr	r2, [r7, #16]
 8000b26:	4013      	ands	r3, r2
 8000b28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	689a      	ldr	r2, [r3, #8]
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	f003 0303 	and.w	r3, r3, #3
 8000b4a:	2b02      	cmp	r3, #2
 8000b4c:	d123      	bne.n	8000b96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	08da      	lsrs	r2, r3, #3
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	3208      	adds	r2, #8
 8000b56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	f003 0307 	and.w	r3, r3, #7
 8000b62:	009b      	lsls	r3, r3, #2
 8000b64:	220f      	movs	r2, #15
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	43db      	mvns	r3, r3
 8000b6c:	693a      	ldr	r2, [r7, #16]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	691a      	ldr	r2, [r3, #16]
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	f003 0307 	and.w	r3, r3, #7
 8000b7c:	009b      	lsls	r3, r3, #2
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	4313      	orrs	r3, r2
 8000b86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	08da      	lsrs	r2, r3, #3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	3208      	adds	r2, #8
 8000b90:	6939      	ldr	r1, [r7, #16]
 8000b92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	2203      	movs	r2, #3
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	43db      	mvns	r3, r3
 8000ba8:	693a      	ldr	r2, [r7, #16]
 8000baa:	4013      	ands	r3, r2
 8000bac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	f003 0203 	and.w	r2, r3, #3
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	005b      	lsls	r3, r3, #1
 8000bba:	fa02 f303 	lsl.w	r3, r2, r3
 8000bbe:	693a      	ldr	r2, [r7, #16]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	f000 809a 	beq.w	8000d0c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bd8:	4b55      	ldr	r3, [pc, #340]	; (8000d30 <HAL_GPIO_Init+0x2cc>)
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	4a54      	ldr	r2, [pc, #336]	; (8000d30 <HAL_GPIO_Init+0x2cc>)
 8000bde:	f043 0301 	orr.w	r3, r3, #1
 8000be2:	6193      	str	r3, [r2, #24]
 8000be4:	4b52      	ldr	r3, [pc, #328]	; (8000d30 <HAL_GPIO_Init+0x2cc>)
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	f003 0301 	and.w	r3, r3, #1
 8000bec:	60bb      	str	r3, [r7, #8]
 8000bee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bf0:	4a50      	ldr	r2, [pc, #320]	; (8000d34 <HAL_GPIO_Init+0x2d0>)
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	089b      	lsrs	r3, r3, #2
 8000bf6:	3302      	adds	r3, #2
 8000bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	f003 0303 	and.w	r3, r3, #3
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	220f      	movs	r2, #15
 8000c08:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0c:	43db      	mvns	r3, r3
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	4013      	ands	r3, r2
 8000c12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c1a:	d013      	beq.n	8000c44 <HAL_GPIO_Init+0x1e0>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4a46      	ldr	r2, [pc, #280]	; (8000d38 <HAL_GPIO_Init+0x2d4>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	d00d      	beq.n	8000c40 <HAL_GPIO_Init+0x1dc>
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a45      	ldr	r2, [pc, #276]	; (8000d3c <HAL_GPIO_Init+0x2d8>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d007      	beq.n	8000c3c <HAL_GPIO_Init+0x1d8>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4a44      	ldr	r2, [pc, #272]	; (8000d40 <HAL_GPIO_Init+0x2dc>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d101      	bne.n	8000c38 <HAL_GPIO_Init+0x1d4>
 8000c34:	2303      	movs	r3, #3
 8000c36:	e006      	b.n	8000c46 <HAL_GPIO_Init+0x1e2>
 8000c38:	2305      	movs	r3, #5
 8000c3a:	e004      	b.n	8000c46 <HAL_GPIO_Init+0x1e2>
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	e002      	b.n	8000c46 <HAL_GPIO_Init+0x1e2>
 8000c40:	2301      	movs	r3, #1
 8000c42:	e000      	b.n	8000c46 <HAL_GPIO_Init+0x1e2>
 8000c44:	2300      	movs	r3, #0
 8000c46:	697a      	ldr	r2, [r7, #20]
 8000c48:	f002 0203 	and.w	r2, r2, #3
 8000c4c:	0092      	lsls	r2, r2, #2
 8000c4e:	4093      	lsls	r3, r2
 8000c50:	693a      	ldr	r2, [r7, #16]
 8000c52:	4313      	orrs	r3, r2
 8000c54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c56:	4937      	ldr	r1, [pc, #220]	; (8000d34 <HAL_GPIO_Init+0x2d0>)
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	089b      	lsrs	r3, r3, #2
 8000c5c:	3302      	adds	r3, #2
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c64:	4b37      	ldr	r3, [pc, #220]	; (8000d44 <HAL_GPIO_Init+0x2e0>)
 8000c66:	689b      	ldr	r3, [r3, #8]
 8000c68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	693a      	ldr	r2, [r7, #16]
 8000c70:	4013      	ands	r3, r2
 8000c72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d003      	beq.n	8000c88 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c88:	4a2e      	ldr	r2, [pc, #184]	; (8000d44 <HAL_GPIO_Init+0x2e0>)
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c8e:	4b2d      	ldr	r3, [pc, #180]	; (8000d44 <HAL_GPIO_Init+0x2e0>)
 8000c90:	68db      	ldr	r3, [r3, #12]
 8000c92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	43db      	mvns	r3, r3
 8000c98:	693a      	ldr	r2, [r7, #16]
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d003      	beq.n	8000cb2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000cb2:	4a24      	ldr	r2, [pc, #144]	; (8000d44 <HAL_GPIO_Init+0x2e0>)
 8000cb4:	693b      	ldr	r3, [r7, #16]
 8000cb6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000cb8:	4b22      	ldr	r3, [pc, #136]	; (8000d44 <HAL_GPIO_Init+0x2e0>)
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	43db      	mvns	r3, r3
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d003      	beq.n	8000cdc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cdc:	4a19      	ldr	r2, [pc, #100]	; (8000d44 <HAL_GPIO_Init+0x2e0>)
 8000cde:	693b      	ldr	r3, [r7, #16]
 8000ce0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ce2:	4b18      	ldr	r3, [pc, #96]	; (8000d44 <HAL_GPIO_Init+0x2e0>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	43db      	mvns	r3, r3
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d003      	beq.n	8000d06 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000cfe:	693a      	ldr	r2, [r7, #16]
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	4313      	orrs	r3, r2
 8000d04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d06:	4a0f      	ldr	r2, [pc, #60]	; (8000d44 <HAL_GPIO_Init+0x2e0>)
 8000d08:	693b      	ldr	r3, [r7, #16]
 8000d0a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	fa22 f303 	lsr.w	r3, r2, r3
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	f47f aea9 	bne.w	8000a74 <HAL_GPIO_Init+0x10>
  }
}
 8000d22:	bf00      	nop
 8000d24:	bf00      	nop
 8000d26:	371c      	adds	r7, #28
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr
 8000d30:	40021000 	.word	0x40021000
 8000d34:	40010000 	.word	0x40010000
 8000d38:	48000400 	.word	0x48000400
 8000d3c:	48000800 	.word	0x48000800
 8000d40:	48000c00 	.word	0x48000c00
 8000d44:	40010400 	.word	0x40010400

08000d48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d54:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d58:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d5e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d102      	bne.n	8000d6e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	f001 b823 	b.w	8001db4 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f000 817d 	beq.w	800107e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d84:	4bbc      	ldr	r3, [pc, #752]	; (8001078 <HAL_RCC_OscConfig+0x330>)
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f003 030c 	and.w	r3, r3, #12
 8000d8c:	2b04      	cmp	r3, #4
 8000d8e:	d00c      	beq.n	8000daa <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d90:	4bb9      	ldr	r3, [pc, #740]	; (8001078 <HAL_RCC_OscConfig+0x330>)
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f003 030c 	and.w	r3, r3, #12
 8000d98:	2b08      	cmp	r3, #8
 8000d9a:	d15c      	bne.n	8000e56 <HAL_RCC_OscConfig+0x10e>
 8000d9c:	4bb6      	ldr	r3, [pc, #728]	; (8001078 <HAL_RCC_OscConfig+0x330>)
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000da8:	d155      	bne.n	8000e56 <HAL_RCC_OscConfig+0x10e>
 8000daa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dae:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000db2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000db6:	fa93 f3a3 	rbit	r3, r3
 8000dba:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  return result;
 8000dbe:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dc2:	fab3 f383 	clz	r3, r3
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	095b      	lsrs	r3, r3, #5
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d102      	bne.n	8000ddc <HAL_RCC_OscConfig+0x94>
 8000dd6:	4ba8      	ldr	r3, [pc, #672]	; (8001078 <HAL_RCC_OscConfig+0x330>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	e015      	b.n	8000e08 <HAL_RCC_OscConfig+0xc0>
 8000ddc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000de0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000de4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000de8:	fa93 f3a3 	rbit	r3, r3
 8000dec:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000df0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000df4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000df8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000dfc:	fa93 f3a3 	rbit	r3, r3
 8000e00:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000e04:	4b9c      	ldr	r3, [pc, #624]	; (8001078 <HAL_RCC_OscConfig+0x330>)
 8000e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e08:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e0c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000e10:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000e14:	fa92 f2a2 	rbit	r2, r2
 8000e18:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000e1c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	b2d2      	uxtb	r2, r2
 8000e26:	f042 0220 	orr.w	r2, r2, #32
 8000e2a:	b2d2      	uxtb	r2, r2
 8000e2c:	f002 021f 	and.w	r2, r2, #31
 8000e30:	2101      	movs	r1, #1
 8000e32:	fa01 f202 	lsl.w	r2, r1, r2
 8000e36:	4013      	ands	r3, r2
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	f000 811f 	beq.w	800107c <HAL_RCC_OscConfig+0x334>
 8000e3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	f040 8116 	bne.w	800107c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	f000 bfaf 	b.w	8001db4 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e66:	d106      	bne.n	8000e76 <HAL_RCC_OscConfig+0x12e>
 8000e68:	4b83      	ldr	r3, [pc, #524]	; (8001078 <HAL_RCC_OscConfig+0x330>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a82      	ldr	r2, [pc, #520]	; (8001078 <HAL_RCC_OscConfig+0x330>)
 8000e6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e72:	6013      	str	r3, [r2, #0]
 8000e74:	e036      	b.n	8000ee4 <HAL_RCC_OscConfig+0x19c>
 8000e76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e7a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d10c      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x158>
 8000e86:	4b7c      	ldr	r3, [pc, #496]	; (8001078 <HAL_RCC_OscConfig+0x330>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a7b      	ldr	r2, [pc, #492]	; (8001078 <HAL_RCC_OscConfig+0x330>)
 8000e8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e90:	6013      	str	r3, [r2, #0]
 8000e92:	4b79      	ldr	r3, [pc, #484]	; (8001078 <HAL_RCC_OscConfig+0x330>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a78      	ldr	r2, [pc, #480]	; (8001078 <HAL_RCC_OscConfig+0x330>)
 8000e98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e9c:	6013      	str	r3, [r2, #0]
 8000e9e:	e021      	b.n	8000ee4 <HAL_RCC_OscConfig+0x19c>
 8000ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ea4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000eb0:	d10c      	bne.n	8000ecc <HAL_RCC_OscConfig+0x184>
 8000eb2:	4b71      	ldr	r3, [pc, #452]	; (8001078 <HAL_RCC_OscConfig+0x330>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a70      	ldr	r2, [pc, #448]	; (8001078 <HAL_RCC_OscConfig+0x330>)
 8000eb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ebc:	6013      	str	r3, [r2, #0]
 8000ebe:	4b6e      	ldr	r3, [pc, #440]	; (8001078 <HAL_RCC_OscConfig+0x330>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4a6d      	ldr	r2, [pc, #436]	; (8001078 <HAL_RCC_OscConfig+0x330>)
 8000ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ec8:	6013      	str	r3, [r2, #0]
 8000eca:	e00b      	b.n	8000ee4 <HAL_RCC_OscConfig+0x19c>
 8000ecc:	4b6a      	ldr	r3, [pc, #424]	; (8001078 <HAL_RCC_OscConfig+0x330>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a69      	ldr	r2, [pc, #420]	; (8001078 <HAL_RCC_OscConfig+0x330>)
 8000ed2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ed6:	6013      	str	r3, [r2, #0]
 8000ed8:	4b67      	ldr	r3, [pc, #412]	; (8001078 <HAL_RCC_OscConfig+0x330>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a66      	ldr	r2, [pc, #408]	; (8001078 <HAL_RCC_OscConfig+0x330>)
 8000ede:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ee2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ee4:	4b64      	ldr	r3, [pc, #400]	; (8001078 <HAL_RCC_OscConfig+0x330>)
 8000ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee8:	f023 020f 	bic.w	r2, r3, #15
 8000eec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ef0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	495f      	ldr	r1, [pc, #380]	; (8001078 <HAL_RCC_OscConfig+0x330>)
 8000efa:	4313      	orrs	r3, r2
 8000efc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000efe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d059      	beq.n	8000fc2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f0e:	f7ff fc93 	bl	8000838 <HAL_GetTick>
 8000f12:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f16:	e00a      	b.n	8000f2e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f18:	f7ff fc8e 	bl	8000838 <HAL_GetTick>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	2b64      	cmp	r3, #100	; 0x64
 8000f26:	d902      	bls.n	8000f2e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	f000 bf43 	b.w	8001db4 <HAL_RCC_OscConfig+0x106c>
 8000f2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f32:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f36:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000f3a:	fa93 f3a3 	rbit	r3, r3
 8000f3e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000f42:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f46:	fab3 f383 	clz	r3, r3
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	095b      	lsrs	r3, r3, #5
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d102      	bne.n	8000f60 <HAL_RCC_OscConfig+0x218>
 8000f5a:	4b47      	ldr	r3, [pc, #284]	; (8001078 <HAL_RCC_OscConfig+0x330>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	e015      	b.n	8000f8c <HAL_RCC_OscConfig+0x244>
 8000f60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f64:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f68:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000f6c:	fa93 f3a3 	rbit	r3, r3
 8000f70:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000f74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f78:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000f7c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000f80:	fa93 f3a3 	rbit	r3, r3
 8000f84:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000f88:	4b3b      	ldr	r3, [pc, #236]	; (8001078 <HAL_RCC_OscConfig+0x330>)
 8000f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f90:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000f94:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000f98:	fa92 f2a2 	rbit	r2, r2
 8000f9c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000fa0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000fa4:	fab2 f282 	clz	r2, r2
 8000fa8:	b2d2      	uxtb	r2, r2
 8000faa:	f042 0220 	orr.w	r2, r2, #32
 8000fae:	b2d2      	uxtb	r2, r2
 8000fb0:	f002 021f 	and.w	r2, r2, #31
 8000fb4:	2101      	movs	r1, #1
 8000fb6:	fa01 f202 	lsl.w	r2, r1, r2
 8000fba:	4013      	ands	r3, r2
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d0ab      	beq.n	8000f18 <HAL_RCC_OscConfig+0x1d0>
 8000fc0:	e05d      	b.n	800107e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc2:	f7ff fc39 	bl	8000838 <HAL_GetTick>
 8000fc6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fca:	e00a      	b.n	8000fe2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fcc:	f7ff fc34 	bl	8000838 <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	2b64      	cmp	r3, #100	; 0x64
 8000fda:	d902      	bls.n	8000fe2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	f000 bee9 	b.w	8001db4 <HAL_RCC_OscConfig+0x106c>
 8000fe2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000fe6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fea:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000fee:	fa93 f3a3 	rbit	r3, r3
 8000ff2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000ff6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ffa:	fab3 f383 	clz	r3, r3
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	095b      	lsrs	r3, r3, #5
 8001002:	b2db      	uxtb	r3, r3
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b01      	cmp	r3, #1
 800100c:	d102      	bne.n	8001014 <HAL_RCC_OscConfig+0x2cc>
 800100e:	4b1a      	ldr	r3, [pc, #104]	; (8001078 <HAL_RCC_OscConfig+0x330>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	e015      	b.n	8001040 <HAL_RCC_OscConfig+0x2f8>
 8001014:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001018:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800101c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001020:	fa93 f3a3 	rbit	r3, r3
 8001024:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001028:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800102c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001030:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001034:	fa93 f3a3 	rbit	r3, r3
 8001038:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800103c:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <HAL_RCC_OscConfig+0x330>)
 800103e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001040:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001044:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001048:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800104c:	fa92 f2a2 	rbit	r2, r2
 8001050:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001054:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001058:	fab2 f282 	clz	r2, r2
 800105c:	b2d2      	uxtb	r2, r2
 800105e:	f042 0220 	orr.w	r2, r2, #32
 8001062:	b2d2      	uxtb	r2, r2
 8001064:	f002 021f 	and.w	r2, r2, #31
 8001068:	2101      	movs	r1, #1
 800106a:	fa01 f202 	lsl.w	r2, r1, r2
 800106e:	4013      	ands	r3, r2
 8001070:	2b00      	cmp	r3, #0
 8001072:	d1ab      	bne.n	8000fcc <HAL_RCC_OscConfig+0x284>
 8001074:	e003      	b.n	800107e <HAL_RCC_OscConfig+0x336>
 8001076:	bf00      	nop
 8001078:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800107c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800107e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001082:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	2b00      	cmp	r3, #0
 8001090:	f000 817d 	beq.w	800138e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001094:	4ba6      	ldr	r3, [pc, #664]	; (8001330 <HAL_RCC_OscConfig+0x5e8>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f003 030c 	and.w	r3, r3, #12
 800109c:	2b00      	cmp	r3, #0
 800109e:	d00b      	beq.n	80010b8 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80010a0:	4ba3      	ldr	r3, [pc, #652]	; (8001330 <HAL_RCC_OscConfig+0x5e8>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 030c 	and.w	r3, r3, #12
 80010a8:	2b08      	cmp	r3, #8
 80010aa:	d172      	bne.n	8001192 <HAL_RCC_OscConfig+0x44a>
 80010ac:	4ba0      	ldr	r3, [pc, #640]	; (8001330 <HAL_RCC_OscConfig+0x5e8>)
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d16c      	bne.n	8001192 <HAL_RCC_OscConfig+0x44a>
 80010b8:	2302      	movs	r3, #2
 80010ba:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010be:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80010c2:	fa93 f3a3 	rbit	r3, r3
 80010c6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80010ca:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ce:	fab3 f383 	clz	r3, r3
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	095b      	lsrs	r3, r3, #5
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d102      	bne.n	80010e8 <HAL_RCC_OscConfig+0x3a0>
 80010e2:	4b93      	ldr	r3, [pc, #588]	; (8001330 <HAL_RCC_OscConfig+0x5e8>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	e013      	b.n	8001110 <HAL_RCC_OscConfig+0x3c8>
 80010e8:	2302      	movs	r3, #2
 80010ea:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010ee:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80010f2:	fa93 f3a3 	rbit	r3, r3
 80010f6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80010fa:	2302      	movs	r3, #2
 80010fc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001100:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001104:	fa93 f3a3 	rbit	r3, r3
 8001108:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800110c:	4b88      	ldr	r3, [pc, #544]	; (8001330 <HAL_RCC_OscConfig+0x5e8>)
 800110e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001110:	2202      	movs	r2, #2
 8001112:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001116:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800111a:	fa92 f2a2 	rbit	r2, r2
 800111e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001122:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001126:	fab2 f282 	clz	r2, r2
 800112a:	b2d2      	uxtb	r2, r2
 800112c:	f042 0220 	orr.w	r2, r2, #32
 8001130:	b2d2      	uxtb	r2, r2
 8001132:	f002 021f 	and.w	r2, r2, #31
 8001136:	2101      	movs	r1, #1
 8001138:	fa01 f202 	lsl.w	r2, r1, r2
 800113c:	4013      	ands	r3, r2
 800113e:	2b00      	cmp	r3, #0
 8001140:	d00a      	beq.n	8001158 <HAL_RCC_OscConfig+0x410>
 8001142:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001146:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	691b      	ldr	r3, [r3, #16]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d002      	beq.n	8001158 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	f000 be2e 	b.w	8001db4 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001158:	4b75      	ldr	r3, [pc, #468]	; (8001330 <HAL_RCC_OscConfig+0x5e8>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001160:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001164:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	695b      	ldr	r3, [r3, #20]
 800116c:	21f8      	movs	r1, #248	; 0xf8
 800116e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001172:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001176:	fa91 f1a1 	rbit	r1, r1
 800117a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800117e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001182:	fab1 f181 	clz	r1, r1
 8001186:	b2c9      	uxtb	r1, r1
 8001188:	408b      	lsls	r3, r1
 800118a:	4969      	ldr	r1, [pc, #420]	; (8001330 <HAL_RCC_OscConfig+0x5e8>)
 800118c:	4313      	orrs	r3, r2
 800118e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001190:	e0fd      	b.n	800138e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001192:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001196:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	691b      	ldr	r3, [r3, #16]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	f000 8088 	beq.w	80012b4 <HAL_RCC_OscConfig+0x56c>
 80011a4:	2301      	movs	r3, #1
 80011a6:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011aa:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80011ae:	fa93 f3a3 	rbit	r3, r3
 80011b2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80011b6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011ba:	fab3 f383 	clz	r3, r3
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	461a      	mov	r2, r3
 80011cc:	2301      	movs	r3, #1
 80011ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d0:	f7ff fb32 	bl	8000838 <HAL_GetTick>
 80011d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011d8:	e00a      	b.n	80011f0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011da:	f7ff fb2d 	bl	8000838 <HAL_GetTick>
 80011de:	4602      	mov	r2, r0
 80011e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d902      	bls.n	80011f0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	f000 bde2 	b.w	8001db4 <HAL_RCC_OscConfig+0x106c>
 80011f0:	2302      	movs	r3, #2
 80011f2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80011fa:	fa93 f3a3 	rbit	r3, r3
 80011fe:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001202:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001206:	fab3 f383 	clz	r3, r3
 800120a:	b2db      	uxtb	r3, r3
 800120c:	095b      	lsrs	r3, r3, #5
 800120e:	b2db      	uxtb	r3, r3
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2b01      	cmp	r3, #1
 8001218:	d102      	bne.n	8001220 <HAL_RCC_OscConfig+0x4d8>
 800121a:	4b45      	ldr	r3, [pc, #276]	; (8001330 <HAL_RCC_OscConfig+0x5e8>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	e013      	b.n	8001248 <HAL_RCC_OscConfig+0x500>
 8001220:	2302      	movs	r3, #2
 8001222:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001226:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800122a:	fa93 f3a3 	rbit	r3, r3
 800122e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001232:	2302      	movs	r3, #2
 8001234:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001238:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800123c:	fa93 f3a3 	rbit	r3, r3
 8001240:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001244:	4b3a      	ldr	r3, [pc, #232]	; (8001330 <HAL_RCC_OscConfig+0x5e8>)
 8001246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001248:	2202      	movs	r2, #2
 800124a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 800124e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001252:	fa92 f2a2 	rbit	r2, r2
 8001256:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800125a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800125e:	fab2 f282 	clz	r2, r2
 8001262:	b2d2      	uxtb	r2, r2
 8001264:	f042 0220 	orr.w	r2, r2, #32
 8001268:	b2d2      	uxtb	r2, r2
 800126a:	f002 021f 	and.w	r2, r2, #31
 800126e:	2101      	movs	r1, #1
 8001270:	fa01 f202 	lsl.w	r2, r1, r2
 8001274:	4013      	ands	r3, r2
 8001276:	2b00      	cmp	r3, #0
 8001278:	d0af      	beq.n	80011da <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800127a:	4b2d      	ldr	r3, [pc, #180]	; (8001330 <HAL_RCC_OscConfig+0x5e8>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001282:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001286:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	695b      	ldr	r3, [r3, #20]
 800128e:	21f8      	movs	r1, #248	; 0xf8
 8001290:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001294:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001298:	fa91 f1a1 	rbit	r1, r1
 800129c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80012a0:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80012a4:	fab1 f181 	clz	r1, r1
 80012a8:	b2c9      	uxtb	r1, r1
 80012aa:	408b      	lsls	r3, r1
 80012ac:	4920      	ldr	r1, [pc, #128]	; (8001330 <HAL_RCC_OscConfig+0x5e8>)
 80012ae:	4313      	orrs	r3, r2
 80012b0:	600b      	str	r3, [r1, #0]
 80012b2:	e06c      	b.n	800138e <HAL_RCC_OscConfig+0x646>
 80012b4:	2301      	movs	r3, #1
 80012b6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ba:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80012be:	fa93 f3a3 	rbit	r3, r3
 80012c2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80012c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012ca:	fab3 f383 	clz	r3, r3
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	461a      	mov	r2, r3
 80012dc:	2300      	movs	r3, #0
 80012de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e0:	f7ff faaa 	bl	8000838 <HAL_GetTick>
 80012e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012e8:	e00a      	b.n	8001300 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012ea:	f7ff faa5 	bl	8000838 <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d902      	bls.n	8001300 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	f000 bd5a 	b.w	8001db4 <HAL_RCC_OscConfig+0x106c>
 8001300:	2302      	movs	r3, #2
 8001302:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001306:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800130a:	fa93 f3a3 	rbit	r3, r3
 800130e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001312:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001316:	fab3 f383 	clz	r3, r3
 800131a:	b2db      	uxtb	r3, r3
 800131c:	095b      	lsrs	r3, r3, #5
 800131e:	b2db      	uxtb	r3, r3
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	b2db      	uxtb	r3, r3
 8001326:	2b01      	cmp	r3, #1
 8001328:	d104      	bne.n	8001334 <HAL_RCC_OscConfig+0x5ec>
 800132a:	4b01      	ldr	r3, [pc, #4]	; (8001330 <HAL_RCC_OscConfig+0x5e8>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	e015      	b.n	800135c <HAL_RCC_OscConfig+0x614>
 8001330:	40021000 	.word	0x40021000
 8001334:	2302      	movs	r3, #2
 8001336:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800133a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800133e:	fa93 f3a3 	rbit	r3, r3
 8001342:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001346:	2302      	movs	r3, #2
 8001348:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800134c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001350:	fa93 f3a3 	rbit	r3, r3
 8001354:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001358:	4bc8      	ldr	r3, [pc, #800]	; (800167c <HAL_RCC_OscConfig+0x934>)
 800135a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135c:	2202      	movs	r2, #2
 800135e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001362:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001366:	fa92 f2a2 	rbit	r2, r2
 800136a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800136e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001372:	fab2 f282 	clz	r2, r2
 8001376:	b2d2      	uxtb	r2, r2
 8001378:	f042 0220 	orr.w	r2, r2, #32
 800137c:	b2d2      	uxtb	r2, r2
 800137e:	f002 021f 	and.w	r2, r2, #31
 8001382:	2101      	movs	r1, #1
 8001384:	fa01 f202 	lsl.w	r2, r1, r2
 8001388:	4013      	ands	r3, r2
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1ad      	bne.n	80012ea <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800138e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001392:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0308 	and.w	r3, r3, #8
 800139e:	2b00      	cmp	r3, #0
 80013a0:	f000 8110 	beq.w	80015c4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d079      	beq.n	80014a8 <HAL_RCC_OscConfig+0x760>
 80013b4:	2301      	movs	r3, #1
 80013b6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80013be:	fa93 f3a3 	rbit	r3, r3
 80013c2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80013c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013ca:	fab3 f383 	clz	r3, r3
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	461a      	mov	r2, r3
 80013d2:	4bab      	ldr	r3, [pc, #684]	; (8001680 <HAL_RCC_OscConfig+0x938>)
 80013d4:	4413      	add	r3, r2
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	461a      	mov	r2, r3
 80013da:	2301      	movs	r3, #1
 80013dc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013de:	f7ff fa2b 	bl	8000838 <HAL_GetTick>
 80013e2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013e6:	e00a      	b.n	80013fe <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013e8:	f7ff fa26 	bl	8000838 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d902      	bls.n	80013fe <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	f000 bcdb 	b.w	8001db4 <HAL_RCC_OscConfig+0x106c>
 80013fe:	2302      	movs	r3, #2
 8001400:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001404:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001408:	fa93 f3a3 	rbit	r3, r3
 800140c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001410:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001414:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001418:	2202      	movs	r2, #2
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001420:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	fa93 f2a3 	rbit	r2, r3
 800142a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800142e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001438:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800143c:	2202      	movs	r2, #2
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001444:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	fa93 f2a3 	rbit	r2, r3
 800144e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001452:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001456:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001458:	4b88      	ldr	r3, [pc, #544]	; (800167c <HAL_RCC_OscConfig+0x934>)
 800145a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800145c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001460:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001464:	2102      	movs	r1, #2
 8001466:	6019      	str	r1, [r3, #0]
 8001468:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800146c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	fa93 f1a3 	rbit	r1, r3
 8001476:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800147a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800147e:	6019      	str	r1, [r3, #0]
  return result;
 8001480:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001484:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	fab3 f383 	clz	r3, r3
 800148e:	b2db      	uxtb	r3, r3
 8001490:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001494:	b2db      	uxtb	r3, r3
 8001496:	f003 031f 	and.w	r3, r3, #31
 800149a:	2101      	movs	r1, #1
 800149c:	fa01 f303 	lsl.w	r3, r1, r3
 80014a0:	4013      	ands	r3, r2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d0a0      	beq.n	80013e8 <HAL_RCC_OscConfig+0x6a0>
 80014a6:	e08d      	b.n	80015c4 <HAL_RCC_OscConfig+0x87c>
 80014a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014ac:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80014b0:	2201      	movs	r2, #1
 80014b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014b8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	fa93 f2a3 	rbit	r2, r3
 80014c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014c6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80014ca:	601a      	str	r2, [r3, #0]
  return result;
 80014cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014d0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80014d4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014d6:	fab3 f383 	clz	r3, r3
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	461a      	mov	r2, r3
 80014de:	4b68      	ldr	r3, [pc, #416]	; (8001680 <HAL_RCC_OscConfig+0x938>)
 80014e0:	4413      	add	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	461a      	mov	r2, r3
 80014e6:	2300      	movs	r3, #0
 80014e8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ea:	f7ff f9a5 	bl	8000838 <HAL_GetTick>
 80014ee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f2:	e00a      	b.n	800150a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014f4:	f7ff f9a0 	bl	8000838 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d902      	bls.n	800150a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	f000 bc55 	b.w	8001db4 <HAL_RCC_OscConfig+0x106c>
 800150a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800150e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001512:	2202      	movs	r2, #2
 8001514:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001516:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800151a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	fa93 f2a3 	rbit	r2, r3
 8001524:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001528:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001532:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001536:	2202      	movs	r2, #2
 8001538:	601a      	str	r2, [r3, #0]
 800153a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800153e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	fa93 f2a3 	rbit	r2, r3
 8001548:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800154c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001556:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800155a:	2202      	movs	r2, #2
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001562:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	fa93 f2a3 	rbit	r2, r3
 800156c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001570:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001574:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001576:	4b41      	ldr	r3, [pc, #260]	; (800167c <HAL_RCC_OscConfig+0x934>)
 8001578:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800157a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800157e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001582:	2102      	movs	r1, #2
 8001584:	6019      	str	r1, [r3, #0]
 8001586:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800158a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	fa93 f1a3 	rbit	r1, r3
 8001594:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001598:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800159c:	6019      	str	r1, [r3, #0]
  return result;
 800159e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	fab3 f383 	clz	r3, r3
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	f003 031f 	and.w	r3, r3, #31
 80015b8:	2101      	movs	r1, #1
 80015ba:	fa01 f303 	lsl.w	r3, r1, r3
 80015be:	4013      	ands	r3, r2
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d197      	bne.n	80014f4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0304 	and.w	r3, r3, #4
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 81a1 	beq.w	800191c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015da:	2300      	movs	r3, #0
 80015dc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015e0:	4b26      	ldr	r3, [pc, #152]	; (800167c <HAL_RCC_OscConfig+0x934>)
 80015e2:	69db      	ldr	r3, [r3, #28]
 80015e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d116      	bne.n	800161a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ec:	4b23      	ldr	r3, [pc, #140]	; (800167c <HAL_RCC_OscConfig+0x934>)
 80015ee:	69db      	ldr	r3, [r3, #28]
 80015f0:	4a22      	ldr	r2, [pc, #136]	; (800167c <HAL_RCC_OscConfig+0x934>)
 80015f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f6:	61d3      	str	r3, [r2, #28]
 80015f8:	4b20      	ldr	r3, [pc, #128]	; (800167c <HAL_RCC_OscConfig+0x934>)
 80015fa:	69db      	ldr	r3, [r3, #28]
 80015fc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001600:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001604:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800160e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001612:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001614:	2301      	movs	r3, #1
 8001616:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800161a:	4b1a      	ldr	r3, [pc, #104]	; (8001684 <HAL_RCC_OscConfig+0x93c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001622:	2b00      	cmp	r3, #0
 8001624:	d11a      	bne.n	800165c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001626:	4b17      	ldr	r3, [pc, #92]	; (8001684 <HAL_RCC_OscConfig+0x93c>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a16      	ldr	r2, [pc, #88]	; (8001684 <HAL_RCC_OscConfig+0x93c>)
 800162c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001630:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001632:	f7ff f901 	bl	8000838 <HAL_GetTick>
 8001636:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800163a:	e009      	b.n	8001650 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800163c:	f7ff f8fc 	bl	8000838 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b64      	cmp	r3, #100	; 0x64
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e3b1      	b.n	8001db4 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001650:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <HAL_RCC_OscConfig+0x93c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001658:	2b00      	cmp	r3, #0
 800165a:	d0ef      	beq.n	800163c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800165c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001660:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	2b01      	cmp	r3, #1
 800166a:	d10d      	bne.n	8001688 <HAL_RCC_OscConfig+0x940>
 800166c:	4b03      	ldr	r3, [pc, #12]	; (800167c <HAL_RCC_OscConfig+0x934>)
 800166e:	6a1b      	ldr	r3, [r3, #32]
 8001670:	4a02      	ldr	r2, [pc, #8]	; (800167c <HAL_RCC_OscConfig+0x934>)
 8001672:	f043 0301 	orr.w	r3, r3, #1
 8001676:	6213      	str	r3, [r2, #32]
 8001678:	e03c      	b.n	80016f4 <HAL_RCC_OscConfig+0x9ac>
 800167a:	bf00      	nop
 800167c:	40021000 	.word	0x40021000
 8001680:	10908120 	.word	0x10908120
 8001684:	40007000 	.word	0x40007000
 8001688:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800168c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d10c      	bne.n	80016b2 <HAL_RCC_OscConfig+0x96a>
 8001698:	4bc1      	ldr	r3, [pc, #772]	; (80019a0 <HAL_RCC_OscConfig+0xc58>)
 800169a:	6a1b      	ldr	r3, [r3, #32]
 800169c:	4ac0      	ldr	r2, [pc, #768]	; (80019a0 <HAL_RCC_OscConfig+0xc58>)
 800169e:	f023 0301 	bic.w	r3, r3, #1
 80016a2:	6213      	str	r3, [r2, #32]
 80016a4:	4bbe      	ldr	r3, [pc, #760]	; (80019a0 <HAL_RCC_OscConfig+0xc58>)
 80016a6:	6a1b      	ldr	r3, [r3, #32]
 80016a8:	4abd      	ldr	r2, [pc, #756]	; (80019a0 <HAL_RCC_OscConfig+0xc58>)
 80016aa:	f023 0304 	bic.w	r3, r3, #4
 80016ae:	6213      	str	r3, [r2, #32]
 80016b0:	e020      	b.n	80016f4 <HAL_RCC_OscConfig+0x9ac>
 80016b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	68db      	ldr	r3, [r3, #12]
 80016be:	2b05      	cmp	r3, #5
 80016c0:	d10c      	bne.n	80016dc <HAL_RCC_OscConfig+0x994>
 80016c2:	4bb7      	ldr	r3, [pc, #732]	; (80019a0 <HAL_RCC_OscConfig+0xc58>)
 80016c4:	6a1b      	ldr	r3, [r3, #32]
 80016c6:	4ab6      	ldr	r2, [pc, #728]	; (80019a0 <HAL_RCC_OscConfig+0xc58>)
 80016c8:	f043 0304 	orr.w	r3, r3, #4
 80016cc:	6213      	str	r3, [r2, #32]
 80016ce:	4bb4      	ldr	r3, [pc, #720]	; (80019a0 <HAL_RCC_OscConfig+0xc58>)
 80016d0:	6a1b      	ldr	r3, [r3, #32]
 80016d2:	4ab3      	ldr	r2, [pc, #716]	; (80019a0 <HAL_RCC_OscConfig+0xc58>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	6213      	str	r3, [r2, #32]
 80016da:	e00b      	b.n	80016f4 <HAL_RCC_OscConfig+0x9ac>
 80016dc:	4bb0      	ldr	r3, [pc, #704]	; (80019a0 <HAL_RCC_OscConfig+0xc58>)
 80016de:	6a1b      	ldr	r3, [r3, #32]
 80016e0:	4aaf      	ldr	r2, [pc, #700]	; (80019a0 <HAL_RCC_OscConfig+0xc58>)
 80016e2:	f023 0301 	bic.w	r3, r3, #1
 80016e6:	6213      	str	r3, [r2, #32]
 80016e8:	4bad      	ldr	r3, [pc, #692]	; (80019a0 <HAL_RCC_OscConfig+0xc58>)
 80016ea:	6a1b      	ldr	r3, [r3, #32]
 80016ec:	4aac      	ldr	r2, [pc, #688]	; (80019a0 <HAL_RCC_OscConfig+0xc58>)
 80016ee:	f023 0304 	bic.w	r3, r3, #4
 80016f2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	2b00      	cmp	r3, #0
 8001702:	f000 8081 	beq.w	8001808 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001706:	f7ff f897 	bl	8000838 <HAL_GetTick>
 800170a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800170e:	e00b      	b.n	8001728 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001710:	f7ff f892 	bl	8000838 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001720:	4293      	cmp	r3, r2
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e345      	b.n	8001db4 <HAL_RCC_OscConfig+0x106c>
 8001728:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800172c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001730:	2202      	movs	r2, #2
 8001732:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001734:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001738:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	fa93 f2a3 	rbit	r2, r3
 8001742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001746:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001750:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001754:	2202      	movs	r2, #2
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800175c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	fa93 f2a3 	rbit	r2, r3
 8001766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800176a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800176e:	601a      	str	r2, [r3, #0]
  return result;
 8001770:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001774:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001778:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800177a:	fab3 f383 	clz	r3, r3
 800177e:	b2db      	uxtb	r3, r3
 8001780:	095b      	lsrs	r3, r3, #5
 8001782:	b2db      	uxtb	r3, r3
 8001784:	f043 0302 	orr.w	r3, r3, #2
 8001788:	b2db      	uxtb	r3, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d102      	bne.n	8001794 <HAL_RCC_OscConfig+0xa4c>
 800178e:	4b84      	ldr	r3, [pc, #528]	; (80019a0 <HAL_RCC_OscConfig+0xc58>)
 8001790:	6a1b      	ldr	r3, [r3, #32]
 8001792:	e013      	b.n	80017bc <HAL_RCC_OscConfig+0xa74>
 8001794:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001798:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800179c:	2202      	movs	r2, #2
 800179e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017a4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	fa93 f2a3 	rbit	r2, r3
 80017ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	4b79      	ldr	r3, [pc, #484]	; (80019a0 <HAL_RCC_OscConfig+0xc58>)
 80017ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017c0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80017c4:	2102      	movs	r1, #2
 80017c6:	6011      	str	r1, [r2, #0]
 80017c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017cc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80017d0:	6812      	ldr	r2, [r2, #0]
 80017d2:	fa92 f1a2 	rbit	r1, r2
 80017d6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017da:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80017de:	6011      	str	r1, [r2, #0]
  return result;
 80017e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80017e4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80017e8:	6812      	ldr	r2, [r2, #0]
 80017ea:	fab2 f282 	clz	r2, r2
 80017ee:	b2d2      	uxtb	r2, r2
 80017f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017f4:	b2d2      	uxtb	r2, r2
 80017f6:	f002 021f 	and.w	r2, r2, #31
 80017fa:	2101      	movs	r1, #1
 80017fc:	fa01 f202 	lsl.w	r2, r1, r2
 8001800:	4013      	ands	r3, r2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d084      	beq.n	8001710 <HAL_RCC_OscConfig+0x9c8>
 8001806:	e07f      	b.n	8001908 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001808:	f7ff f816 	bl	8000838 <HAL_GetTick>
 800180c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001810:	e00b      	b.n	800182a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001812:	f7ff f811 	bl	8000838 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001822:	4293      	cmp	r3, r2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e2c4      	b.n	8001db4 <HAL_RCC_OscConfig+0x106c>
 800182a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800182e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001832:	2202      	movs	r2, #2
 8001834:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001836:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800183a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	fa93 f2a3 	rbit	r2, r3
 8001844:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001848:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001852:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001856:	2202      	movs	r2, #2
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800185e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	fa93 f2a3 	rbit	r2, r3
 8001868:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800186c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001870:	601a      	str	r2, [r3, #0]
  return result;
 8001872:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001876:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800187a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800187c:	fab3 f383 	clz	r3, r3
 8001880:	b2db      	uxtb	r3, r3
 8001882:	095b      	lsrs	r3, r3, #5
 8001884:	b2db      	uxtb	r3, r3
 8001886:	f043 0302 	orr.w	r3, r3, #2
 800188a:	b2db      	uxtb	r3, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d102      	bne.n	8001896 <HAL_RCC_OscConfig+0xb4e>
 8001890:	4b43      	ldr	r3, [pc, #268]	; (80019a0 <HAL_RCC_OscConfig+0xc58>)
 8001892:	6a1b      	ldr	r3, [r3, #32]
 8001894:	e013      	b.n	80018be <HAL_RCC_OscConfig+0xb76>
 8001896:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800189a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800189e:	2202      	movs	r2, #2
 80018a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	fa93 f2a3 	rbit	r2, r3
 80018b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	4b39      	ldr	r3, [pc, #228]	; (80019a0 <HAL_RCC_OscConfig+0xc58>)
 80018bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018c2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80018c6:	2102      	movs	r1, #2
 80018c8:	6011      	str	r1, [r2, #0]
 80018ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018ce:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80018d2:	6812      	ldr	r2, [r2, #0]
 80018d4:	fa92 f1a2 	rbit	r1, r2
 80018d8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018dc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80018e0:	6011      	str	r1, [r2, #0]
  return result;
 80018e2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018e6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80018ea:	6812      	ldr	r2, [r2, #0]
 80018ec:	fab2 f282 	clz	r2, r2
 80018f0:	b2d2      	uxtb	r2, r2
 80018f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	f002 021f 	and.w	r2, r2, #31
 80018fc:	2101      	movs	r1, #1
 80018fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001902:	4013      	ands	r3, r2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d184      	bne.n	8001812 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001908:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800190c:	2b01      	cmp	r3, #1
 800190e:	d105      	bne.n	800191c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001910:	4b23      	ldr	r3, [pc, #140]	; (80019a0 <HAL_RCC_OscConfig+0xc58>)
 8001912:	69db      	ldr	r3, [r3, #28]
 8001914:	4a22      	ldr	r2, [pc, #136]	; (80019a0 <HAL_RCC_OscConfig+0xc58>)
 8001916:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800191a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800191c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001920:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	69db      	ldr	r3, [r3, #28]
 8001928:	2b00      	cmp	r3, #0
 800192a:	f000 8242 	beq.w	8001db2 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800192e:	4b1c      	ldr	r3, [pc, #112]	; (80019a0 <HAL_RCC_OscConfig+0xc58>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f003 030c 	and.w	r3, r3, #12
 8001936:	2b08      	cmp	r3, #8
 8001938:	f000 8213 	beq.w	8001d62 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800193c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001940:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	69db      	ldr	r3, [r3, #28]
 8001948:	2b02      	cmp	r3, #2
 800194a:	f040 8162 	bne.w	8001c12 <HAL_RCC_OscConfig+0xeca>
 800194e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001952:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001956:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800195a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001960:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	fa93 f2a3 	rbit	r2, r3
 800196a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800196e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001972:	601a      	str	r2, [r3, #0]
  return result;
 8001974:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001978:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800197c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800197e:	fab3 f383 	clz	r3, r3
 8001982:	b2db      	uxtb	r3, r3
 8001984:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001988:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	461a      	mov	r2, r3
 8001990:	2300      	movs	r3, #0
 8001992:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001994:	f7fe ff50 	bl	8000838 <HAL_GetTick>
 8001998:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800199c:	e00c      	b.n	80019b8 <HAL_RCC_OscConfig+0xc70>
 800199e:	bf00      	nop
 80019a0:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a4:	f7fe ff48 	bl	8000838 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e1fd      	b.n	8001db4 <HAL_RCC_OscConfig+0x106c>
 80019b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019bc:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80019c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ca:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	fa93 f2a3 	rbit	r2, r3
 80019d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019d8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80019dc:	601a      	str	r2, [r3, #0]
  return result;
 80019de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80019e6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019e8:	fab3 f383 	clz	r3, r3
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	095b      	lsrs	r3, r3, #5
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	f043 0301 	orr.w	r3, r3, #1
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d102      	bne.n	8001a02 <HAL_RCC_OscConfig+0xcba>
 80019fc:	4bb0      	ldr	r3, [pc, #704]	; (8001cc0 <HAL_RCC_OscConfig+0xf78>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	e027      	b.n	8001a52 <HAL_RCC_OscConfig+0xd0a>
 8001a02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a06:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001a0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a14:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	fa93 f2a3 	rbit	r2, r3
 8001a1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a22:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a2c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001a30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a3a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	fa93 f2a3 	rbit	r2, r3
 8001a44:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a48:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	4b9c      	ldr	r3, [pc, #624]	; (8001cc0 <HAL_RCC_OscConfig+0xf78>)
 8001a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a52:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a56:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001a5a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a5e:	6011      	str	r1, [r2, #0]
 8001a60:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a64:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001a68:	6812      	ldr	r2, [r2, #0]
 8001a6a:	fa92 f1a2 	rbit	r1, r2
 8001a6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a72:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a76:	6011      	str	r1, [r2, #0]
  return result;
 8001a78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a7c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a80:	6812      	ldr	r2, [r2, #0]
 8001a82:	fab2 f282 	clz	r2, r2
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	f042 0220 	orr.w	r2, r2, #32
 8001a8c:	b2d2      	uxtb	r2, r2
 8001a8e:	f002 021f 	and.w	r2, r2, #31
 8001a92:	2101      	movs	r1, #1
 8001a94:	fa01 f202 	lsl.w	r2, r1, r2
 8001a98:	4013      	ands	r3, r2
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d182      	bne.n	80019a4 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a9e:	4b88      	ldr	r3, [pc, #544]	; (8001cc0 <HAL_RCC_OscConfig+0xf78>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001aa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aaa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001ab2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	6a1b      	ldr	r3, [r3, #32]
 8001abe:	430b      	orrs	r3, r1
 8001ac0:	497f      	ldr	r1, [pc, #508]	; (8001cc0 <HAL_RCC_OscConfig+0xf78>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	604b      	str	r3, [r1, #4]
 8001ac6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aca:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001ace:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ad2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ad8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	fa93 f2a3 	rbit	r2, r3
 8001ae2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ae6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001aea:	601a      	str	r2, [r3, #0]
  return result;
 8001aec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001af4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001af6:	fab3 f383 	clz	r3, r3
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b00:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	461a      	mov	r2, r3
 8001b08:	2301      	movs	r3, #1
 8001b0a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0c:	f7fe fe94 	bl	8000838 <HAL_GetTick>
 8001b10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b14:	e009      	b.n	8001b2a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b16:	f7fe fe8f 	bl	8000838 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e144      	b.n	8001db4 <HAL_RCC_OscConfig+0x106c>
 8001b2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b2e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001b32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b3c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	fa93 f2a3 	rbit	r2, r3
 8001b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b4a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001b4e:	601a      	str	r2, [r3, #0]
  return result;
 8001b50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b54:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001b58:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b5a:	fab3 f383 	clz	r3, r3
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	095b      	lsrs	r3, r3, #5
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	f043 0301 	orr.w	r3, r3, #1
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d102      	bne.n	8001b74 <HAL_RCC_OscConfig+0xe2c>
 8001b6e:	4b54      	ldr	r3, [pc, #336]	; (8001cc0 <HAL_RCC_OscConfig+0xf78>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	e027      	b.n	8001bc4 <HAL_RCC_OscConfig+0xe7c>
 8001b74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b78:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b86:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	fa93 f2a3 	rbit	r2, r3
 8001b90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b94:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b9e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001ba2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bac:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	fa93 f2a3 	rbit	r2, r3
 8001bb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bba:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	4b3f      	ldr	r3, [pc, #252]	; (8001cc0 <HAL_RCC_OscConfig+0xf78>)
 8001bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bc8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001bcc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001bd0:	6011      	str	r1, [r2, #0]
 8001bd2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bd6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001bda:	6812      	ldr	r2, [r2, #0]
 8001bdc:	fa92 f1a2 	rbit	r1, r2
 8001be0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001be4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001be8:	6011      	str	r1, [r2, #0]
  return result;
 8001bea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bee:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001bf2:	6812      	ldr	r2, [r2, #0]
 8001bf4:	fab2 f282 	clz	r2, r2
 8001bf8:	b2d2      	uxtb	r2, r2
 8001bfa:	f042 0220 	orr.w	r2, r2, #32
 8001bfe:	b2d2      	uxtb	r2, r2
 8001c00:	f002 021f 	and.w	r2, r2, #31
 8001c04:	2101      	movs	r1, #1
 8001c06:	fa01 f202 	lsl.w	r2, r1, r2
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d082      	beq.n	8001b16 <HAL_RCC_OscConfig+0xdce>
 8001c10:	e0cf      	b.n	8001db2 <HAL_RCC_OscConfig+0x106a>
 8001c12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c16:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001c1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c24:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	fa93 f2a3 	rbit	r2, r3
 8001c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c32:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001c36:	601a      	str	r2, [r3, #0]
  return result;
 8001c38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c3c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001c40:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c42:	fab3 f383 	clz	r3, r3
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c4c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	461a      	mov	r2, r3
 8001c54:	2300      	movs	r3, #0
 8001c56:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c58:	f7fe fdee 	bl	8000838 <HAL_GetTick>
 8001c5c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c60:	e009      	b.n	8001c76 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c62:	f7fe fde9 	bl	8000838 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e09e      	b.n	8001db4 <HAL_RCC_OscConfig+0x106c>
 8001c76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c7a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c88:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	fa93 f2a3 	rbit	r2, r3
 8001c92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c96:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001c9a:	601a      	str	r2, [r3, #0]
  return result;
 8001c9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ca0:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001ca4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca6:	fab3 f383 	clz	r3, r3
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	095b      	lsrs	r3, r3, #5
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	f043 0301 	orr.w	r3, r3, #1
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d104      	bne.n	8001cc4 <HAL_RCC_OscConfig+0xf7c>
 8001cba:	4b01      	ldr	r3, [pc, #4]	; (8001cc0 <HAL_RCC_OscConfig+0xf78>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	e029      	b.n	8001d14 <HAL_RCC_OscConfig+0xfcc>
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001ccc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cd6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	fa93 f2a3 	rbit	r2, r3
 8001ce0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cee:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001cf2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cfc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	fa93 f2a3 	rbit	r2, r3
 8001d06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d0a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	4b2b      	ldr	r3, [pc, #172]	; (8001dc0 <HAL_RCC_OscConfig+0x1078>)
 8001d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d14:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d18:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001d1c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d20:	6011      	str	r1, [r2, #0]
 8001d22:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d26:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001d2a:	6812      	ldr	r2, [r2, #0]
 8001d2c:	fa92 f1a2 	rbit	r1, r2
 8001d30:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d34:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001d38:	6011      	str	r1, [r2, #0]
  return result;
 8001d3a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d3e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001d42:	6812      	ldr	r2, [r2, #0]
 8001d44:	fab2 f282 	clz	r2, r2
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	f042 0220 	orr.w	r2, r2, #32
 8001d4e:	b2d2      	uxtb	r2, r2
 8001d50:	f002 021f 	and.w	r2, r2, #31
 8001d54:	2101      	movs	r1, #1
 8001d56:	fa01 f202 	lsl.w	r2, r1, r2
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d180      	bne.n	8001c62 <HAL_RCC_OscConfig+0xf1a>
 8001d60:	e027      	b.n	8001db2 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	69db      	ldr	r3, [r3, #28]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d101      	bne.n	8001d76 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e01e      	b.n	8001db4 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d76:	4b12      	ldr	r3, [pc, #72]	; (8001dc0 <HAL_RCC_OscConfig+0x1078>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d7e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d82:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	6a1b      	ldr	r3, [r3, #32]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d10b      	bne.n	8001dae <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001d96:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d9a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001da2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d001      	beq.n	8001db2 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e000      	b.n	8001db4 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40021000 	.word	0x40021000

08001dc4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b09e      	sub	sp, #120	; 0x78
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d101      	bne.n	8001ddc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e162      	b.n	80020a2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ddc:	4b90      	ldr	r3, [pc, #576]	; (8002020 <HAL_RCC_ClockConfig+0x25c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0307 	and.w	r3, r3, #7
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d910      	bls.n	8001e0c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dea:	4b8d      	ldr	r3, [pc, #564]	; (8002020 <HAL_RCC_ClockConfig+0x25c>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f023 0207 	bic.w	r2, r3, #7
 8001df2:	498b      	ldr	r1, [pc, #556]	; (8002020 <HAL_RCC_ClockConfig+0x25c>)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dfa:	4b89      	ldr	r3, [pc, #548]	; (8002020 <HAL_RCC_ClockConfig+0x25c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	683a      	ldr	r2, [r7, #0]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d001      	beq.n	8001e0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e14a      	b.n	80020a2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d008      	beq.n	8001e2a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e18:	4b82      	ldr	r3, [pc, #520]	; (8002024 <HAL_RCC_ClockConfig+0x260>)
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	497f      	ldr	r1, [pc, #508]	; (8002024 <HAL_RCC_ClockConfig+0x260>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	f000 80dc 	beq.w	8001ff0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d13c      	bne.n	8001eba <HAL_RCC_ClockConfig+0xf6>
 8001e40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e44:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e48:	fa93 f3a3 	rbit	r3, r3
 8001e4c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001e4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e50:	fab3 f383 	clz	r3, r3
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	095b      	lsrs	r3, r3, #5
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	f043 0301 	orr.w	r3, r3, #1
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d102      	bne.n	8001e6a <HAL_RCC_ClockConfig+0xa6>
 8001e64:	4b6f      	ldr	r3, [pc, #444]	; (8002024 <HAL_RCC_ClockConfig+0x260>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	e00f      	b.n	8001e8a <HAL_RCC_ClockConfig+0xc6>
 8001e6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e6e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e72:	fa93 f3a3 	rbit	r3, r3
 8001e76:	667b      	str	r3, [r7, #100]	; 0x64
 8001e78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e7c:	663b      	str	r3, [r7, #96]	; 0x60
 8001e7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e80:	fa93 f3a3 	rbit	r3, r3
 8001e84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e86:	4b67      	ldr	r3, [pc, #412]	; (8002024 <HAL_RCC_ClockConfig+0x260>)
 8001e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e8e:	65ba      	str	r2, [r7, #88]	; 0x58
 8001e90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e92:	fa92 f2a2 	rbit	r2, r2
 8001e96:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001e98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e9a:	fab2 f282 	clz	r2, r2
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	f042 0220 	orr.w	r2, r2, #32
 8001ea4:	b2d2      	uxtb	r2, r2
 8001ea6:	f002 021f 	and.w	r2, r2, #31
 8001eaa:	2101      	movs	r1, #1
 8001eac:	fa01 f202 	lsl.w	r2, r1, r2
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d17b      	bne.n	8001fae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e0f3      	b.n	80020a2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d13c      	bne.n	8001f3c <HAL_RCC_ClockConfig+0x178>
 8001ec2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ec6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001eca:	fa93 f3a3 	rbit	r3, r3
 8001ece:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001ed0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ed2:	fab3 f383 	clz	r3, r3
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	095b      	lsrs	r3, r3, #5
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	f043 0301 	orr.w	r3, r3, #1
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d102      	bne.n	8001eec <HAL_RCC_ClockConfig+0x128>
 8001ee6:	4b4f      	ldr	r3, [pc, #316]	; (8002024 <HAL_RCC_ClockConfig+0x260>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	e00f      	b.n	8001f0c <HAL_RCC_ClockConfig+0x148>
 8001eec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ef0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ef4:	fa93 f3a3 	rbit	r3, r3
 8001ef8:	647b      	str	r3, [r7, #68]	; 0x44
 8001efa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001efe:	643b      	str	r3, [r7, #64]	; 0x40
 8001f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f02:	fa93 f3a3 	rbit	r3, r3
 8001f06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f08:	4b46      	ldr	r3, [pc, #280]	; (8002024 <HAL_RCC_ClockConfig+0x260>)
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f10:	63ba      	str	r2, [r7, #56]	; 0x38
 8001f12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f14:	fa92 f2a2 	rbit	r2, r2
 8001f18:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001f1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f1c:	fab2 f282 	clz	r2, r2
 8001f20:	b2d2      	uxtb	r2, r2
 8001f22:	f042 0220 	orr.w	r2, r2, #32
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	f002 021f 	and.w	r2, r2, #31
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f32:	4013      	ands	r3, r2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d13a      	bne.n	8001fae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e0b2      	b.n	80020a2 <HAL_RCC_ClockConfig+0x2de>
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f42:	fa93 f3a3 	rbit	r3, r3
 8001f46:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f4a:	fab3 f383 	clz	r3, r3
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	095b      	lsrs	r3, r3, #5
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d102      	bne.n	8001f64 <HAL_RCC_ClockConfig+0x1a0>
 8001f5e:	4b31      	ldr	r3, [pc, #196]	; (8002024 <HAL_RCC_ClockConfig+0x260>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	e00d      	b.n	8001f80 <HAL_RCC_ClockConfig+0x1bc>
 8001f64:	2302      	movs	r3, #2
 8001f66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f6a:	fa93 f3a3 	rbit	r3, r3
 8001f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f70:	2302      	movs	r3, #2
 8001f72:	623b      	str	r3, [r7, #32]
 8001f74:	6a3b      	ldr	r3, [r7, #32]
 8001f76:	fa93 f3a3 	rbit	r3, r3
 8001f7a:	61fb      	str	r3, [r7, #28]
 8001f7c:	4b29      	ldr	r3, [pc, #164]	; (8002024 <HAL_RCC_ClockConfig+0x260>)
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f80:	2202      	movs	r2, #2
 8001f82:	61ba      	str	r2, [r7, #24]
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	fa92 f2a2 	rbit	r2, r2
 8001f8a:	617a      	str	r2, [r7, #20]
  return result;
 8001f8c:	697a      	ldr	r2, [r7, #20]
 8001f8e:	fab2 f282 	clz	r2, r2
 8001f92:	b2d2      	uxtb	r2, r2
 8001f94:	f042 0220 	orr.w	r2, r2, #32
 8001f98:	b2d2      	uxtb	r2, r2
 8001f9a:	f002 021f 	and.w	r2, r2, #31
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e079      	b.n	80020a2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fae:	4b1d      	ldr	r3, [pc, #116]	; (8002024 <HAL_RCC_ClockConfig+0x260>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f023 0203 	bic.w	r2, r3, #3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	491a      	ldr	r1, [pc, #104]	; (8002024 <HAL_RCC_ClockConfig+0x260>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fc0:	f7fe fc3a 	bl	8000838 <HAL_GetTick>
 8001fc4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc6:	e00a      	b.n	8001fde <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc8:	f7fe fc36 	bl	8000838 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e061      	b.n	80020a2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fde:	4b11      	ldr	r3, [pc, #68]	; (8002024 <HAL_RCC_ClockConfig+0x260>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f003 020c 	and.w	r2, r3, #12
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d1eb      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ff0:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <HAL_RCC_ClockConfig+0x25c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0307 	and.w	r3, r3, #7
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d214      	bcs.n	8002028 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffe:	4b08      	ldr	r3, [pc, #32]	; (8002020 <HAL_RCC_ClockConfig+0x25c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f023 0207 	bic.w	r2, r3, #7
 8002006:	4906      	ldr	r1, [pc, #24]	; (8002020 <HAL_RCC_ClockConfig+0x25c>)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	4313      	orrs	r3, r2
 800200c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800200e:	4b04      	ldr	r3, [pc, #16]	; (8002020 <HAL_RCC_ClockConfig+0x25c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	683a      	ldr	r2, [r7, #0]
 8002018:	429a      	cmp	r2, r3
 800201a:	d005      	beq.n	8002028 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e040      	b.n	80020a2 <HAL_RCC_ClockConfig+0x2de>
 8002020:	40022000 	.word	0x40022000
 8002024:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0304 	and.w	r3, r3, #4
 8002030:	2b00      	cmp	r3, #0
 8002032:	d008      	beq.n	8002046 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002034:	4b1d      	ldr	r3, [pc, #116]	; (80020ac <HAL_RCC_ClockConfig+0x2e8>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	491a      	ldr	r1, [pc, #104]	; (80020ac <HAL_RCC_ClockConfig+0x2e8>)
 8002042:	4313      	orrs	r3, r2
 8002044:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0308 	and.w	r3, r3, #8
 800204e:	2b00      	cmp	r3, #0
 8002050:	d009      	beq.n	8002066 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002052:	4b16      	ldr	r3, [pc, #88]	; (80020ac <HAL_RCC_ClockConfig+0x2e8>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	4912      	ldr	r1, [pc, #72]	; (80020ac <HAL_RCC_ClockConfig+0x2e8>)
 8002062:	4313      	orrs	r3, r2
 8002064:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002066:	f000 f829 	bl	80020bc <HAL_RCC_GetSysClockFreq>
 800206a:	4601      	mov	r1, r0
 800206c:	4b0f      	ldr	r3, [pc, #60]	; (80020ac <HAL_RCC_ClockConfig+0x2e8>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002074:	22f0      	movs	r2, #240	; 0xf0
 8002076:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	fa92 f2a2 	rbit	r2, r2
 800207e:	60fa      	str	r2, [r7, #12]
  return result;
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	fab2 f282 	clz	r2, r2
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	40d3      	lsrs	r3, r2
 800208a:	4a09      	ldr	r2, [pc, #36]	; (80020b0 <HAL_RCC_ClockConfig+0x2ec>)
 800208c:	5cd3      	ldrb	r3, [r2, r3]
 800208e:	fa21 f303 	lsr.w	r3, r1, r3
 8002092:	4a08      	ldr	r2, [pc, #32]	; (80020b4 <HAL_RCC_ClockConfig+0x2f0>)
 8002094:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002096:	4b08      	ldr	r3, [pc, #32]	; (80020b8 <HAL_RCC_ClockConfig+0x2f4>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f7fe fb88 	bl	80007b0 <HAL_InitTick>
  
  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3778      	adds	r7, #120	; 0x78
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40021000 	.word	0x40021000
 80020b0:	08003c80 	.word	0x08003c80
 80020b4:	20000000 	.word	0x20000000
 80020b8:	20000004 	.word	0x20000004

080020bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	b08b      	sub	sp, #44	; 0x2c
 80020c0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61fb      	str	r3, [r7, #28]
 80020c6:	2300      	movs	r3, #0
 80020c8:	61bb      	str	r3, [r7, #24]
 80020ca:	2300      	movs	r3, #0
 80020cc:	627b      	str	r3, [r7, #36]	; 0x24
 80020ce:	2300      	movs	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020d2:	2300      	movs	r3, #0
 80020d4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80020d6:	4b29      	ldr	r3, [pc, #164]	; (800217c <HAL_RCC_GetSysClockFreq+0xc0>)
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	f003 030c 	and.w	r3, r3, #12
 80020e2:	2b04      	cmp	r3, #4
 80020e4:	d002      	beq.n	80020ec <HAL_RCC_GetSysClockFreq+0x30>
 80020e6:	2b08      	cmp	r3, #8
 80020e8:	d003      	beq.n	80020f2 <HAL_RCC_GetSysClockFreq+0x36>
 80020ea:	e03c      	b.n	8002166 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020ec:	4b24      	ldr	r3, [pc, #144]	; (8002180 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020ee:	623b      	str	r3, [r7, #32]
      break;
 80020f0:	e03c      	b.n	800216c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80020f8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80020fc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fe:	68ba      	ldr	r2, [r7, #8]
 8002100:	fa92 f2a2 	rbit	r2, r2
 8002104:	607a      	str	r2, [r7, #4]
  return result;
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	fab2 f282 	clz	r2, r2
 800210c:	b2d2      	uxtb	r2, r2
 800210e:	40d3      	lsrs	r3, r2
 8002110:	4a1c      	ldr	r2, [pc, #112]	; (8002184 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002112:	5cd3      	ldrb	r3, [r2, r3]
 8002114:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002116:	4b19      	ldr	r3, [pc, #100]	; (800217c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211a:	f003 030f 	and.w	r3, r3, #15
 800211e:	220f      	movs	r2, #15
 8002120:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	fa92 f2a2 	rbit	r2, r2
 8002128:	60fa      	str	r2, [r7, #12]
  return result;
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	fab2 f282 	clz	r2, r2
 8002130:	b2d2      	uxtb	r2, r2
 8002132:	40d3      	lsrs	r3, r2
 8002134:	4a14      	ldr	r2, [pc, #80]	; (8002188 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002136:	5cd3      	ldrb	r3, [r2, r3]
 8002138:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d008      	beq.n	8002156 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002144:	4a0e      	ldr	r2, [pc, #56]	; (8002180 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	fbb2 f2f3 	udiv	r2, r2, r3
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	fb02 f303 	mul.w	r3, r2, r3
 8002152:	627b      	str	r3, [r7, #36]	; 0x24
 8002154:	e004      	b.n	8002160 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	4a0c      	ldr	r2, [pc, #48]	; (800218c <HAL_RCC_GetSysClockFreq+0xd0>)
 800215a:	fb02 f303 	mul.w	r3, r2, r3
 800215e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002162:	623b      	str	r3, [r7, #32]
      break;
 8002164:	e002      	b.n	800216c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002166:	4b06      	ldr	r3, [pc, #24]	; (8002180 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002168:	623b      	str	r3, [r7, #32]
      break;
 800216a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800216c:	6a3b      	ldr	r3, [r7, #32]
}
 800216e:	4618      	mov	r0, r3
 8002170:	372c      	adds	r7, #44	; 0x2c
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	40021000 	.word	0x40021000
 8002180:	007a1200 	.word	0x007a1200
 8002184:	08003c98 	.word	0x08003c98
 8002188:	08003ca8 	.word	0x08003ca8
 800218c:	003d0900 	.word	0x003d0900

08002190 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002194:	4b03      	ldr	r3, [pc, #12]	; (80021a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002196:	681b      	ldr	r3, [r3, #0]
}
 8002198:	4618      	mov	r0, r3
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	20000000 	.word	0x20000000

080021a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80021ae:	f7ff ffef 	bl	8002190 <HAL_RCC_GetHCLKFreq>
 80021b2:	4601      	mov	r1, r0
 80021b4:	4b0b      	ldr	r3, [pc, #44]	; (80021e4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80021bc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80021c0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	fa92 f2a2 	rbit	r2, r2
 80021c8:	603a      	str	r2, [r7, #0]
  return result;
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	fab2 f282 	clz	r2, r2
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	40d3      	lsrs	r3, r2
 80021d4:	4a04      	ldr	r2, [pc, #16]	; (80021e8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80021d6:	5cd3      	ldrb	r3, [r2, r3]
 80021d8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80021dc:	4618      	mov	r0, r3
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40021000 	.word	0x40021000
 80021e8:	08003c90 	.word	0x08003c90

080021ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80021f2:	f7ff ffcd 	bl	8002190 <HAL_RCC_GetHCLKFreq>
 80021f6:	4601      	mov	r1, r0
 80021f8:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002200:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002204:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	fa92 f2a2 	rbit	r2, r2
 800220c:	603a      	str	r2, [r7, #0]
  return result;
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	fab2 f282 	clz	r2, r2
 8002214:	b2d2      	uxtb	r2, r2
 8002216:	40d3      	lsrs	r3, r2
 8002218:	4a04      	ldr	r2, [pc, #16]	; (800222c <HAL_RCC_GetPCLK2Freq+0x40>)
 800221a:	5cd3      	ldrb	r3, [r2, r3]
 800221c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002220:	4618      	mov	r0, r3
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40021000 	.word	0x40021000
 800222c:	08003c90 	.word	0x08003c90

08002230 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b092      	sub	sp, #72	; 0x48
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002238:	2300      	movs	r3, #0
 800223a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800223c:	2300      	movs	r3, #0
 800223e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002240:	2300      	movs	r3, #0
 8002242:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800224e:	2b00      	cmp	r3, #0
 8002250:	f000 80cd 	beq.w	80023ee <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002254:	4b8e      	ldr	r3, [pc, #568]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002256:	69db      	ldr	r3, [r3, #28]
 8002258:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d10e      	bne.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002260:	4b8b      	ldr	r3, [pc, #556]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002262:	69db      	ldr	r3, [r3, #28]
 8002264:	4a8a      	ldr	r2, [pc, #552]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800226a:	61d3      	str	r3, [r2, #28]
 800226c:	4b88      	ldr	r3, [pc, #544]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800226e:	69db      	ldr	r3, [r3, #28]
 8002270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002274:	60bb      	str	r3, [r7, #8]
 8002276:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002278:	2301      	movs	r3, #1
 800227a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800227e:	4b85      	ldr	r3, [pc, #532]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002286:	2b00      	cmp	r3, #0
 8002288:	d118      	bne.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800228a:	4b82      	ldr	r3, [pc, #520]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a81      	ldr	r2, [pc, #516]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002294:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002296:	f7fe facf 	bl	8000838 <HAL_GetTick>
 800229a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800229c:	e008      	b.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800229e:	f7fe facb 	bl	8000838 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b64      	cmp	r3, #100	; 0x64
 80022aa:	d901      	bls.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e0ea      	b.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b0:	4b78      	ldr	r3, [pc, #480]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d0f0      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022bc:	4b74      	ldr	r3, [pc, #464]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d07d      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d076      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022da:	4b6d      	ldr	r3, [pc, #436]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022dc:	6a1b      	ldr	r3, [r3, #32]
 80022de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022e8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ec:	fa93 f3a3 	rbit	r3, r3
 80022f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80022f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022f4:	fab3 f383 	clz	r3, r3
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	461a      	mov	r2, r3
 80022fc:	4b66      	ldr	r3, [pc, #408]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80022fe:	4413      	add	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	461a      	mov	r2, r3
 8002304:	2301      	movs	r3, #1
 8002306:	6013      	str	r3, [r2, #0]
 8002308:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800230c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002310:	fa93 f3a3 	rbit	r3, r3
 8002314:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002318:	fab3 f383 	clz	r3, r3
 800231c:	b2db      	uxtb	r3, r3
 800231e:	461a      	mov	r2, r3
 8002320:	4b5d      	ldr	r3, [pc, #372]	; (8002498 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002322:	4413      	add	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	461a      	mov	r2, r3
 8002328:	2300      	movs	r3, #0
 800232a:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800232c:	4a58      	ldr	r2, [pc, #352]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800232e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002330:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b00      	cmp	r3, #0
 800233a:	d045      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800233c:	f7fe fa7c 	bl	8000838 <HAL_GetTick>
 8002340:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002342:	e00a      	b.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002344:	f7fe fa78 	bl	8000838 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002352:	4293      	cmp	r3, r2
 8002354:	d901      	bls.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e095      	b.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x256>
 800235a:	2302      	movs	r3, #2
 800235c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002360:	fa93 f3a3 	rbit	r3, r3
 8002364:	627b      	str	r3, [r7, #36]	; 0x24
 8002366:	2302      	movs	r3, #2
 8002368:	623b      	str	r3, [r7, #32]
 800236a:	6a3b      	ldr	r3, [r7, #32]
 800236c:	fa93 f3a3 	rbit	r3, r3
 8002370:	61fb      	str	r3, [r7, #28]
  return result;
 8002372:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002374:	fab3 f383 	clz	r3, r3
 8002378:	b2db      	uxtb	r3, r3
 800237a:	095b      	lsrs	r3, r3, #5
 800237c:	b2db      	uxtb	r3, r3
 800237e:	f043 0302 	orr.w	r3, r3, #2
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d102      	bne.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002388:	4b41      	ldr	r3, [pc, #260]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800238a:	6a1b      	ldr	r3, [r3, #32]
 800238c:	e007      	b.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800238e:	2302      	movs	r3, #2
 8002390:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	fa93 f3a3 	rbit	r3, r3
 8002398:	617b      	str	r3, [r7, #20]
 800239a:	4b3d      	ldr	r3, [pc, #244]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239e:	2202      	movs	r2, #2
 80023a0:	613a      	str	r2, [r7, #16]
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	fa92 f2a2 	rbit	r2, r2
 80023a8:	60fa      	str	r2, [r7, #12]
  return result;
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	fab2 f282 	clz	r2, r2
 80023b0:	b2d2      	uxtb	r2, r2
 80023b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023b6:	b2d2      	uxtb	r2, r2
 80023b8:	f002 021f 	and.w	r2, r2, #31
 80023bc:	2101      	movs	r1, #1
 80023be:	fa01 f202 	lsl.w	r2, r1, r2
 80023c2:	4013      	ands	r3, r2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0bd      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80023c8:	4b31      	ldr	r3, [pc, #196]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	492e      	ldr	r1, [pc, #184]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023da:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d105      	bne.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023e2:	4b2b      	ldr	r3, [pc, #172]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	4a2a      	ldr	r2, [pc, #168]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ec:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d008      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023fa:	4b25      	ldr	r3, [pc, #148]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	f023 0203 	bic.w	r2, r3, #3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	4922      	ldr	r1, [pc, #136]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002408:	4313      	orrs	r3, r2
 800240a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0320 	and.w	r3, r3, #32
 8002414:	2b00      	cmp	r3, #0
 8002416:	d008      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002418:	4b1d      	ldr	r3, [pc, #116]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800241a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241c:	f023 0210 	bic.w	r2, r3, #16
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	491a      	ldr	r1, [pc, #104]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002426:	4313      	orrs	r3, r2
 8002428:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002432:	2b00      	cmp	r3, #0
 8002434:	d008      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002436:	4b16      	ldr	r3, [pc, #88]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243a:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	4913      	ldr	r1, [pc, #76]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002444:	4313      	orrs	r3, r2
 8002446:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d008      	beq.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002454:	4b0e      	ldr	r3, [pc, #56]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002458:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	695b      	ldr	r3, [r3, #20]
 8002460:	490b      	ldr	r1, [pc, #44]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002462:	4313      	orrs	r3, r2
 8002464:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d008      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002472:	4b07      	ldr	r3, [pc, #28]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	4904      	ldr	r1, [pc, #16]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002480:	4313      	orrs	r3, r2
 8002482:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3748      	adds	r7, #72	; 0x48
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40021000 	.word	0x40021000
 8002494:	40007000 	.word	0x40007000
 8002498:	10908100 	.word	0x10908100

0800249c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e073      	b.n	800259a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	7f5b      	ldrb	r3, [r3, #29]
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d105      	bne.n	80024c8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7fe f858 	bl	8000578 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2202      	movs	r2, #2
 80024cc:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	f003 0310 	and.w	r3, r3, #16
 80024d8:	2b10      	cmp	r3, #16
 80024da:	d055      	beq.n	8002588 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	22ca      	movs	r2, #202	; 0xca
 80024e2:	625a      	str	r2, [r3, #36]	; 0x24
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2253      	movs	r2, #83	; 0x53
 80024ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 fa49 	bl	8002984 <RTC_EnterInitMode>
 80024f2:	4603      	mov	r3, r0
 80024f4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80024f6:	7bfb      	ldrb	r3, [r7, #15]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d12c      	bne.n	8002556 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	6812      	ldr	r2, [r2, #0]
 8002506:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800250a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800250e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6899      	ldr	r1, [r3, #8]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	431a      	orrs	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	695b      	ldr	r3, [r3, #20]
 8002524:	431a      	orrs	r2, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	430a      	orrs	r2, r1
 800252c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	68d2      	ldr	r2, [r2, #12]
 8002536:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6919      	ldr	r1, [r3, #16]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	041a      	lsls	r2, r3, #16
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	430a      	orrs	r2, r1
 800254a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f000 fa50 	bl	80029f2 <RTC_ExitInitMode>
 8002552:	4603      	mov	r3, r0
 8002554:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002556:	7bfb      	ldrb	r3, [r7, #15]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d110      	bne.n	800257e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800256a:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	699a      	ldr	r2, [r3, #24]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	430a      	orrs	r2, r1
 800257c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	22ff      	movs	r2, #255	; 0xff
 8002584:	625a      	str	r2, [r3, #36]	; 0x24
 8002586:	e001      	b.n	800258c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002588:	2300      	movs	r3, #0
 800258a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800258c:	7bfb      	ldrb	r3, [r7, #15]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d102      	bne.n	8002598 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002598:	7bfb      	ldrb	r3, [r7, #15]
}
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80025a2:	b590      	push	{r4, r7, lr}
 80025a4:	b087      	sub	sp, #28
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	60f8      	str	r0, [r7, #12]
 80025aa:	60b9      	str	r1, [r7, #8]
 80025ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80025ae:	2300      	movs	r3, #0
 80025b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	7f1b      	ldrb	r3, [r3, #28]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d101      	bne.n	80025be <HAL_RTC_SetTime+0x1c>
 80025ba:	2302      	movs	r3, #2
 80025bc:	e087      	b.n	80026ce <HAL_RTC_SetTime+0x12c>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2201      	movs	r2, #1
 80025c2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2202      	movs	r2, #2
 80025c8:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d126      	bne.n	800261e <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d102      	bne.n	80025e4 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	2200      	movs	r2, #0
 80025e2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f000 fa27 	bl	8002a3c <RTC_ByteToBcd2>
 80025ee:	4603      	mov	r3, r0
 80025f0:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	785b      	ldrb	r3, [r3, #1]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f000 fa20 	bl	8002a3c <RTC_ByteToBcd2>
 80025fc:	4603      	mov	r3, r0
 80025fe:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002600:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	789b      	ldrb	r3, [r3, #2]
 8002606:	4618      	mov	r0, r3
 8002608:	f000 fa18 	bl	8002a3c <RTC_ByteToBcd2>
 800260c:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800260e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	78db      	ldrb	r3, [r3, #3]
 8002616:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8002618:	4313      	orrs	r3, r2
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	e018      	b.n	8002650 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002628:	2b00      	cmp	r3, #0
 800262a:	d102      	bne.n	8002632 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	2200      	movs	r2, #0
 8002630:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	785b      	ldrb	r3, [r3, #1]
 800263c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800263e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8002640:	68ba      	ldr	r2, [r7, #8]
 8002642:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8002644:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	78db      	ldrb	r3, [r3, #3]
 800264a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800264c:	4313      	orrs	r3, r2
 800264e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	22ca      	movs	r2, #202	; 0xca
 8002656:	625a      	str	r2, [r3, #36]	; 0x24
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2253      	movs	r2, #83	; 0x53
 800265e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002660:	68f8      	ldr	r0, [r7, #12]
 8002662:	f000 f98f 	bl	8002984 <RTC_EnterInitMode>
 8002666:	4603      	mov	r3, r0
 8002668:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800266a:	7cfb      	ldrb	r3, [r7, #19]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d120      	bne.n	80026b2 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800267a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800267e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689a      	ldr	r2, [r3, #8]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800268e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6899      	ldr	r1, [r3, #8]
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	68da      	ldr	r2, [r3, #12]
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	431a      	orrs	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	430a      	orrs	r2, r1
 80026a6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80026a8:	68f8      	ldr	r0, [r7, #12]
 80026aa:	f000 f9a2 	bl	80029f2 <RTC_ExitInitMode>
 80026ae:	4603      	mov	r3, r0
 80026b0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80026b2:	7cfb      	ldrb	r3, [r7, #19]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d102      	bne.n	80026be <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2201      	movs	r2, #1
 80026bc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	22ff      	movs	r2, #255	; 0xff
 80026c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	771a      	strb	r2, [r3, #28]

  return status;
 80026cc:	7cfb      	ldrb	r3, [r7, #19]
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	371c      	adds	r7, #28
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd90      	pop	{r4, r7, pc}

080026d6 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b086      	sub	sp, #24
 80026da:	af00      	add	r7, sp, #0
 80026dc:	60f8      	str	r0, [r7, #12]
 80026de:	60b9      	str	r1, [r7, #8]
 80026e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80026e2:	2300      	movs	r3, #0
 80026e4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002708:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800270c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	0c1b      	lsrs	r3, r3, #16
 8002712:	b2db      	uxtb	r3, r3
 8002714:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002718:	b2da      	uxtb	r2, r3
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	0a1b      	lsrs	r3, r3, #8
 8002722:	b2db      	uxtb	r3, r3
 8002724:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002728:	b2da      	uxtb	r2, r3
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	b2db      	uxtb	r3, r3
 8002732:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002736:	b2da      	uxtb	r2, r3
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	0d9b      	lsrs	r3, r3, #22
 8002740:	b2db      	uxtb	r3, r3
 8002742:	f003 0301 	and.w	r3, r3, #1
 8002746:	b2da      	uxtb	r2, r3
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d11a      	bne.n	8002788 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	4618      	mov	r0, r3
 8002758:	f000 f98e 	bl	8002a78 <RTC_Bcd2ToByte>
 800275c:	4603      	mov	r3, r0
 800275e:	461a      	mov	r2, r3
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	785b      	ldrb	r3, [r3, #1]
 8002768:	4618      	mov	r0, r3
 800276a:	f000 f985 	bl	8002a78 <RTC_Bcd2ToByte>
 800276e:	4603      	mov	r3, r0
 8002770:	461a      	mov	r2, r3
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	789b      	ldrb	r3, [r3, #2]
 800277a:	4618      	mov	r0, r3
 800277c:	f000 f97c 	bl	8002a78 <RTC_Bcd2ToByte>
 8002780:	4603      	mov	r3, r0
 8002782:	461a      	mov	r2, r3
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3718      	adds	r7, #24
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002792:	b590      	push	{r4, r7, lr}
 8002794:	b087      	sub	sp, #28
 8002796:	af00      	add	r7, sp, #0
 8002798:	60f8      	str	r0, [r7, #12]
 800279a:	60b9      	str	r1, [r7, #8]
 800279c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800279e:	2300      	movs	r3, #0
 80027a0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	7f1b      	ldrb	r3, [r3, #28]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d101      	bne.n	80027ae <HAL_RTC_SetDate+0x1c>
 80027aa:	2302      	movs	r3, #2
 80027ac:	e071      	b.n	8002892 <HAL_RTC_SetDate+0x100>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2201      	movs	r2, #1
 80027b2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2202      	movs	r2, #2
 80027b8:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10e      	bne.n	80027de <HAL_RTC_SetDate+0x4c>
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	785b      	ldrb	r3, [r3, #1]
 80027c4:	f003 0310 	and.w	r3, r3, #16
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d008      	beq.n	80027de <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	785b      	ldrb	r3, [r3, #1]
 80027d0:	f023 0310 	bic.w	r3, r3, #16
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	330a      	adds	r3, #10
 80027d8:	b2da      	uxtb	r2, r3
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d11c      	bne.n	800281e <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	78db      	ldrb	r3, [r3, #3]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f000 f927 	bl	8002a3c <RTC_ByteToBcd2>
 80027ee:	4603      	mov	r3, r0
 80027f0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	785b      	ldrb	r3, [r3, #1]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f000 f920 	bl	8002a3c <RTC_ByteToBcd2>
 80027fc:	4603      	mov	r3, r0
 80027fe:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002800:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	789b      	ldrb	r3, [r3, #2]
 8002806:	4618      	mov	r0, r3
 8002808:	f000 f918 	bl	8002a3c <RTC_ByteToBcd2>
 800280c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800280e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002818:	4313      	orrs	r3, r2
 800281a:	617b      	str	r3, [r7, #20]
 800281c:	e00e      	b.n	800283c <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	78db      	ldrb	r3, [r3, #3]
 8002822:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	785b      	ldrb	r3, [r3, #1]
 8002828:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800282a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800282c:	68ba      	ldr	r2, [r7, #8]
 800282e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8002830:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8002838:	4313      	orrs	r3, r2
 800283a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	22ca      	movs	r2, #202	; 0xca
 8002842:	625a      	str	r2, [r3, #36]	; 0x24
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2253      	movs	r2, #83	; 0x53
 800284a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	f000 f899 	bl	8002984 <RTC_EnterInitMode>
 8002852:	4603      	mov	r3, r0
 8002854:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8002856:	7cfb      	ldrb	r3, [r7, #19]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d10c      	bne.n	8002876 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002866:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800286a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f000 f8c0 	bl	80029f2 <RTC_ExitInitMode>
 8002872:	4603      	mov	r3, r0
 8002874:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8002876:	7cfb      	ldrb	r3, [r7, #19]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d102      	bne.n	8002882 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2201      	movs	r2, #1
 8002880:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	22ff      	movs	r2, #255	; 0xff
 8002888:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	771a      	strb	r2, [r3, #28]

  return status;
 8002890:	7cfb      	ldrb	r3, [r7, #19]
}
 8002892:	4618      	mov	r0, r3
 8002894:	371c      	adds	r7, #28
 8002896:	46bd      	mov	sp, r7
 8002898:	bd90      	pop	{r4, r7, pc}

0800289a <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b086      	sub	sp, #24
 800289e:	af00      	add	r7, sp, #0
 80028a0:	60f8      	str	r0, [r7, #12]
 80028a2:	60b9      	str	r1, [r7, #8]
 80028a4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80028b4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80028b8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	0c1b      	lsrs	r3, r3, #16
 80028be:	b2da      	uxtb	r2, r3
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	0a1b      	lsrs	r3, r3, #8
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	f003 031f 	and.w	r3, r3, #31
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	0b5b      	lsrs	r3, r3, #13
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	b2da      	uxtb	r2, r3
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d11a      	bne.n	800292e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	78db      	ldrb	r3, [r3, #3]
 80028fc:	4618      	mov	r0, r3
 80028fe:	f000 f8bb 	bl	8002a78 <RTC_Bcd2ToByte>
 8002902:	4603      	mov	r3, r0
 8002904:	461a      	mov	r2, r3
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	785b      	ldrb	r3, [r3, #1]
 800290e:	4618      	mov	r0, r3
 8002910:	f000 f8b2 	bl	8002a78 <RTC_Bcd2ToByte>
 8002914:	4603      	mov	r3, r0
 8002916:	461a      	mov	r2, r3
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	789b      	ldrb	r3, [r3, #2]
 8002920:	4618      	mov	r0, r3
 8002922:	f000 f8a9 	bl	8002a78 <RTC_Bcd2ToByte>
 8002926:	4603      	mov	r3, r0
 8002928:	461a      	mov	r2, r3
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002940:	2300      	movs	r3, #0
 8002942:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a0d      	ldr	r2, [pc, #52]	; (8002980 <HAL_RTC_WaitForSynchro+0x48>)
 800294a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800294c:	f7fd ff74 	bl	8000838 <HAL_GetTick>
 8002950:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002952:	e009      	b.n	8002968 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002954:	f7fd ff70 	bl	8000838 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002962:	d901      	bls.n	8002968 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e007      	b.n	8002978 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	f003 0320 	and.w	r3, r3, #32
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0ee      	beq.n	8002954 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3710      	adds	r7, #16
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	00017f5f 	.word	0x00017f5f

08002984 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800298c:	2300      	movs	r3, #0
 800298e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002990:	2300      	movs	r3, #0
 8002992:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d122      	bne.n	80029e8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	68da      	ldr	r2, [r3, #12]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029b0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80029b2:	f7fd ff41 	bl	8000838 <HAL_GetTick>
 80029b6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80029b8:	e00c      	b.n	80029d4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80029ba:	f7fd ff3d 	bl	8000838 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029c8:	d904      	bls.n	80029d4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2204      	movs	r2, #4
 80029ce:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d102      	bne.n	80029e8 <RTC_EnterInitMode+0x64>
 80029e2:	7bfb      	ldrb	r3, [r7, #15]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d1e8      	bne.n	80029ba <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80029e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b084      	sub	sp, #16
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029fa:	2300      	movs	r3, #0
 80029fc:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68da      	ldr	r2, [r3, #12]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a0c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f003 0320 	and.w	r3, r3, #32
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d10a      	bne.n	8002a32 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	f7ff ff8b 	bl	8002938 <HAL_RTC_WaitForSynchro>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d004      	beq.n	8002a32 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2204      	movs	r2, #4
 8002a2c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	4603      	mov	r3, r0
 8002a44:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002a46:	2300      	movs	r3, #0
 8002a48:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8002a4a:	e005      	b.n	8002a58 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	3301      	adds	r3, #1
 8002a50:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8002a52:	79fb      	ldrb	r3, [r7, #7]
 8002a54:	3b0a      	subs	r3, #10
 8002a56:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8002a58:	79fb      	ldrb	r3, [r7, #7]
 8002a5a:	2b09      	cmp	r3, #9
 8002a5c:	d8f6      	bhi.n	8002a4c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	011b      	lsls	r3, r3, #4
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	79fb      	ldrb	r3, [r7, #7]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	b2db      	uxtb	r3, r3
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3714      	adds	r7, #20
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	4603      	mov	r3, r0
 8002a80:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8002a82:	2300      	movs	r3, #0
 8002a84:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8002a86:	79fb      	ldrb	r3, [r7, #7]
 8002a88:	091b      	lsrs	r3, r3, #4
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	4613      	mov	r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	4413      	add	r3, r2
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	79fb      	ldrb	r3, [r7, #7]
 8002a9e:	f003 030f 	and.w	r3, r3, #15
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	4413      	add	r3, r2
 8002aa6:	b2db      	uxtb	r3, r3
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e040      	b.n	8002b48 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d106      	bne.n	8002adc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7fd fd74 	bl	80005c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2224      	movs	r2, #36	; 0x24
 8002ae0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 0201 	bic.w	r2, r2, #1
 8002af0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f8b6 	bl	8002c64 <UART_SetConfig>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d101      	bne.n	8002b02 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e022      	b.n	8002b48 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d002      	beq.n	8002b10 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f000 f9e0 	bl	8002ed0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	689a      	ldr	r2, [r3, #8]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f042 0201 	orr.w	r2, r2, #1
 8002b3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f000 fa67 	bl	8003014 <UART_CheckIdleState>
 8002b46:	4603      	mov	r3, r0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3708      	adds	r7, #8
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b08a      	sub	sp, #40	; 0x28
 8002b54:	af02      	add	r7, sp, #8
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	603b      	str	r3, [r7, #0]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b64:	2b20      	cmp	r3, #32
 8002b66:	d178      	bne.n	8002c5a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d002      	beq.n	8002b74 <HAL_UART_Transmit+0x24>
 8002b6e:	88fb      	ldrh	r3, [r7, #6]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e071      	b.n	8002c5c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2221      	movs	r2, #33	; 0x21
 8002b84:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b86:	f7fd fe57 	bl	8000838 <HAL_GetTick>
 8002b8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	88fa      	ldrh	r2, [r7, #6]
 8002b90:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	88fa      	ldrh	r2, [r7, #6]
 8002b98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ba4:	d108      	bne.n	8002bb8 <HAL_UART_Transmit+0x68>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d104      	bne.n	8002bb8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	61bb      	str	r3, [r7, #24]
 8002bb6:	e003      	b.n	8002bc0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002bc0:	e030      	b.n	8002c24 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	2180      	movs	r1, #128	; 0x80
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	f000 fac9 	bl	8003164 <UART_WaitOnFlagUntilTimeout>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d004      	beq.n	8002be2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2220      	movs	r2, #32
 8002bdc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e03c      	b.n	8002c5c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10b      	bne.n	8002c00 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	881a      	ldrh	r2, [r3, #0]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bf4:	b292      	uxth	r2, r2
 8002bf6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	3302      	adds	r3, #2
 8002bfc:	61bb      	str	r3, [r7, #24]
 8002bfe:	e008      	b.n	8002c12 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	781a      	ldrb	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	b292      	uxth	r2, r2
 8002c0a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	3301      	adds	r3, #1
 8002c10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1c8      	bne.n	8002bc2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	2200      	movs	r2, #0
 8002c38:	2140      	movs	r1, #64	; 0x40
 8002c3a:	68f8      	ldr	r0, [r7, #12]
 8002c3c:	f000 fa92 	bl	8003164 <UART_WaitOnFlagUntilTimeout>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d004      	beq.n	8002c50 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2220      	movs	r2, #32
 8002c4a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e005      	b.n	8002c5c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2220      	movs	r2, #32
 8002c54:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002c56:	2300      	movs	r3, #0
 8002c58:	e000      	b.n	8002c5c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8002c5a:	2302      	movs	r3, #2
  }
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3720      	adds	r7, #32
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b088      	sub	sp, #32
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	69db      	ldr	r3, [r3, #28]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	4b8a      	ldr	r3, [pc, #552]	; (8002eb8 <UART_SetConfig+0x254>)
 8002c90:	4013      	ands	r3, r2
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	6812      	ldr	r2, [r2, #0]
 8002c96:	6979      	ldr	r1, [r7, #20]
 8002c98:	430b      	orrs	r3, r1
 8002c9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68da      	ldr	r2, [r3, #12]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a78      	ldr	r2, [pc, #480]	; (8002ebc <UART_SetConfig+0x258>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d120      	bne.n	8002d22 <UART_SetConfig+0xbe>
 8002ce0:	4b77      	ldr	r3, [pc, #476]	; (8002ec0 <UART_SetConfig+0x25c>)
 8002ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce4:	f003 0303 	and.w	r3, r3, #3
 8002ce8:	2b03      	cmp	r3, #3
 8002cea:	d817      	bhi.n	8002d1c <UART_SetConfig+0xb8>
 8002cec:	a201      	add	r2, pc, #4	; (adr r2, 8002cf4 <UART_SetConfig+0x90>)
 8002cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf2:	bf00      	nop
 8002cf4:	08002d05 	.word	0x08002d05
 8002cf8:	08002d11 	.word	0x08002d11
 8002cfc:	08002d17 	.word	0x08002d17
 8002d00:	08002d0b 	.word	0x08002d0b
 8002d04:	2300      	movs	r3, #0
 8002d06:	77fb      	strb	r3, [r7, #31]
 8002d08:	e01d      	b.n	8002d46 <UART_SetConfig+0xe2>
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	77fb      	strb	r3, [r7, #31]
 8002d0e:	e01a      	b.n	8002d46 <UART_SetConfig+0xe2>
 8002d10:	2304      	movs	r3, #4
 8002d12:	77fb      	strb	r3, [r7, #31]
 8002d14:	e017      	b.n	8002d46 <UART_SetConfig+0xe2>
 8002d16:	2308      	movs	r3, #8
 8002d18:	77fb      	strb	r3, [r7, #31]
 8002d1a:	e014      	b.n	8002d46 <UART_SetConfig+0xe2>
 8002d1c:	2310      	movs	r3, #16
 8002d1e:	77fb      	strb	r3, [r7, #31]
 8002d20:	e011      	b.n	8002d46 <UART_SetConfig+0xe2>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a67      	ldr	r2, [pc, #412]	; (8002ec4 <UART_SetConfig+0x260>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d102      	bne.n	8002d32 <UART_SetConfig+0xce>
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	77fb      	strb	r3, [r7, #31]
 8002d30:	e009      	b.n	8002d46 <UART_SetConfig+0xe2>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a64      	ldr	r2, [pc, #400]	; (8002ec8 <UART_SetConfig+0x264>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d102      	bne.n	8002d42 <UART_SetConfig+0xde>
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	77fb      	strb	r3, [r7, #31]
 8002d40:	e001      	b.n	8002d46 <UART_SetConfig+0xe2>
 8002d42:	2310      	movs	r3, #16
 8002d44:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d4e:	d15a      	bne.n	8002e06 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8002d50:	7ffb      	ldrb	r3, [r7, #31]
 8002d52:	2b08      	cmp	r3, #8
 8002d54:	d827      	bhi.n	8002da6 <UART_SetConfig+0x142>
 8002d56:	a201      	add	r2, pc, #4	; (adr r2, 8002d5c <UART_SetConfig+0xf8>)
 8002d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d5c:	08002d81 	.word	0x08002d81
 8002d60:	08002d89 	.word	0x08002d89
 8002d64:	08002d91 	.word	0x08002d91
 8002d68:	08002da7 	.word	0x08002da7
 8002d6c:	08002d97 	.word	0x08002d97
 8002d70:	08002da7 	.word	0x08002da7
 8002d74:	08002da7 	.word	0x08002da7
 8002d78:	08002da7 	.word	0x08002da7
 8002d7c:	08002d9f 	.word	0x08002d9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d80:	f7ff fa12 	bl	80021a8 <HAL_RCC_GetPCLK1Freq>
 8002d84:	61b8      	str	r0, [r7, #24]
        break;
 8002d86:	e013      	b.n	8002db0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d88:	f7ff fa30 	bl	80021ec <HAL_RCC_GetPCLK2Freq>
 8002d8c:	61b8      	str	r0, [r7, #24]
        break;
 8002d8e:	e00f      	b.n	8002db0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d90:	4b4e      	ldr	r3, [pc, #312]	; (8002ecc <UART_SetConfig+0x268>)
 8002d92:	61bb      	str	r3, [r7, #24]
        break;
 8002d94:	e00c      	b.n	8002db0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d96:	f7ff f991 	bl	80020bc <HAL_RCC_GetSysClockFreq>
 8002d9a:	61b8      	str	r0, [r7, #24]
        break;
 8002d9c:	e008      	b.n	8002db0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002da2:	61bb      	str	r3, [r7, #24]
        break;
 8002da4:	e004      	b.n	8002db0 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8002da6:	2300      	movs	r3, #0
 8002da8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	77bb      	strb	r3, [r7, #30]
        break;
 8002dae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d074      	beq.n	8002ea0 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	005a      	lsls	r2, r3, #1
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	085b      	lsrs	r3, r3, #1
 8002dc0:	441a      	add	r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	2b0f      	cmp	r3, #15
 8002dd0:	d916      	bls.n	8002e00 <UART_SetConfig+0x19c>
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dd8:	d212      	bcs.n	8002e00 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	f023 030f 	bic.w	r3, r3, #15
 8002de2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	085b      	lsrs	r3, r3, #1
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	f003 0307 	and.w	r3, r3, #7
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	89fb      	ldrh	r3, [r7, #14]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	89fa      	ldrh	r2, [r7, #14]
 8002dfc:	60da      	str	r2, [r3, #12]
 8002dfe:	e04f      	b.n	8002ea0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	77bb      	strb	r3, [r7, #30]
 8002e04:	e04c      	b.n	8002ea0 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002e06:	7ffb      	ldrb	r3, [r7, #31]
 8002e08:	2b08      	cmp	r3, #8
 8002e0a:	d828      	bhi.n	8002e5e <UART_SetConfig+0x1fa>
 8002e0c:	a201      	add	r2, pc, #4	; (adr r2, 8002e14 <UART_SetConfig+0x1b0>)
 8002e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e12:	bf00      	nop
 8002e14:	08002e39 	.word	0x08002e39
 8002e18:	08002e41 	.word	0x08002e41
 8002e1c:	08002e49 	.word	0x08002e49
 8002e20:	08002e5f 	.word	0x08002e5f
 8002e24:	08002e4f 	.word	0x08002e4f
 8002e28:	08002e5f 	.word	0x08002e5f
 8002e2c:	08002e5f 	.word	0x08002e5f
 8002e30:	08002e5f 	.word	0x08002e5f
 8002e34:	08002e57 	.word	0x08002e57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e38:	f7ff f9b6 	bl	80021a8 <HAL_RCC_GetPCLK1Freq>
 8002e3c:	61b8      	str	r0, [r7, #24]
        break;
 8002e3e:	e013      	b.n	8002e68 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e40:	f7ff f9d4 	bl	80021ec <HAL_RCC_GetPCLK2Freq>
 8002e44:	61b8      	str	r0, [r7, #24]
        break;
 8002e46:	e00f      	b.n	8002e68 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e48:	4b20      	ldr	r3, [pc, #128]	; (8002ecc <UART_SetConfig+0x268>)
 8002e4a:	61bb      	str	r3, [r7, #24]
        break;
 8002e4c:	e00c      	b.n	8002e68 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e4e:	f7ff f935 	bl	80020bc <HAL_RCC_GetSysClockFreq>
 8002e52:	61b8      	str	r0, [r7, #24]
        break;
 8002e54:	e008      	b.n	8002e68 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e5a:	61bb      	str	r3, [r7, #24]
        break;
 8002e5c:	e004      	b.n	8002e68 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	77bb      	strb	r3, [r7, #30]
        break;
 8002e66:	bf00      	nop
    }

    if (pclk != 0U)
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d018      	beq.n	8002ea0 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	085a      	lsrs	r2, r3, #1
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	441a      	add	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e80:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	2b0f      	cmp	r3, #15
 8002e86:	d909      	bls.n	8002e9c <UART_SetConfig+0x238>
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e8e:	d205      	bcs.n	8002e9c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	60da      	str	r2, [r3, #12]
 8002e9a:	e001      	b.n	8002ea0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002eac:	7fbb      	ldrb	r3, [r7, #30]
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3720      	adds	r7, #32
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	efff69f3 	.word	0xefff69f3
 8002ebc:	40013800 	.word	0x40013800
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	40004400 	.word	0x40004400
 8002ec8:	40004800 	.word	0x40004800
 8002ecc:	007a1200 	.word	0x007a1200

08002ed0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00a      	beq.n	8002efa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d00a      	beq.n	8002f1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00a      	beq.n	8002f3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f42:	f003 0308 	and.w	r3, r3, #8
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00a      	beq.n	8002f60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f64:	f003 0310 	and.w	r3, r3, #16
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00a      	beq.n	8002f82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	f003 0320 	and.w	r3, r3, #32
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00a      	beq.n	8002fa4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d01a      	beq.n	8002fe6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fce:	d10a      	bne.n	8002fe6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00a      	beq.n	8003008 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	430a      	orrs	r2, r1
 8003006:	605a      	str	r2, [r3, #4]
  }
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b098      	sub	sp, #96	; 0x60
 8003018:	af02      	add	r7, sp, #8
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003024:	f7fd fc08 	bl	8000838 <HAL_GetTick>
 8003028:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0308 	and.w	r3, r3, #8
 8003034:	2b08      	cmp	r3, #8
 8003036:	d12e      	bne.n	8003096 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003038:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800303c:	9300      	str	r3, [sp, #0]
 800303e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003040:	2200      	movs	r2, #0
 8003042:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 f88c 	bl	8003164 <UART_WaitOnFlagUntilTimeout>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d021      	beq.n	8003096 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800305a:	e853 3f00 	ldrex	r3, [r3]
 800305e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003062:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003066:	653b      	str	r3, [r7, #80]	; 0x50
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	461a      	mov	r2, r3
 800306e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003070:	647b      	str	r3, [r7, #68]	; 0x44
 8003072:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003074:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003076:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003078:	e841 2300 	strex	r3, r2, [r1]
 800307c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800307e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1e6      	bne.n	8003052 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2220      	movs	r2, #32
 8003088:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e062      	b.n	800315c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0304 	and.w	r3, r3, #4
 80030a0:	2b04      	cmp	r3, #4
 80030a2:	d149      	bne.n	8003138 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030ac:	2200      	movs	r2, #0
 80030ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 f856 	bl	8003164 <UART_WaitOnFlagUntilTimeout>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d03c      	beq.n	8003138 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c6:	e853 3f00 	ldrex	r3, [r3]
 80030ca:	623b      	str	r3, [r7, #32]
   return(result);
 80030cc:	6a3b      	ldr	r3, [r7, #32]
 80030ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80030d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	461a      	mov	r2, r3
 80030da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030dc:	633b      	str	r3, [r7, #48]	; 0x30
 80030de:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030e4:	e841 2300 	strex	r3, r2, [r1]
 80030e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80030ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1e6      	bne.n	80030be <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	3308      	adds	r3, #8
 80030f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	e853 3f00 	ldrex	r3, [r3]
 80030fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f023 0301 	bic.w	r3, r3, #1
 8003106:	64bb      	str	r3, [r7, #72]	; 0x48
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	3308      	adds	r3, #8
 800310e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003110:	61fa      	str	r2, [r7, #28]
 8003112:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003114:	69b9      	ldr	r1, [r7, #24]
 8003116:	69fa      	ldr	r2, [r7, #28]
 8003118:	e841 2300 	strex	r3, r2, [r1]
 800311c:	617b      	str	r3, [r7, #20]
   return(result);
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1e5      	bne.n	80030f0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2220      	movs	r2, #32
 8003128:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e011      	b.n	800315c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2220      	movs	r2, #32
 800313c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2220      	movs	r2, #32
 8003142:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3758      	adds	r7, #88	; 0x58
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	603b      	str	r3, [r7, #0]
 8003170:	4613      	mov	r3, r2
 8003172:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003174:	e049      	b.n	800320a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800317c:	d045      	beq.n	800320a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800317e:	f7fd fb5b 	bl	8000838 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	429a      	cmp	r2, r3
 800318c:	d302      	bcc.n	8003194 <UART_WaitOnFlagUntilTimeout+0x30>
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d101      	bne.n	8003198 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e048      	b.n	800322a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0304 	and.w	r3, r3, #4
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d031      	beq.n	800320a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	69db      	ldr	r3, [r3, #28]
 80031ac:	f003 0308 	and.w	r3, r3, #8
 80031b0:	2b08      	cmp	r3, #8
 80031b2:	d110      	bne.n	80031d6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2208      	movs	r2, #8
 80031ba:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f000 f838 	bl	8003232 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2208      	movs	r2, #8
 80031c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e029      	b.n	800322a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	69db      	ldr	r3, [r3, #28]
 80031dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031e4:	d111      	bne.n	800320a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f000 f81e 	bl	8003232 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2220      	movs	r2, #32
 80031fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e00f      	b.n	800322a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	69da      	ldr	r2, [r3, #28]
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	4013      	ands	r3, r2
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	429a      	cmp	r2, r3
 8003218:	bf0c      	ite	eq
 800321a:	2301      	moveq	r3, #1
 800321c:	2300      	movne	r3, #0
 800321e:	b2db      	uxtb	r3, r3
 8003220:	461a      	mov	r2, r3
 8003222:	79fb      	ldrb	r3, [r7, #7]
 8003224:	429a      	cmp	r2, r3
 8003226:	d0a6      	beq.n	8003176 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}

08003232 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003232:	b480      	push	{r7}
 8003234:	b095      	sub	sp, #84	; 0x54
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003242:	e853 3f00 	ldrex	r3, [r3]
 8003246:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800324e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	461a      	mov	r2, r3
 8003256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003258:	643b      	str	r3, [r7, #64]	; 0x40
 800325a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800325c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800325e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003260:	e841 2300 	strex	r3, r2, [r1]
 8003264:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1e6      	bne.n	800323a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	3308      	adds	r3, #8
 8003272:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003274:	6a3b      	ldr	r3, [r7, #32]
 8003276:	e853 3f00 	ldrex	r3, [r3]
 800327a:	61fb      	str	r3, [r7, #28]
   return(result);
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	f023 0301 	bic.w	r3, r3, #1
 8003282:	64bb      	str	r3, [r7, #72]	; 0x48
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	3308      	adds	r3, #8
 800328a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800328c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800328e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003290:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003292:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003294:	e841 2300 	strex	r3, r2, [r1]
 8003298:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800329a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1e5      	bne.n	800326c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d118      	bne.n	80032da <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	e853 3f00 	ldrex	r3, [r3]
 80032b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	f023 0310 	bic.w	r3, r3, #16
 80032bc:	647b      	str	r3, [r7, #68]	; 0x44
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	461a      	mov	r2, r3
 80032c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032c6:	61bb      	str	r3, [r7, #24]
 80032c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ca:	6979      	ldr	r1, [r7, #20]
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	e841 2300 	strex	r3, r2, [r1]
 80032d2:	613b      	str	r3, [r7, #16]
   return(result);
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1e6      	bne.n	80032a8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2220      	movs	r2, #32
 80032de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	669a      	str	r2, [r3, #104]	; 0x68
}
 80032ee:	bf00      	nop
 80032f0:	3754      	adds	r7, #84	; 0x54
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
	...

080032fc <siprintf>:
 80032fc:	b40e      	push	{r1, r2, r3}
 80032fe:	b500      	push	{lr}
 8003300:	b09c      	sub	sp, #112	; 0x70
 8003302:	ab1d      	add	r3, sp, #116	; 0x74
 8003304:	9002      	str	r0, [sp, #8]
 8003306:	9006      	str	r0, [sp, #24]
 8003308:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800330c:	4809      	ldr	r0, [pc, #36]	; (8003334 <siprintf+0x38>)
 800330e:	9107      	str	r1, [sp, #28]
 8003310:	9104      	str	r1, [sp, #16]
 8003312:	4909      	ldr	r1, [pc, #36]	; (8003338 <siprintf+0x3c>)
 8003314:	f853 2b04 	ldr.w	r2, [r3], #4
 8003318:	9105      	str	r1, [sp, #20]
 800331a:	6800      	ldr	r0, [r0, #0]
 800331c:	9301      	str	r3, [sp, #4]
 800331e:	a902      	add	r1, sp, #8
 8003320:	f000 f992 	bl	8003648 <_svfiprintf_r>
 8003324:	9b02      	ldr	r3, [sp, #8]
 8003326:	2200      	movs	r2, #0
 8003328:	701a      	strb	r2, [r3, #0]
 800332a:	b01c      	add	sp, #112	; 0x70
 800332c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003330:	b003      	add	sp, #12
 8003332:	4770      	bx	lr
 8003334:	20000058 	.word	0x20000058
 8003338:	ffff0208 	.word	0xffff0208

0800333c <memset>:
 800333c:	4402      	add	r2, r0
 800333e:	4603      	mov	r3, r0
 8003340:	4293      	cmp	r3, r2
 8003342:	d100      	bne.n	8003346 <memset+0xa>
 8003344:	4770      	bx	lr
 8003346:	f803 1b01 	strb.w	r1, [r3], #1
 800334a:	e7f9      	b.n	8003340 <memset+0x4>

0800334c <__errno>:
 800334c:	4b01      	ldr	r3, [pc, #4]	; (8003354 <__errno+0x8>)
 800334e:	6818      	ldr	r0, [r3, #0]
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	20000058 	.word	0x20000058

08003358 <__libc_init_array>:
 8003358:	b570      	push	{r4, r5, r6, lr}
 800335a:	4d0d      	ldr	r5, [pc, #52]	; (8003390 <__libc_init_array+0x38>)
 800335c:	4c0d      	ldr	r4, [pc, #52]	; (8003394 <__libc_init_array+0x3c>)
 800335e:	1b64      	subs	r4, r4, r5
 8003360:	10a4      	asrs	r4, r4, #2
 8003362:	2600      	movs	r6, #0
 8003364:	42a6      	cmp	r6, r4
 8003366:	d109      	bne.n	800337c <__libc_init_array+0x24>
 8003368:	4d0b      	ldr	r5, [pc, #44]	; (8003398 <__libc_init_array+0x40>)
 800336a:	4c0c      	ldr	r4, [pc, #48]	; (800339c <__libc_init_array+0x44>)
 800336c:	f000 fc6a 	bl	8003c44 <_init>
 8003370:	1b64      	subs	r4, r4, r5
 8003372:	10a4      	asrs	r4, r4, #2
 8003374:	2600      	movs	r6, #0
 8003376:	42a6      	cmp	r6, r4
 8003378:	d105      	bne.n	8003386 <__libc_init_array+0x2e>
 800337a:	bd70      	pop	{r4, r5, r6, pc}
 800337c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003380:	4798      	blx	r3
 8003382:	3601      	adds	r6, #1
 8003384:	e7ee      	b.n	8003364 <__libc_init_array+0xc>
 8003386:	f855 3b04 	ldr.w	r3, [r5], #4
 800338a:	4798      	blx	r3
 800338c:	3601      	adds	r6, #1
 800338e:	e7f2      	b.n	8003376 <__libc_init_array+0x1e>
 8003390:	08003cec 	.word	0x08003cec
 8003394:	08003cec 	.word	0x08003cec
 8003398:	08003cec 	.word	0x08003cec
 800339c:	08003cf0 	.word	0x08003cf0

080033a0 <__retarget_lock_acquire_recursive>:
 80033a0:	4770      	bx	lr

080033a2 <__retarget_lock_release_recursive>:
 80033a2:	4770      	bx	lr

080033a4 <_free_r>:
 80033a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80033a6:	2900      	cmp	r1, #0
 80033a8:	d044      	beq.n	8003434 <_free_r+0x90>
 80033aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80033ae:	9001      	str	r0, [sp, #4]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f1a1 0404 	sub.w	r4, r1, #4
 80033b6:	bfb8      	it	lt
 80033b8:	18e4      	addlt	r4, r4, r3
 80033ba:	f000 f8df 	bl	800357c <__malloc_lock>
 80033be:	4a1e      	ldr	r2, [pc, #120]	; (8003438 <_free_r+0x94>)
 80033c0:	9801      	ldr	r0, [sp, #4]
 80033c2:	6813      	ldr	r3, [r2, #0]
 80033c4:	b933      	cbnz	r3, 80033d4 <_free_r+0x30>
 80033c6:	6063      	str	r3, [r4, #4]
 80033c8:	6014      	str	r4, [r2, #0]
 80033ca:	b003      	add	sp, #12
 80033cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80033d0:	f000 b8da 	b.w	8003588 <__malloc_unlock>
 80033d4:	42a3      	cmp	r3, r4
 80033d6:	d908      	bls.n	80033ea <_free_r+0x46>
 80033d8:	6825      	ldr	r5, [r4, #0]
 80033da:	1961      	adds	r1, r4, r5
 80033dc:	428b      	cmp	r3, r1
 80033de:	bf01      	itttt	eq
 80033e0:	6819      	ldreq	r1, [r3, #0]
 80033e2:	685b      	ldreq	r3, [r3, #4]
 80033e4:	1949      	addeq	r1, r1, r5
 80033e6:	6021      	streq	r1, [r4, #0]
 80033e8:	e7ed      	b.n	80033c6 <_free_r+0x22>
 80033ea:	461a      	mov	r2, r3
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	b10b      	cbz	r3, 80033f4 <_free_r+0x50>
 80033f0:	42a3      	cmp	r3, r4
 80033f2:	d9fa      	bls.n	80033ea <_free_r+0x46>
 80033f4:	6811      	ldr	r1, [r2, #0]
 80033f6:	1855      	adds	r5, r2, r1
 80033f8:	42a5      	cmp	r5, r4
 80033fa:	d10b      	bne.n	8003414 <_free_r+0x70>
 80033fc:	6824      	ldr	r4, [r4, #0]
 80033fe:	4421      	add	r1, r4
 8003400:	1854      	adds	r4, r2, r1
 8003402:	42a3      	cmp	r3, r4
 8003404:	6011      	str	r1, [r2, #0]
 8003406:	d1e0      	bne.n	80033ca <_free_r+0x26>
 8003408:	681c      	ldr	r4, [r3, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	6053      	str	r3, [r2, #4]
 800340e:	440c      	add	r4, r1
 8003410:	6014      	str	r4, [r2, #0]
 8003412:	e7da      	b.n	80033ca <_free_r+0x26>
 8003414:	d902      	bls.n	800341c <_free_r+0x78>
 8003416:	230c      	movs	r3, #12
 8003418:	6003      	str	r3, [r0, #0]
 800341a:	e7d6      	b.n	80033ca <_free_r+0x26>
 800341c:	6825      	ldr	r5, [r4, #0]
 800341e:	1961      	adds	r1, r4, r5
 8003420:	428b      	cmp	r3, r1
 8003422:	bf04      	itt	eq
 8003424:	6819      	ldreq	r1, [r3, #0]
 8003426:	685b      	ldreq	r3, [r3, #4]
 8003428:	6063      	str	r3, [r4, #4]
 800342a:	bf04      	itt	eq
 800342c:	1949      	addeq	r1, r1, r5
 800342e:	6021      	streq	r1, [r4, #0]
 8003430:	6054      	str	r4, [r2, #4]
 8003432:	e7ca      	b.n	80033ca <_free_r+0x26>
 8003434:	b003      	add	sp, #12
 8003436:	bd30      	pop	{r4, r5, pc}
 8003438:	200002bc 	.word	0x200002bc

0800343c <sbrk_aligned>:
 800343c:	b570      	push	{r4, r5, r6, lr}
 800343e:	4e0e      	ldr	r6, [pc, #56]	; (8003478 <sbrk_aligned+0x3c>)
 8003440:	460c      	mov	r4, r1
 8003442:	6831      	ldr	r1, [r6, #0]
 8003444:	4605      	mov	r5, r0
 8003446:	b911      	cbnz	r1, 800344e <sbrk_aligned+0x12>
 8003448:	f000 fba6 	bl	8003b98 <_sbrk_r>
 800344c:	6030      	str	r0, [r6, #0]
 800344e:	4621      	mov	r1, r4
 8003450:	4628      	mov	r0, r5
 8003452:	f000 fba1 	bl	8003b98 <_sbrk_r>
 8003456:	1c43      	adds	r3, r0, #1
 8003458:	d00a      	beq.n	8003470 <sbrk_aligned+0x34>
 800345a:	1cc4      	adds	r4, r0, #3
 800345c:	f024 0403 	bic.w	r4, r4, #3
 8003460:	42a0      	cmp	r0, r4
 8003462:	d007      	beq.n	8003474 <sbrk_aligned+0x38>
 8003464:	1a21      	subs	r1, r4, r0
 8003466:	4628      	mov	r0, r5
 8003468:	f000 fb96 	bl	8003b98 <_sbrk_r>
 800346c:	3001      	adds	r0, #1
 800346e:	d101      	bne.n	8003474 <sbrk_aligned+0x38>
 8003470:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003474:	4620      	mov	r0, r4
 8003476:	bd70      	pop	{r4, r5, r6, pc}
 8003478:	200002c0 	.word	0x200002c0

0800347c <_malloc_r>:
 800347c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003480:	1ccd      	adds	r5, r1, #3
 8003482:	f025 0503 	bic.w	r5, r5, #3
 8003486:	3508      	adds	r5, #8
 8003488:	2d0c      	cmp	r5, #12
 800348a:	bf38      	it	cc
 800348c:	250c      	movcc	r5, #12
 800348e:	2d00      	cmp	r5, #0
 8003490:	4607      	mov	r7, r0
 8003492:	db01      	blt.n	8003498 <_malloc_r+0x1c>
 8003494:	42a9      	cmp	r1, r5
 8003496:	d905      	bls.n	80034a4 <_malloc_r+0x28>
 8003498:	230c      	movs	r3, #12
 800349a:	603b      	str	r3, [r7, #0]
 800349c:	2600      	movs	r6, #0
 800349e:	4630      	mov	r0, r6
 80034a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034a4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003578 <_malloc_r+0xfc>
 80034a8:	f000 f868 	bl	800357c <__malloc_lock>
 80034ac:	f8d8 3000 	ldr.w	r3, [r8]
 80034b0:	461c      	mov	r4, r3
 80034b2:	bb5c      	cbnz	r4, 800350c <_malloc_r+0x90>
 80034b4:	4629      	mov	r1, r5
 80034b6:	4638      	mov	r0, r7
 80034b8:	f7ff ffc0 	bl	800343c <sbrk_aligned>
 80034bc:	1c43      	adds	r3, r0, #1
 80034be:	4604      	mov	r4, r0
 80034c0:	d155      	bne.n	800356e <_malloc_r+0xf2>
 80034c2:	f8d8 4000 	ldr.w	r4, [r8]
 80034c6:	4626      	mov	r6, r4
 80034c8:	2e00      	cmp	r6, #0
 80034ca:	d145      	bne.n	8003558 <_malloc_r+0xdc>
 80034cc:	2c00      	cmp	r4, #0
 80034ce:	d048      	beq.n	8003562 <_malloc_r+0xe6>
 80034d0:	6823      	ldr	r3, [r4, #0]
 80034d2:	4631      	mov	r1, r6
 80034d4:	4638      	mov	r0, r7
 80034d6:	eb04 0903 	add.w	r9, r4, r3
 80034da:	f000 fb5d 	bl	8003b98 <_sbrk_r>
 80034de:	4581      	cmp	r9, r0
 80034e0:	d13f      	bne.n	8003562 <_malloc_r+0xe6>
 80034e2:	6821      	ldr	r1, [r4, #0]
 80034e4:	1a6d      	subs	r5, r5, r1
 80034e6:	4629      	mov	r1, r5
 80034e8:	4638      	mov	r0, r7
 80034ea:	f7ff ffa7 	bl	800343c <sbrk_aligned>
 80034ee:	3001      	adds	r0, #1
 80034f0:	d037      	beq.n	8003562 <_malloc_r+0xe6>
 80034f2:	6823      	ldr	r3, [r4, #0]
 80034f4:	442b      	add	r3, r5
 80034f6:	6023      	str	r3, [r4, #0]
 80034f8:	f8d8 3000 	ldr.w	r3, [r8]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d038      	beq.n	8003572 <_malloc_r+0xf6>
 8003500:	685a      	ldr	r2, [r3, #4]
 8003502:	42a2      	cmp	r2, r4
 8003504:	d12b      	bne.n	800355e <_malloc_r+0xe2>
 8003506:	2200      	movs	r2, #0
 8003508:	605a      	str	r2, [r3, #4]
 800350a:	e00f      	b.n	800352c <_malloc_r+0xb0>
 800350c:	6822      	ldr	r2, [r4, #0]
 800350e:	1b52      	subs	r2, r2, r5
 8003510:	d41f      	bmi.n	8003552 <_malloc_r+0xd6>
 8003512:	2a0b      	cmp	r2, #11
 8003514:	d917      	bls.n	8003546 <_malloc_r+0xca>
 8003516:	1961      	adds	r1, r4, r5
 8003518:	42a3      	cmp	r3, r4
 800351a:	6025      	str	r5, [r4, #0]
 800351c:	bf18      	it	ne
 800351e:	6059      	strne	r1, [r3, #4]
 8003520:	6863      	ldr	r3, [r4, #4]
 8003522:	bf08      	it	eq
 8003524:	f8c8 1000 	streq.w	r1, [r8]
 8003528:	5162      	str	r2, [r4, r5]
 800352a:	604b      	str	r3, [r1, #4]
 800352c:	4638      	mov	r0, r7
 800352e:	f104 060b 	add.w	r6, r4, #11
 8003532:	f000 f829 	bl	8003588 <__malloc_unlock>
 8003536:	f026 0607 	bic.w	r6, r6, #7
 800353a:	1d23      	adds	r3, r4, #4
 800353c:	1af2      	subs	r2, r6, r3
 800353e:	d0ae      	beq.n	800349e <_malloc_r+0x22>
 8003540:	1b9b      	subs	r3, r3, r6
 8003542:	50a3      	str	r3, [r4, r2]
 8003544:	e7ab      	b.n	800349e <_malloc_r+0x22>
 8003546:	42a3      	cmp	r3, r4
 8003548:	6862      	ldr	r2, [r4, #4]
 800354a:	d1dd      	bne.n	8003508 <_malloc_r+0x8c>
 800354c:	f8c8 2000 	str.w	r2, [r8]
 8003550:	e7ec      	b.n	800352c <_malloc_r+0xb0>
 8003552:	4623      	mov	r3, r4
 8003554:	6864      	ldr	r4, [r4, #4]
 8003556:	e7ac      	b.n	80034b2 <_malloc_r+0x36>
 8003558:	4634      	mov	r4, r6
 800355a:	6876      	ldr	r6, [r6, #4]
 800355c:	e7b4      	b.n	80034c8 <_malloc_r+0x4c>
 800355e:	4613      	mov	r3, r2
 8003560:	e7cc      	b.n	80034fc <_malloc_r+0x80>
 8003562:	230c      	movs	r3, #12
 8003564:	603b      	str	r3, [r7, #0]
 8003566:	4638      	mov	r0, r7
 8003568:	f000 f80e 	bl	8003588 <__malloc_unlock>
 800356c:	e797      	b.n	800349e <_malloc_r+0x22>
 800356e:	6025      	str	r5, [r4, #0]
 8003570:	e7dc      	b.n	800352c <_malloc_r+0xb0>
 8003572:	605b      	str	r3, [r3, #4]
 8003574:	deff      	udf	#255	; 0xff
 8003576:	bf00      	nop
 8003578:	200002bc 	.word	0x200002bc

0800357c <__malloc_lock>:
 800357c:	4801      	ldr	r0, [pc, #4]	; (8003584 <__malloc_lock+0x8>)
 800357e:	f7ff bf0f 	b.w	80033a0 <__retarget_lock_acquire_recursive>
 8003582:	bf00      	nop
 8003584:	200002b8 	.word	0x200002b8

08003588 <__malloc_unlock>:
 8003588:	4801      	ldr	r0, [pc, #4]	; (8003590 <__malloc_unlock+0x8>)
 800358a:	f7ff bf0a 	b.w	80033a2 <__retarget_lock_release_recursive>
 800358e:	bf00      	nop
 8003590:	200002b8 	.word	0x200002b8

08003594 <__ssputs_r>:
 8003594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003598:	688e      	ldr	r6, [r1, #8]
 800359a:	461f      	mov	r7, r3
 800359c:	42be      	cmp	r6, r7
 800359e:	680b      	ldr	r3, [r1, #0]
 80035a0:	4682      	mov	sl, r0
 80035a2:	460c      	mov	r4, r1
 80035a4:	4690      	mov	r8, r2
 80035a6:	d82c      	bhi.n	8003602 <__ssputs_r+0x6e>
 80035a8:	898a      	ldrh	r2, [r1, #12]
 80035aa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80035ae:	d026      	beq.n	80035fe <__ssputs_r+0x6a>
 80035b0:	6965      	ldr	r5, [r4, #20]
 80035b2:	6909      	ldr	r1, [r1, #16]
 80035b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80035b8:	eba3 0901 	sub.w	r9, r3, r1
 80035bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80035c0:	1c7b      	adds	r3, r7, #1
 80035c2:	444b      	add	r3, r9
 80035c4:	106d      	asrs	r5, r5, #1
 80035c6:	429d      	cmp	r5, r3
 80035c8:	bf38      	it	cc
 80035ca:	461d      	movcc	r5, r3
 80035cc:	0553      	lsls	r3, r2, #21
 80035ce:	d527      	bpl.n	8003620 <__ssputs_r+0x8c>
 80035d0:	4629      	mov	r1, r5
 80035d2:	f7ff ff53 	bl	800347c <_malloc_r>
 80035d6:	4606      	mov	r6, r0
 80035d8:	b360      	cbz	r0, 8003634 <__ssputs_r+0xa0>
 80035da:	6921      	ldr	r1, [r4, #16]
 80035dc:	464a      	mov	r2, r9
 80035de:	f000 faeb 	bl	8003bb8 <memcpy>
 80035e2:	89a3      	ldrh	r3, [r4, #12]
 80035e4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80035e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035ec:	81a3      	strh	r3, [r4, #12]
 80035ee:	6126      	str	r6, [r4, #16]
 80035f0:	6165      	str	r5, [r4, #20]
 80035f2:	444e      	add	r6, r9
 80035f4:	eba5 0509 	sub.w	r5, r5, r9
 80035f8:	6026      	str	r6, [r4, #0]
 80035fa:	60a5      	str	r5, [r4, #8]
 80035fc:	463e      	mov	r6, r7
 80035fe:	42be      	cmp	r6, r7
 8003600:	d900      	bls.n	8003604 <__ssputs_r+0x70>
 8003602:	463e      	mov	r6, r7
 8003604:	6820      	ldr	r0, [r4, #0]
 8003606:	4632      	mov	r2, r6
 8003608:	4641      	mov	r1, r8
 800360a:	f000 faab 	bl	8003b64 <memmove>
 800360e:	68a3      	ldr	r3, [r4, #8]
 8003610:	1b9b      	subs	r3, r3, r6
 8003612:	60a3      	str	r3, [r4, #8]
 8003614:	6823      	ldr	r3, [r4, #0]
 8003616:	4433      	add	r3, r6
 8003618:	6023      	str	r3, [r4, #0]
 800361a:	2000      	movs	r0, #0
 800361c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003620:	462a      	mov	r2, r5
 8003622:	f000 fad7 	bl	8003bd4 <_realloc_r>
 8003626:	4606      	mov	r6, r0
 8003628:	2800      	cmp	r0, #0
 800362a:	d1e0      	bne.n	80035ee <__ssputs_r+0x5a>
 800362c:	6921      	ldr	r1, [r4, #16]
 800362e:	4650      	mov	r0, sl
 8003630:	f7ff feb8 	bl	80033a4 <_free_r>
 8003634:	230c      	movs	r3, #12
 8003636:	f8ca 3000 	str.w	r3, [sl]
 800363a:	89a3      	ldrh	r3, [r4, #12]
 800363c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003640:	81a3      	strh	r3, [r4, #12]
 8003642:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003646:	e7e9      	b.n	800361c <__ssputs_r+0x88>

08003648 <_svfiprintf_r>:
 8003648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800364c:	4698      	mov	r8, r3
 800364e:	898b      	ldrh	r3, [r1, #12]
 8003650:	061b      	lsls	r3, r3, #24
 8003652:	b09d      	sub	sp, #116	; 0x74
 8003654:	4607      	mov	r7, r0
 8003656:	460d      	mov	r5, r1
 8003658:	4614      	mov	r4, r2
 800365a:	d50e      	bpl.n	800367a <_svfiprintf_r+0x32>
 800365c:	690b      	ldr	r3, [r1, #16]
 800365e:	b963      	cbnz	r3, 800367a <_svfiprintf_r+0x32>
 8003660:	2140      	movs	r1, #64	; 0x40
 8003662:	f7ff ff0b 	bl	800347c <_malloc_r>
 8003666:	6028      	str	r0, [r5, #0]
 8003668:	6128      	str	r0, [r5, #16]
 800366a:	b920      	cbnz	r0, 8003676 <_svfiprintf_r+0x2e>
 800366c:	230c      	movs	r3, #12
 800366e:	603b      	str	r3, [r7, #0]
 8003670:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003674:	e0d0      	b.n	8003818 <_svfiprintf_r+0x1d0>
 8003676:	2340      	movs	r3, #64	; 0x40
 8003678:	616b      	str	r3, [r5, #20]
 800367a:	2300      	movs	r3, #0
 800367c:	9309      	str	r3, [sp, #36]	; 0x24
 800367e:	2320      	movs	r3, #32
 8003680:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003684:	f8cd 800c 	str.w	r8, [sp, #12]
 8003688:	2330      	movs	r3, #48	; 0x30
 800368a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003830 <_svfiprintf_r+0x1e8>
 800368e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003692:	f04f 0901 	mov.w	r9, #1
 8003696:	4623      	mov	r3, r4
 8003698:	469a      	mov	sl, r3
 800369a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800369e:	b10a      	cbz	r2, 80036a4 <_svfiprintf_r+0x5c>
 80036a0:	2a25      	cmp	r2, #37	; 0x25
 80036a2:	d1f9      	bne.n	8003698 <_svfiprintf_r+0x50>
 80036a4:	ebba 0b04 	subs.w	fp, sl, r4
 80036a8:	d00b      	beq.n	80036c2 <_svfiprintf_r+0x7a>
 80036aa:	465b      	mov	r3, fp
 80036ac:	4622      	mov	r2, r4
 80036ae:	4629      	mov	r1, r5
 80036b0:	4638      	mov	r0, r7
 80036b2:	f7ff ff6f 	bl	8003594 <__ssputs_r>
 80036b6:	3001      	adds	r0, #1
 80036b8:	f000 80a9 	beq.w	800380e <_svfiprintf_r+0x1c6>
 80036bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80036be:	445a      	add	r2, fp
 80036c0:	9209      	str	r2, [sp, #36]	; 0x24
 80036c2:	f89a 3000 	ldrb.w	r3, [sl]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f000 80a1 	beq.w	800380e <_svfiprintf_r+0x1c6>
 80036cc:	2300      	movs	r3, #0
 80036ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80036d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036d6:	f10a 0a01 	add.w	sl, sl, #1
 80036da:	9304      	str	r3, [sp, #16]
 80036dc:	9307      	str	r3, [sp, #28]
 80036de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80036e2:	931a      	str	r3, [sp, #104]	; 0x68
 80036e4:	4654      	mov	r4, sl
 80036e6:	2205      	movs	r2, #5
 80036e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036ec:	4850      	ldr	r0, [pc, #320]	; (8003830 <_svfiprintf_r+0x1e8>)
 80036ee:	f7fc fd77 	bl	80001e0 <memchr>
 80036f2:	9a04      	ldr	r2, [sp, #16]
 80036f4:	b9d8      	cbnz	r0, 800372e <_svfiprintf_r+0xe6>
 80036f6:	06d0      	lsls	r0, r2, #27
 80036f8:	bf44      	itt	mi
 80036fa:	2320      	movmi	r3, #32
 80036fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003700:	0711      	lsls	r1, r2, #28
 8003702:	bf44      	itt	mi
 8003704:	232b      	movmi	r3, #43	; 0x2b
 8003706:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800370a:	f89a 3000 	ldrb.w	r3, [sl]
 800370e:	2b2a      	cmp	r3, #42	; 0x2a
 8003710:	d015      	beq.n	800373e <_svfiprintf_r+0xf6>
 8003712:	9a07      	ldr	r2, [sp, #28]
 8003714:	4654      	mov	r4, sl
 8003716:	2000      	movs	r0, #0
 8003718:	f04f 0c0a 	mov.w	ip, #10
 800371c:	4621      	mov	r1, r4
 800371e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003722:	3b30      	subs	r3, #48	; 0x30
 8003724:	2b09      	cmp	r3, #9
 8003726:	d94d      	bls.n	80037c4 <_svfiprintf_r+0x17c>
 8003728:	b1b0      	cbz	r0, 8003758 <_svfiprintf_r+0x110>
 800372a:	9207      	str	r2, [sp, #28]
 800372c:	e014      	b.n	8003758 <_svfiprintf_r+0x110>
 800372e:	eba0 0308 	sub.w	r3, r0, r8
 8003732:	fa09 f303 	lsl.w	r3, r9, r3
 8003736:	4313      	orrs	r3, r2
 8003738:	9304      	str	r3, [sp, #16]
 800373a:	46a2      	mov	sl, r4
 800373c:	e7d2      	b.n	80036e4 <_svfiprintf_r+0x9c>
 800373e:	9b03      	ldr	r3, [sp, #12]
 8003740:	1d19      	adds	r1, r3, #4
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	9103      	str	r1, [sp, #12]
 8003746:	2b00      	cmp	r3, #0
 8003748:	bfbb      	ittet	lt
 800374a:	425b      	neglt	r3, r3
 800374c:	f042 0202 	orrlt.w	r2, r2, #2
 8003750:	9307      	strge	r3, [sp, #28]
 8003752:	9307      	strlt	r3, [sp, #28]
 8003754:	bfb8      	it	lt
 8003756:	9204      	strlt	r2, [sp, #16]
 8003758:	7823      	ldrb	r3, [r4, #0]
 800375a:	2b2e      	cmp	r3, #46	; 0x2e
 800375c:	d10c      	bne.n	8003778 <_svfiprintf_r+0x130>
 800375e:	7863      	ldrb	r3, [r4, #1]
 8003760:	2b2a      	cmp	r3, #42	; 0x2a
 8003762:	d134      	bne.n	80037ce <_svfiprintf_r+0x186>
 8003764:	9b03      	ldr	r3, [sp, #12]
 8003766:	1d1a      	adds	r2, r3, #4
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	9203      	str	r2, [sp, #12]
 800376c:	2b00      	cmp	r3, #0
 800376e:	bfb8      	it	lt
 8003770:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003774:	3402      	adds	r4, #2
 8003776:	9305      	str	r3, [sp, #20]
 8003778:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003840 <_svfiprintf_r+0x1f8>
 800377c:	7821      	ldrb	r1, [r4, #0]
 800377e:	2203      	movs	r2, #3
 8003780:	4650      	mov	r0, sl
 8003782:	f7fc fd2d 	bl	80001e0 <memchr>
 8003786:	b138      	cbz	r0, 8003798 <_svfiprintf_r+0x150>
 8003788:	9b04      	ldr	r3, [sp, #16]
 800378a:	eba0 000a 	sub.w	r0, r0, sl
 800378e:	2240      	movs	r2, #64	; 0x40
 8003790:	4082      	lsls	r2, r0
 8003792:	4313      	orrs	r3, r2
 8003794:	3401      	adds	r4, #1
 8003796:	9304      	str	r3, [sp, #16]
 8003798:	f814 1b01 	ldrb.w	r1, [r4], #1
 800379c:	4825      	ldr	r0, [pc, #148]	; (8003834 <_svfiprintf_r+0x1ec>)
 800379e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80037a2:	2206      	movs	r2, #6
 80037a4:	f7fc fd1c 	bl	80001e0 <memchr>
 80037a8:	2800      	cmp	r0, #0
 80037aa:	d038      	beq.n	800381e <_svfiprintf_r+0x1d6>
 80037ac:	4b22      	ldr	r3, [pc, #136]	; (8003838 <_svfiprintf_r+0x1f0>)
 80037ae:	bb1b      	cbnz	r3, 80037f8 <_svfiprintf_r+0x1b0>
 80037b0:	9b03      	ldr	r3, [sp, #12]
 80037b2:	3307      	adds	r3, #7
 80037b4:	f023 0307 	bic.w	r3, r3, #7
 80037b8:	3308      	adds	r3, #8
 80037ba:	9303      	str	r3, [sp, #12]
 80037bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037be:	4433      	add	r3, r6
 80037c0:	9309      	str	r3, [sp, #36]	; 0x24
 80037c2:	e768      	b.n	8003696 <_svfiprintf_r+0x4e>
 80037c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80037c8:	460c      	mov	r4, r1
 80037ca:	2001      	movs	r0, #1
 80037cc:	e7a6      	b.n	800371c <_svfiprintf_r+0xd4>
 80037ce:	2300      	movs	r3, #0
 80037d0:	3401      	adds	r4, #1
 80037d2:	9305      	str	r3, [sp, #20]
 80037d4:	4619      	mov	r1, r3
 80037d6:	f04f 0c0a 	mov.w	ip, #10
 80037da:	4620      	mov	r0, r4
 80037dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037e0:	3a30      	subs	r2, #48	; 0x30
 80037e2:	2a09      	cmp	r2, #9
 80037e4:	d903      	bls.n	80037ee <_svfiprintf_r+0x1a6>
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d0c6      	beq.n	8003778 <_svfiprintf_r+0x130>
 80037ea:	9105      	str	r1, [sp, #20]
 80037ec:	e7c4      	b.n	8003778 <_svfiprintf_r+0x130>
 80037ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80037f2:	4604      	mov	r4, r0
 80037f4:	2301      	movs	r3, #1
 80037f6:	e7f0      	b.n	80037da <_svfiprintf_r+0x192>
 80037f8:	ab03      	add	r3, sp, #12
 80037fa:	9300      	str	r3, [sp, #0]
 80037fc:	462a      	mov	r2, r5
 80037fe:	4b0f      	ldr	r3, [pc, #60]	; (800383c <_svfiprintf_r+0x1f4>)
 8003800:	a904      	add	r1, sp, #16
 8003802:	4638      	mov	r0, r7
 8003804:	f3af 8000 	nop.w
 8003808:	1c42      	adds	r2, r0, #1
 800380a:	4606      	mov	r6, r0
 800380c:	d1d6      	bne.n	80037bc <_svfiprintf_r+0x174>
 800380e:	89ab      	ldrh	r3, [r5, #12]
 8003810:	065b      	lsls	r3, r3, #25
 8003812:	f53f af2d 	bmi.w	8003670 <_svfiprintf_r+0x28>
 8003816:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003818:	b01d      	add	sp, #116	; 0x74
 800381a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800381e:	ab03      	add	r3, sp, #12
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	462a      	mov	r2, r5
 8003824:	4b05      	ldr	r3, [pc, #20]	; (800383c <_svfiprintf_r+0x1f4>)
 8003826:	a904      	add	r1, sp, #16
 8003828:	4638      	mov	r0, r7
 800382a:	f000 f879 	bl	8003920 <_printf_i>
 800382e:	e7eb      	b.n	8003808 <_svfiprintf_r+0x1c0>
 8003830:	08003cb8 	.word	0x08003cb8
 8003834:	08003cc2 	.word	0x08003cc2
 8003838:	00000000 	.word	0x00000000
 800383c:	08003595 	.word	0x08003595
 8003840:	08003cbe 	.word	0x08003cbe

08003844 <_printf_common>:
 8003844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003848:	4616      	mov	r6, r2
 800384a:	4699      	mov	r9, r3
 800384c:	688a      	ldr	r2, [r1, #8]
 800384e:	690b      	ldr	r3, [r1, #16]
 8003850:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003854:	4293      	cmp	r3, r2
 8003856:	bfb8      	it	lt
 8003858:	4613      	movlt	r3, r2
 800385a:	6033      	str	r3, [r6, #0]
 800385c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003860:	4607      	mov	r7, r0
 8003862:	460c      	mov	r4, r1
 8003864:	b10a      	cbz	r2, 800386a <_printf_common+0x26>
 8003866:	3301      	adds	r3, #1
 8003868:	6033      	str	r3, [r6, #0]
 800386a:	6823      	ldr	r3, [r4, #0]
 800386c:	0699      	lsls	r1, r3, #26
 800386e:	bf42      	ittt	mi
 8003870:	6833      	ldrmi	r3, [r6, #0]
 8003872:	3302      	addmi	r3, #2
 8003874:	6033      	strmi	r3, [r6, #0]
 8003876:	6825      	ldr	r5, [r4, #0]
 8003878:	f015 0506 	ands.w	r5, r5, #6
 800387c:	d106      	bne.n	800388c <_printf_common+0x48>
 800387e:	f104 0a19 	add.w	sl, r4, #25
 8003882:	68e3      	ldr	r3, [r4, #12]
 8003884:	6832      	ldr	r2, [r6, #0]
 8003886:	1a9b      	subs	r3, r3, r2
 8003888:	42ab      	cmp	r3, r5
 800388a:	dc26      	bgt.n	80038da <_printf_common+0x96>
 800388c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003890:	1e13      	subs	r3, r2, #0
 8003892:	6822      	ldr	r2, [r4, #0]
 8003894:	bf18      	it	ne
 8003896:	2301      	movne	r3, #1
 8003898:	0692      	lsls	r2, r2, #26
 800389a:	d42b      	bmi.n	80038f4 <_printf_common+0xb0>
 800389c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038a0:	4649      	mov	r1, r9
 80038a2:	4638      	mov	r0, r7
 80038a4:	47c0      	blx	r8
 80038a6:	3001      	adds	r0, #1
 80038a8:	d01e      	beq.n	80038e8 <_printf_common+0xa4>
 80038aa:	6823      	ldr	r3, [r4, #0]
 80038ac:	6922      	ldr	r2, [r4, #16]
 80038ae:	f003 0306 	and.w	r3, r3, #6
 80038b2:	2b04      	cmp	r3, #4
 80038b4:	bf02      	ittt	eq
 80038b6:	68e5      	ldreq	r5, [r4, #12]
 80038b8:	6833      	ldreq	r3, [r6, #0]
 80038ba:	1aed      	subeq	r5, r5, r3
 80038bc:	68a3      	ldr	r3, [r4, #8]
 80038be:	bf0c      	ite	eq
 80038c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038c4:	2500      	movne	r5, #0
 80038c6:	4293      	cmp	r3, r2
 80038c8:	bfc4      	itt	gt
 80038ca:	1a9b      	subgt	r3, r3, r2
 80038cc:	18ed      	addgt	r5, r5, r3
 80038ce:	2600      	movs	r6, #0
 80038d0:	341a      	adds	r4, #26
 80038d2:	42b5      	cmp	r5, r6
 80038d4:	d11a      	bne.n	800390c <_printf_common+0xc8>
 80038d6:	2000      	movs	r0, #0
 80038d8:	e008      	b.n	80038ec <_printf_common+0xa8>
 80038da:	2301      	movs	r3, #1
 80038dc:	4652      	mov	r2, sl
 80038de:	4649      	mov	r1, r9
 80038e0:	4638      	mov	r0, r7
 80038e2:	47c0      	blx	r8
 80038e4:	3001      	adds	r0, #1
 80038e6:	d103      	bne.n	80038f0 <_printf_common+0xac>
 80038e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038f0:	3501      	adds	r5, #1
 80038f2:	e7c6      	b.n	8003882 <_printf_common+0x3e>
 80038f4:	18e1      	adds	r1, r4, r3
 80038f6:	1c5a      	adds	r2, r3, #1
 80038f8:	2030      	movs	r0, #48	; 0x30
 80038fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80038fe:	4422      	add	r2, r4
 8003900:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003904:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003908:	3302      	adds	r3, #2
 800390a:	e7c7      	b.n	800389c <_printf_common+0x58>
 800390c:	2301      	movs	r3, #1
 800390e:	4622      	mov	r2, r4
 8003910:	4649      	mov	r1, r9
 8003912:	4638      	mov	r0, r7
 8003914:	47c0      	blx	r8
 8003916:	3001      	adds	r0, #1
 8003918:	d0e6      	beq.n	80038e8 <_printf_common+0xa4>
 800391a:	3601      	adds	r6, #1
 800391c:	e7d9      	b.n	80038d2 <_printf_common+0x8e>
	...

08003920 <_printf_i>:
 8003920:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003924:	7e0f      	ldrb	r7, [r1, #24]
 8003926:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003928:	2f78      	cmp	r7, #120	; 0x78
 800392a:	4691      	mov	r9, r2
 800392c:	4680      	mov	r8, r0
 800392e:	460c      	mov	r4, r1
 8003930:	469a      	mov	sl, r3
 8003932:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003936:	d807      	bhi.n	8003948 <_printf_i+0x28>
 8003938:	2f62      	cmp	r7, #98	; 0x62
 800393a:	d80a      	bhi.n	8003952 <_printf_i+0x32>
 800393c:	2f00      	cmp	r7, #0
 800393e:	f000 80d4 	beq.w	8003aea <_printf_i+0x1ca>
 8003942:	2f58      	cmp	r7, #88	; 0x58
 8003944:	f000 80c0 	beq.w	8003ac8 <_printf_i+0x1a8>
 8003948:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800394c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003950:	e03a      	b.n	80039c8 <_printf_i+0xa8>
 8003952:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003956:	2b15      	cmp	r3, #21
 8003958:	d8f6      	bhi.n	8003948 <_printf_i+0x28>
 800395a:	a101      	add	r1, pc, #4	; (adr r1, 8003960 <_printf_i+0x40>)
 800395c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003960:	080039b9 	.word	0x080039b9
 8003964:	080039cd 	.word	0x080039cd
 8003968:	08003949 	.word	0x08003949
 800396c:	08003949 	.word	0x08003949
 8003970:	08003949 	.word	0x08003949
 8003974:	08003949 	.word	0x08003949
 8003978:	080039cd 	.word	0x080039cd
 800397c:	08003949 	.word	0x08003949
 8003980:	08003949 	.word	0x08003949
 8003984:	08003949 	.word	0x08003949
 8003988:	08003949 	.word	0x08003949
 800398c:	08003ad1 	.word	0x08003ad1
 8003990:	080039f9 	.word	0x080039f9
 8003994:	08003a8b 	.word	0x08003a8b
 8003998:	08003949 	.word	0x08003949
 800399c:	08003949 	.word	0x08003949
 80039a0:	08003af3 	.word	0x08003af3
 80039a4:	08003949 	.word	0x08003949
 80039a8:	080039f9 	.word	0x080039f9
 80039ac:	08003949 	.word	0x08003949
 80039b0:	08003949 	.word	0x08003949
 80039b4:	08003a93 	.word	0x08003a93
 80039b8:	682b      	ldr	r3, [r5, #0]
 80039ba:	1d1a      	adds	r2, r3, #4
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	602a      	str	r2, [r5, #0]
 80039c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039c8:	2301      	movs	r3, #1
 80039ca:	e09f      	b.n	8003b0c <_printf_i+0x1ec>
 80039cc:	6820      	ldr	r0, [r4, #0]
 80039ce:	682b      	ldr	r3, [r5, #0]
 80039d0:	0607      	lsls	r7, r0, #24
 80039d2:	f103 0104 	add.w	r1, r3, #4
 80039d6:	6029      	str	r1, [r5, #0]
 80039d8:	d501      	bpl.n	80039de <_printf_i+0xbe>
 80039da:	681e      	ldr	r6, [r3, #0]
 80039dc:	e003      	b.n	80039e6 <_printf_i+0xc6>
 80039de:	0646      	lsls	r6, r0, #25
 80039e0:	d5fb      	bpl.n	80039da <_printf_i+0xba>
 80039e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80039e6:	2e00      	cmp	r6, #0
 80039e8:	da03      	bge.n	80039f2 <_printf_i+0xd2>
 80039ea:	232d      	movs	r3, #45	; 0x2d
 80039ec:	4276      	negs	r6, r6
 80039ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80039f2:	485a      	ldr	r0, [pc, #360]	; (8003b5c <_printf_i+0x23c>)
 80039f4:	230a      	movs	r3, #10
 80039f6:	e012      	b.n	8003a1e <_printf_i+0xfe>
 80039f8:	682b      	ldr	r3, [r5, #0]
 80039fa:	6820      	ldr	r0, [r4, #0]
 80039fc:	1d19      	adds	r1, r3, #4
 80039fe:	6029      	str	r1, [r5, #0]
 8003a00:	0605      	lsls	r5, r0, #24
 8003a02:	d501      	bpl.n	8003a08 <_printf_i+0xe8>
 8003a04:	681e      	ldr	r6, [r3, #0]
 8003a06:	e002      	b.n	8003a0e <_printf_i+0xee>
 8003a08:	0641      	lsls	r1, r0, #25
 8003a0a:	d5fb      	bpl.n	8003a04 <_printf_i+0xe4>
 8003a0c:	881e      	ldrh	r6, [r3, #0]
 8003a0e:	4853      	ldr	r0, [pc, #332]	; (8003b5c <_printf_i+0x23c>)
 8003a10:	2f6f      	cmp	r7, #111	; 0x6f
 8003a12:	bf0c      	ite	eq
 8003a14:	2308      	moveq	r3, #8
 8003a16:	230a      	movne	r3, #10
 8003a18:	2100      	movs	r1, #0
 8003a1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a1e:	6865      	ldr	r5, [r4, #4]
 8003a20:	60a5      	str	r5, [r4, #8]
 8003a22:	2d00      	cmp	r5, #0
 8003a24:	bfa2      	ittt	ge
 8003a26:	6821      	ldrge	r1, [r4, #0]
 8003a28:	f021 0104 	bicge.w	r1, r1, #4
 8003a2c:	6021      	strge	r1, [r4, #0]
 8003a2e:	b90e      	cbnz	r6, 8003a34 <_printf_i+0x114>
 8003a30:	2d00      	cmp	r5, #0
 8003a32:	d04b      	beq.n	8003acc <_printf_i+0x1ac>
 8003a34:	4615      	mov	r5, r2
 8003a36:	fbb6 f1f3 	udiv	r1, r6, r3
 8003a3a:	fb03 6711 	mls	r7, r3, r1, r6
 8003a3e:	5dc7      	ldrb	r7, [r0, r7]
 8003a40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003a44:	4637      	mov	r7, r6
 8003a46:	42bb      	cmp	r3, r7
 8003a48:	460e      	mov	r6, r1
 8003a4a:	d9f4      	bls.n	8003a36 <_printf_i+0x116>
 8003a4c:	2b08      	cmp	r3, #8
 8003a4e:	d10b      	bne.n	8003a68 <_printf_i+0x148>
 8003a50:	6823      	ldr	r3, [r4, #0]
 8003a52:	07de      	lsls	r6, r3, #31
 8003a54:	d508      	bpl.n	8003a68 <_printf_i+0x148>
 8003a56:	6923      	ldr	r3, [r4, #16]
 8003a58:	6861      	ldr	r1, [r4, #4]
 8003a5a:	4299      	cmp	r1, r3
 8003a5c:	bfde      	ittt	le
 8003a5e:	2330      	movle	r3, #48	; 0x30
 8003a60:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003a64:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003a68:	1b52      	subs	r2, r2, r5
 8003a6a:	6122      	str	r2, [r4, #16]
 8003a6c:	f8cd a000 	str.w	sl, [sp]
 8003a70:	464b      	mov	r3, r9
 8003a72:	aa03      	add	r2, sp, #12
 8003a74:	4621      	mov	r1, r4
 8003a76:	4640      	mov	r0, r8
 8003a78:	f7ff fee4 	bl	8003844 <_printf_common>
 8003a7c:	3001      	adds	r0, #1
 8003a7e:	d14a      	bne.n	8003b16 <_printf_i+0x1f6>
 8003a80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a84:	b004      	add	sp, #16
 8003a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a8a:	6823      	ldr	r3, [r4, #0]
 8003a8c:	f043 0320 	orr.w	r3, r3, #32
 8003a90:	6023      	str	r3, [r4, #0]
 8003a92:	4833      	ldr	r0, [pc, #204]	; (8003b60 <_printf_i+0x240>)
 8003a94:	2778      	movs	r7, #120	; 0x78
 8003a96:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003a9a:	6823      	ldr	r3, [r4, #0]
 8003a9c:	6829      	ldr	r1, [r5, #0]
 8003a9e:	061f      	lsls	r7, r3, #24
 8003aa0:	f851 6b04 	ldr.w	r6, [r1], #4
 8003aa4:	d402      	bmi.n	8003aac <_printf_i+0x18c>
 8003aa6:	065f      	lsls	r7, r3, #25
 8003aa8:	bf48      	it	mi
 8003aaa:	b2b6      	uxthmi	r6, r6
 8003aac:	07df      	lsls	r7, r3, #31
 8003aae:	bf48      	it	mi
 8003ab0:	f043 0320 	orrmi.w	r3, r3, #32
 8003ab4:	6029      	str	r1, [r5, #0]
 8003ab6:	bf48      	it	mi
 8003ab8:	6023      	strmi	r3, [r4, #0]
 8003aba:	b91e      	cbnz	r6, 8003ac4 <_printf_i+0x1a4>
 8003abc:	6823      	ldr	r3, [r4, #0]
 8003abe:	f023 0320 	bic.w	r3, r3, #32
 8003ac2:	6023      	str	r3, [r4, #0]
 8003ac4:	2310      	movs	r3, #16
 8003ac6:	e7a7      	b.n	8003a18 <_printf_i+0xf8>
 8003ac8:	4824      	ldr	r0, [pc, #144]	; (8003b5c <_printf_i+0x23c>)
 8003aca:	e7e4      	b.n	8003a96 <_printf_i+0x176>
 8003acc:	4615      	mov	r5, r2
 8003ace:	e7bd      	b.n	8003a4c <_printf_i+0x12c>
 8003ad0:	682b      	ldr	r3, [r5, #0]
 8003ad2:	6826      	ldr	r6, [r4, #0]
 8003ad4:	6961      	ldr	r1, [r4, #20]
 8003ad6:	1d18      	adds	r0, r3, #4
 8003ad8:	6028      	str	r0, [r5, #0]
 8003ada:	0635      	lsls	r5, r6, #24
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	d501      	bpl.n	8003ae4 <_printf_i+0x1c4>
 8003ae0:	6019      	str	r1, [r3, #0]
 8003ae2:	e002      	b.n	8003aea <_printf_i+0x1ca>
 8003ae4:	0670      	lsls	r0, r6, #25
 8003ae6:	d5fb      	bpl.n	8003ae0 <_printf_i+0x1c0>
 8003ae8:	8019      	strh	r1, [r3, #0]
 8003aea:	2300      	movs	r3, #0
 8003aec:	6123      	str	r3, [r4, #16]
 8003aee:	4615      	mov	r5, r2
 8003af0:	e7bc      	b.n	8003a6c <_printf_i+0x14c>
 8003af2:	682b      	ldr	r3, [r5, #0]
 8003af4:	1d1a      	adds	r2, r3, #4
 8003af6:	602a      	str	r2, [r5, #0]
 8003af8:	681d      	ldr	r5, [r3, #0]
 8003afa:	6862      	ldr	r2, [r4, #4]
 8003afc:	2100      	movs	r1, #0
 8003afe:	4628      	mov	r0, r5
 8003b00:	f7fc fb6e 	bl	80001e0 <memchr>
 8003b04:	b108      	cbz	r0, 8003b0a <_printf_i+0x1ea>
 8003b06:	1b40      	subs	r0, r0, r5
 8003b08:	6060      	str	r0, [r4, #4]
 8003b0a:	6863      	ldr	r3, [r4, #4]
 8003b0c:	6123      	str	r3, [r4, #16]
 8003b0e:	2300      	movs	r3, #0
 8003b10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b14:	e7aa      	b.n	8003a6c <_printf_i+0x14c>
 8003b16:	6923      	ldr	r3, [r4, #16]
 8003b18:	462a      	mov	r2, r5
 8003b1a:	4649      	mov	r1, r9
 8003b1c:	4640      	mov	r0, r8
 8003b1e:	47d0      	blx	sl
 8003b20:	3001      	adds	r0, #1
 8003b22:	d0ad      	beq.n	8003a80 <_printf_i+0x160>
 8003b24:	6823      	ldr	r3, [r4, #0]
 8003b26:	079b      	lsls	r3, r3, #30
 8003b28:	d413      	bmi.n	8003b52 <_printf_i+0x232>
 8003b2a:	68e0      	ldr	r0, [r4, #12]
 8003b2c:	9b03      	ldr	r3, [sp, #12]
 8003b2e:	4298      	cmp	r0, r3
 8003b30:	bfb8      	it	lt
 8003b32:	4618      	movlt	r0, r3
 8003b34:	e7a6      	b.n	8003a84 <_printf_i+0x164>
 8003b36:	2301      	movs	r3, #1
 8003b38:	4632      	mov	r2, r6
 8003b3a:	4649      	mov	r1, r9
 8003b3c:	4640      	mov	r0, r8
 8003b3e:	47d0      	blx	sl
 8003b40:	3001      	adds	r0, #1
 8003b42:	d09d      	beq.n	8003a80 <_printf_i+0x160>
 8003b44:	3501      	adds	r5, #1
 8003b46:	68e3      	ldr	r3, [r4, #12]
 8003b48:	9903      	ldr	r1, [sp, #12]
 8003b4a:	1a5b      	subs	r3, r3, r1
 8003b4c:	42ab      	cmp	r3, r5
 8003b4e:	dcf2      	bgt.n	8003b36 <_printf_i+0x216>
 8003b50:	e7eb      	b.n	8003b2a <_printf_i+0x20a>
 8003b52:	2500      	movs	r5, #0
 8003b54:	f104 0619 	add.w	r6, r4, #25
 8003b58:	e7f5      	b.n	8003b46 <_printf_i+0x226>
 8003b5a:	bf00      	nop
 8003b5c:	08003cc9 	.word	0x08003cc9
 8003b60:	08003cda 	.word	0x08003cda

08003b64 <memmove>:
 8003b64:	4288      	cmp	r0, r1
 8003b66:	b510      	push	{r4, lr}
 8003b68:	eb01 0402 	add.w	r4, r1, r2
 8003b6c:	d902      	bls.n	8003b74 <memmove+0x10>
 8003b6e:	4284      	cmp	r4, r0
 8003b70:	4623      	mov	r3, r4
 8003b72:	d807      	bhi.n	8003b84 <memmove+0x20>
 8003b74:	1e43      	subs	r3, r0, #1
 8003b76:	42a1      	cmp	r1, r4
 8003b78:	d008      	beq.n	8003b8c <memmove+0x28>
 8003b7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003b7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003b82:	e7f8      	b.n	8003b76 <memmove+0x12>
 8003b84:	4402      	add	r2, r0
 8003b86:	4601      	mov	r1, r0
 8003b88:	428a      	cmp	r2, r1
 8003b8a:	d100      	bne.n	8003b8e <memmove+0x2a>
 8003b8c:	bd10      	pop	{r4, pc}
 8003b8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003b96:	e7f7      	b.n	8003b88 <memmove+0x24>

08003b98 <_sbrk_r>:
 8003b98:	b538      	push	{r3, r4, r5, lr}
 8003b9a:	4d06      	ldr	r5, [pc, #24]	; (8003bb4 <_sbrk_r+0x1c>)
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	4604      	mov	r4, r0
 8003ba0:	4608      	mov	r0, r1
 8003ba2:	602b      	str	r3, [r5, #0]
 8003ba4:	f7fc fd7c 	bl	80006a0 <_sbrk>
 8003ba8:	1c43      	adds	r3, r0, #1
 8003baa:	d102      	bne.n	8003bb2 <_sbrk_r+0x1a>
 8003bac:	682b      	ldr	r3, [r5, #0]
 8003bae:	b103      	cbz	r3, 8003bb2 <_sbrk_r+0x1a>
 8003bb0:	6023      	str	r3, [r4, #0]
 8003bb2:	bd38      	pop	{r3, r4, r5, pc}
 8003bb4:	200002b4 	.word	0x200002b4

08003bb8 <memcpy>:
 8003bb8:	440a      	add	r2, r1
 8003bba:	4291      	cmp	r1, r2
 8003bbc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003bc0:	d100      	bne.n	8003bc4 <memcpy+0xc>
 8003bc2:	4770      	bx	lr
 8003bc4:	b510      	push	{r4, lr}
 8003bc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003bca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003bce:	4291      	cmp	r1, r2
 8003bd0:	d1f9      	bne.n	8003bc6 <memcpy+0xe>
 8003bd2:	bd10      	pop	{r4, pc}

08003bd4 <_realloc_r>:
 8003bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bd8:	4680      	mov	r8, r0
 8003bda:	4614      	mov	r4, r2
 8003bdc:	460e      	mov	r6, r1
 8003bde:	b921      	cbnz	r1, 8003bea <_realloc_r+0x16>
 8003be0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003be4:	4611      	mov	r1, r2
 8003be6:	f7ff bc49 	b.w	800347c <_malloc_r>
 8003bea:	b92a      	cbnz	r2, 8003bf8 <_realloc_r+0x24>
 8003bec:	f7ff fbda 	bl	80033a4 <_free_r>
 8003bf0:	4625      	mov	r5, r4
 8003bf2:	4628      	mov	r0, r5
 8003bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003bf8:	f000 f81b 	bl	8003c32 <_malloc_usable_size_r>
 8003bfc:	4284      	cmp	r4, r0
 8003bfe:	4607      	mov	r7, r0
 8003c00:	d802      	bhi.n	8003c08 <_realloc_r+0x34>
 8003c02:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003c06:	d812      	bhi.n	8003c2e <_realloc_r+0x5a>
 8003c08:	4621      	mov	r1, r4
 8003c0a:	4640      	mov	r0, r8
 8003c0c:	f7ff fc36 	bl	800347c <_malloc_r>
 8003c10:	4605      	mov	r5, r0
 8003c12:	2800      	cmp	r0, #0
 8003c14:	d0ed      	beq.n	8003bf2 <_realloc_r+0x1e>
 8003c16:	42bc      	cmp	r4, r7
 8003c18:	4622      	mov	r2, r4
 8003c1a:	4631      	mov	r1, r6
 8003c1c:	bf28      	it	cs
 8003c1e:	463a      	movcs	r2, r7
 8003c20:	f7ff ffca 	bl	8003bb8 <memcpy>
 8003c24:	4631      	mov	r1, r6
 8003c26:	4640      	mov	r0, r8
 8003c28:	f7ff fbbc 	bl	80033a4 <_free_r>
 8003c2c:	e7e1      	b.n	8003bf2 <_realloc_r+0x1e>
 8003c2e:	4635      	mov	r5, r6
 8003c30:	e7df      	b.n	8003bf2 <_realloc_r+0x1e>

08003c32 <_malloc_usable_size_r>:
 8003c32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c36:	1f18      	subs	r0, r3, #4
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	bfbc      	itt	lt
 8003c3c:	580b      	ldrlt	r3, [r1, r0]
 8003c3e:	18c0      	addlt	r0, r0, r3
 8003c40:	4770      	bx	lr
	...

08003c44 <_init>:
 8003c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c46:	bf00      	nop
 8003c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c4a:	bc08      	pop	{r3}
 8003c4c:	469e      	mov	lr, r3
 8003c4e:	4770      	bx	lr

08003c50 <_fini>:
 8003c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c52:	bf00      	nop
 8003c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c56:	bc08      	pop	{r3}
 8003c58:	469e      	mov	lr, r3
 8003c5a:	4770      	bx	lr
