
03_TIMER_INTERRUPT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029fc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002b84  08002b84  00012b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bb4  08002bb4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002bb4  08002bb4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002bb4  08002bb4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bb4  08002bb4  00012bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bb8  08002bb8  00012bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002bbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000006c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000078  20000078  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000943a  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000017c4  00000000  00000000  000294b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000980  00000000  00000000  0002ac80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000753  00000000  00000000  0002b600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001ebbc  00000000  00000000  0002bd53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000adf4  00000000  00000000  0004a90f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000bab35  00000000  00000000  00055703  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002724  00000000  00000000  00110238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  0011295c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002b6c 	.word	0x08002b6c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002b6c 	.word	0x08002b6c

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 f9ca 	bl	8000564 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f805 	bl	80001de <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f8b6 	bl	8000344 <MX_GPIO_Init>
  MX_TIM1_Init();
 80001d8:	f000 f85c 	bl	8000294 <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001dc:	e7fe      	b.n	80001dc <main+0x14>

080001de <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001de:	b580      	push	{r7, lr}
 80001e0:	b096      	sub	sp, #88	; 0x58
 80001e2:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80001e8:	2228      	movs	r2, #40	; 0x28
 80001ea:	2100      	movs	r1, #0
 80001ec:	4618      	mov	r0, r3
 80001ee:	f002 fc91 	bl	8002b14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001f2:	f107 031c 	add.w	r3, r7, #28
 80001f6:	2200      	movs	r2, #0
 80001f8:	601a      	str	r2, [r3, #0]
 80001fa:	605a      	str	r2, [r3, #4]
 80001fc:	609a      	str	r2, [r3, #8]
 80001fe:	60da      	str	r2, [r3, #12]
 8000200:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000202:	463b      	mov	r3, r7
 8000204:	2200      	movs	r2, #0
 8000206:	601a      	str	r2, [r3, #0]
 8000208:	605a      	str	r2, [r3, #4]
 800020a:	609a      	str	r2, [r3, #8]
 800020c:	60da      	str	r2, [r3, #12]
 800020e:	611a      	str	r2, [r3, #16]
 8000210:	615a      	str	r2, [r3, #20]
 8000212:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000214:	2302      	movs	r3, #2
 8000216:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000218:	2301      	movs	r3, #1
 800021a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800021c:	2310      	movs	r3, #16
 800021e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000220:	2302      	movs	r3, #2
 8000222:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000224:	2300      	movs	r3, #0
 8000226:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000228:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800022c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800022e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000232:	4618      	mov	r0, r3
 8000234:	f000 fcb2 	bl	8000b9c <HAL_RCC_OscConfig>
 8000238:	4603      	mov	r3, r0
 800023a:	2b00      	cmp	r3, #0
 800023c:	d001      	beq.n	8000242 <SystemClock_Config+0x64>
  {
    Error_Handler();
 800023e:	f000 f8d1 	bl	80003e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000242:	230f      	movs	r3, #15
 8000244:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000246:	2302      	movs	r3, #2
 8000248:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800024a:	2300      	movs	r3, #0
 800024c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800024e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000252:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000254:	2300      	movs	r3, #0
 8000256:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000258:	f107 031c 	add.w	r3, r7, #28
 800025c:	2102      	movs	r1, #2
 800025e:	4618      	mov	r0, r3
 8000260:	f001 fcda 	bl	8001c18 <HAL_RCC_ClockConfig>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <SystemClock_Config+0x90>
  {
    Error_Handler();
 800026a:	f000 f8bb 	bl	80003e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 800026e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000272:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000274:	2300      	movs	r3, #0
 8000276:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000278:	463b      	mov	r3, r7
 800027a:	4618      	mov	r0, r3
 800027c:	f001 feb2 	bl	8001fe4 <HAL_RCCEx_PeriphCLKConfig>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000286:	f000 f8ad 	bl	80003e4 <Error_Handler>
  }
}
 800028a:	bf00      	nop
 800028c:	3758      	adds	r7, #88	; 0x58
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
	...

08000294 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b088      	sub	sp, #32
 8000298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800029a:	f107 0310 	add.w	r3, r7, #16
 800029e:	2200      	movs	r2, #0
 80002a0:	601a      	str	r2, [r3, #0]
 80002a2:	605a      	str	r2, [r3, #4]
 80002a4:	609a      	str	r2, [r3, #8]
 80002a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002a8:	1d3b      	adds	r3, r7, #4
 80002aa:	2200      	movs	r2, #0
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	605a      	str	r2, [r3, #4]
 80002b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80002b2:	4b22      	ldr	r3, [pc, #136]	; (800033c <MX_TIM1_Init+0xa8>)
 80002b4:	4a22      	ldr	r2, [pc, #136]	; (8000340 <MX_TIM1_Init+0xac>)
 80002b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000;
 80002b8:	4b20      	ldr	r3, [pc, #128]	; (800033c <MX_TIM1_Init+0xa8>)
 80002ba:	f242 7210 	movw	r2, #10000	; 0x2710
 80002be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002c0:	4b1e      	ldr	r3, [pc, #120]	; (800033c <MX_TIM1_Init+0xa8>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 6499;
 80002c6:	4b1d      	ldr	r3, [pc, #116]	; (800033c <MX_TIM1_Init+0xa8>)
 80002c8:	f641 1263 	movw	r2, #6499	; 0x1963
 80002cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002ce:	4b1b      	ldr	r3, [pc, #108]	; (800033c <MX_TIM1_Init+0xa8>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80002d4:	4b19      	ldr	r3, [pc, #100]	; (800033c <MX_TIM1_Init+0xa8>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80002da:	4b18      	ldr	r3, [pc, #96]	; (800033c <MX_TIM1_Init+0xa8>)
 80002dc:	2280      	movs	r2, #128	; 0x80
 80002de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80002e0:	4816      	ldr	r0, [pc, #88]	; (800033c <MX_TIM1_Init+0xa8>)
 80002e2:	f001 ffb5 	bl	8002250 <HAL_TIM_Base_Init>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80002ec:	f000 f87a 	bl	80003e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80002f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80002f6:	f107 0310 	add.w	r3, r7, #16
 80002fa:	4619      	mov	r1, r3
 80002fc:	480f      	ldr	r0, [pc, #60]	; (800033c <MX_TIM1_Init+0xa8>)
 80002fe:	f002 f97a 	bl	80025f6 <HAL_TIM_ConfigClockSource>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d001      	beq.n	800030c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000308:	f000 f86c 	bl	80003e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800030c:	2300      	movs	r3, #0
 800030e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000310:	2300      	movs	r3, #0
 8000312:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000314:	2300      	movs	r3, #0
 8000316:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000318:	1d3b      	adds	r3, r7, #4
 800031a:	4619      	mov	r1, r3
 800031c:	4807      	ldr	r0, [pc, #28]	; (800033c <MX_TIM1_Init+0xa8>)
 800031e:	f002 fb6d 	bl	80029fc <HAL_TIMEx_MasterConfigSynchronization>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000328:	f000 f85c 	bl	80003e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 800032c:	4803      	ldr	r0, [pc, #12]	; (800033c <MX_TIM1_Init+0xa8>)
 800032e:	f001 ffe7 	bl	8002300 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM1_Init 2 */

}
 8000332:	bf00      	nop
 8000334:	3720      	adds	r7, #32
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	20000028 	.word	0x20000028
 8000340:	40012c00 	.word	0x40012c00

08000344 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b088      	sub	sp, #32
 8000348:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800034a:	f107 030c 	add.w	r3, r7, #12
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]
 8000358:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800035a:	4b18      	ldr	r3, [pc, #96]	; (80003bc <MX_GPIO_Init+0x78>)
 800035c:	695b      	ldr	r3, [r3, #20]
 800035e:	4a17      	ldr	r2, [pc, #92]	; (80003bc <MX_GPIO_Init+0x78>)
 8000360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000364:	6153      	str	r3, [r2, #20]
 8000366:	4b15      	ldr	r3, [pc, #84]	; (80003bc <MX_GPIO_Init+0x78>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800036e:	60bb      	str	r3, [r7, #8]
 8000370:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000372:	4b12      	ldr	r3, [pc, #72]	; (80003bc <MX_GPIO_Init+0x78>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a11      	ldr	r2, [pc, #68]	; (80003bc <MX_GPIO_Init+0x78>)
 8000378:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b0f      	ldr	r3, [pc, #60]	; (80003bc <MX_GPIO_Init+0x78>)
 8000380:	695b      	ldr	r3, [r3, #20]
 8000382:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000386:	607b      	str	r3, [r7, #4]
 8000388:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(green_GPIO_Port, green_Pin, GPIO_PIN_RESET);
 800038a:	2200      	movs	r2, #0
 800038c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000390:	480b      	ldr	r0, [pc, #44]	; (80003c0 <MX_GPIO_Init+0x7c>)
 8000392:	f000 fbd1 	bl	8000b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : green_Pin */
  GPIO_InitStruct.Pin = green_Pin;
 8000396:	f44f 7300 	mov.w	r3, #512	; 0x200
 800039a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800039c:	2301      	movs	r3, #1
 800039e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a0:	2300      	movs	r3, #0
 80003a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003a4:	2300      	movs	r3, #0
 80003a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(green_GPIO_Port, &GPIO_InitStruct);
 80003a8:	f107 030c 	add.w	r3, r7, #12
 80003ac:	4619      	mov	r1, r3
 80003ae:	4804      	ldr	r0, [pc, #16]	; (80003c0 <MX_GPIO_Init+0x7c>)
 80003b0:	f000 fa50 	bl	8000854 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003b4:	bf00      	nop
 80003b6:	3720      	adds	r7, #32
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	40021000 	.word	0x40021000
 80003c0:	48000400 	.word	0x48000400

080003c4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(green_GPIO_Port, green_Pin);
 80003cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003d0:	4803      	ldr	r0, [pc, #12]	; (80003e0 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80003d2:	f000 fbc9 	bl	8000b68 <HAL_GPIO_TogglePin>
}
 80003d6:	bf00      	nop
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	48000400 	.word	0x48000400

080003e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003e8:	b672      	cpsid	i
}
 80003ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003ec:	e7fe      	b.n	80003ec <Error_Handler+0x8>
	...

080003f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003f6:	4b0f      	ldr	r3, [pc, #60]	; (8000434 <HAL_MspInit+0x44>)
 80003f8:	699b      	ldr	r3, [r3, #24]
 80003fa:	4a0e      	ldr	r2, [pc, #56]	; (8000434 <HAL_MspInit+0x44>)
 80003fc:	f043 0301 	orr.w	r3, r3, #1
 8000400:	6193      	str	r3, [r2, #24]
 8000402:	4b0c      	ldr	r3, [pc, #48]	; (8000434 <HAL_MspInit+0x44>)
 8000404:	699b      	ldr	r3, [r3, #24]
 8000406:	f003 0301 	and.w	r3, r3, #1
 800040a:	607b      	str	r3, [r7, #4]
 800040c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800040e:	4b09      	ldr	r3, [pc, #36]	; (8000434 <HAL_MspInit+0x44>)
 8000410:	69db      	ldr	r3, [r3, #28]
 8000412:	4a08      	ldr	r2, [pc, #32]	; (8000434 <HAL_MspInit+0x44>)
 8000414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000418:	61d3      	str	r3, [r2, #28]
 800041a:	4b06      	ldr	r3, [pc, #24]	; (8000434 <HAL_MspInit+0x44>)
 800041c:	69db      	ldr	r3, [r3, #28]
 800041e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000422:	603b      	str	r3, [r7, #0]
 8000424:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000426:	2007      	movs	r0, #7
 8000428:	f000 f9d2 	bl	80007d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800042c:	bf00      	nop
 800042e:	3708      	adds	r7, #8
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	40021000 	.word	0x40021000

08000438 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b084      	sub	sp, #16
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	4a0d      	ldr	r2, [pc, #52]	; (800047c <HAL_TIM_Base_MspInit+0x44>)
 8000446:	4293      	cmp	r3, r2
 8000448:	d113      	bne.n	8000472 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800044a:	4b0d      	ldr	r3, [pc, #52]	; (8000480 <HAL_TIM_Base_MspInit+0x48>)
 800044c:	699b      	ldr	r3, [r3, #24]
 800044e:	4a0c      	ldr	r2, [pc, #48]	; (8000480 <HAL_TIM_Base_MspInit+0x48>)
 8000450:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000454:	6193      	str	r3, [r2, #24]
 8000456:	4b0a      	ldr	r3, [pc, #40]	; (8000480 <HAL_TIM_Base_MspInit+0x48>)
 8000458:	699b      	ldr	r3, [r3, #24]
 800045a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800045e:	60fb      	str	r3, [r7, #12]
 8000460:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000462:	2200      	movs	r2, #0
 8000464:	2100      	movs	r1, #0
 8000466:	2019      	movs	r0, #25
 8000468:	f000 f9bd 	bl	80007e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800046c:	2019      	movs	r0, #25
 800046e:	f000 f9d6 	bl	800081e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000472:	bf00      	nop
 8000474:	3710      	adds	r7, #16
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	40012c00 	.word	0x40012c00
 8000480:	40021000 	.word	0x40021000

08000484 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000488:	e7fe      	b.n	8000488 <NMI_Handler+0x4>

0800048a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800048a:	b480      	push	{r7}
 800048c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800048e:	e7fe      	b.n	800048e <HardFault_Handler+0x4>

08000490 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000494:	e7fe      	b.n	8000494 <MemManage_Handler+0x4>

08000496 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000496:	b480      	push	{r7}
 8000498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800049a:	e7fe      	b.n	800049a <BusFault_Handler+0x4>

0800049c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004a0:	e7fe      	b.n	80004a0 <UsageFault_Handler+0x4>

080004a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004a2:	b480      	push	{r7}
 80004a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004a6:	bf00      	nop
 80004a8:	46bd      	mov	sp, r7
 80004aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ae:	4770      	bx	lr

080004b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004b4:	bf00      	nop
 80004b6:	46bd      	mov	sp, r7
 80004b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004bc:	4770      	bx	lr

080004be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004be:	b480      	push	{r7}
 80004c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004c2:	bf00      	nop
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr

080004cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004d0:	f000 f88e 	bl	80005f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004d4:	bf00      	nop
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80004dc:	4802      	ldr	r0, [pc, #8]	; (80004e8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80004de:	f001 ff6b 	bl	80023b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	20000028 	.word	0x20000028

080004ec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004f0:	4b06      	ldr	r3, [pc, #24]	; (800050c <SystemInit+0x20>)
 80004f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004f6:	4a05      	ldr	r2, [pc, #20]	; (800050c <SystemInit+0x20>)
 80004f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000500:	bf00      	nop
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	e000ed00 	.word	0xe000ed00

08000510 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000510:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000548 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000514:	f7ff ffea 	bl	80004ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000518:	480c      	ldr	r0, [pc, #48]	; (800054c <LoopForever+0x6>)
  ldr r1, =_edata
 800051a:	490d      	ldr	r1, [pc, #52]	; (8000550 <LoopForever+0xa>)
  ldr r2, =_sidata
 800051c:	4a0d      	ldr	r2, [pc, #52]	; (8000554 <LoopForever+0xe>)
  movs r3, #0
 800051e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000520:	e002      	b.n	8000528 <LoopCopyDataInit>

08000522 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000522:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000524:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000526:	3304      	adds	r3, #4

08000528 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000528:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800052a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800052c:	d3f9      	bcc.n	8000522 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800052e:	4a0a      	ldr	r2, [pc, #40]	; (8000558 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000530:	4c0a      	ldr	r4, [pc, #40]	; (800055c <LoopForever+0x16>)
  movs r3, #0
 8000532:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000534:	e001      	b.n	800053a <LoopFillZerobss>

08000536 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000536:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000538:	3204      	adds	r2, #4

0800053a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800053a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800053c:	d3fb      	bcc.n	8000536 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800053e:	f002 faf1 	bl	8002b24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000542:	f7ff fe41 	bl	80001c8 <main>

08000546 <LoopForever>:

LoopForever:
    b LoopForever
 8000546:	e7fe      	b.n	8000546 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000548:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800054c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000550:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000554:	08002bbc 	.word	0x08002bbc
  ldr r2, =_sbss
 8000558:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800055c:	20000078 	.word	0x20000078

08000560 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000560:	e7fe      	b.n	8000560 <ADC1_2_IRQHandler>
	...

08000564 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000568:	4b08      	ldr	r3, [pc, #32]	; (800058c <HAL_Init+0x28>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	4a07      	ldr	r2, [pc, #28]	; (800058c <HAL_Init+0x28>)
 800056e:	f043 0310 	orr.w	r3, r3, #16
 8000572:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000574:	2003      	movs	r0, #3
 8000576:	f000 f92b 	bl	80007d0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800057a:	2000      	movs	r0, #0
 800057c:	f000 f808 	bl	8000590 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000580:	f7ff ff36 	bl	80003f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000584:	2300      	movs	r3, #0
}
 8000586:	4618      	mov	r0, r3
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	40022000 	.word	0x40022000

08000590 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000598:	4b12      	ldr	r3, [pc, #72]	; (80005e4 <HAL_InitTick+0x54>)
 800059a:	681a      	ldr	r2, [r3, #0]
 800059c:	4b12      	ldr	r3, [pc, #72]	; (80005e8 <HAL_InitTick+0x58>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	4619      	mov	r1, r3
 80005a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80005aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 f943 	bl	800083a <HAL_SYSTICK_Config>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005ba:	2301      	movs	r3, #1
 80005bc:	e00e      	b.n	80005dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	2b0f      	cmp	r3, #15
 80005c2:	d80a      	bhi.n	80005da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005c4:	2200      	movs	r2, #0
 80005c6:	6879      	ldr	r1, [r7, #4]
 80005c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005cc:	f000 f90b 	bl	80007e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005d0:	4a06      	ldr	r2, [pc, #24]	; (80005ec <HAL_InitTick+0x5c>)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80005d6:	2300      	movs	r3, #0
 80005d8:	e000      	b.n	80005dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005da:	2301      	movs	r3, #1
}
 80005dc:	4618      	mov	r0, r3
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	20000000 	.word	0x20000000
 80005e8:	20000008 	.word	0x20000008
 80005ec:	20000004 	.word	0x20000004

080005f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005f4:	4b06      	ldr	r3, [pc, #24]	; (8000610 <HAL_IncTick+0x20>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	461a      	mov	r2, r3
 80005fa:	4b06      	ldr	r3, [pc, #24]	; (8000614 <HAL_IncTick+0x24>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4413      	add	r3, r2
 8000600:	4a04      	ldr	r2, [pc, #16]	; (8000614 <HAL_IncTick+0x24>)
 8000602:	6013      	str	r3, [r2, #0]
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	20000008 	.word	0x20000008
 8000614:	20000074 	.word	0x20000074

08000618 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  return uwTick;  
 800061c:	4b03      	ldr	r3, [pc, #12]	; (800062c <HAL_GetTick+0x14>)
 800061e:	681b      	ldr	r3, [r3, #0]
}
 8000620:	4618      	mov	r0, r3
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	20000074 	.word	0x20000074

08000630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	f003 0307 	and.w	r3, r3, #7
 800063e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000640:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <__NVIC_SetPriorityGrouping+0x44>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000646:	68ba      	ldr	r2, [r7, #8]
 8000648:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800064c:	4013      	ands	r3, r2
 800064e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000658:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800065c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000662:	4a04      	ldr	r2, [pc, #16]	; (8000674 <__NVIC_SetPriorityGrouping+0x44>)
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	60d3      	str	r3, [r2, #12]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	e000ed00 	.word	0xe000ed00

08000678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800067c:	4b04      	ldr	r3, [pc, #16]	; (8000690 <__NVIC_GetPriorityGrouping+0x18>)
 800067e:	68db      	ldr	r3, [r3, #12]
 8000680:	0a1b      	lsrs	r3, r3, #8
 8000682:	f003 0307 	and.w	r3, r3, #7
}
 8000686:	4618      	mov	r0, r3
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	e000ed00 	.word	0xe000ed00

08000694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	db0b      	blt.n	80006be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	f003 021f 	and.w	r2, r3, #31
 80006ac:	4907      	ldr	r1, [pc, #28]	; (80006cc <__NVIC_EnableIRQ+0x38>)
 80006ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b2:	095b      	lsrs	r3, r3, #5
 80006b4:	2001      	movs	r0, #1
 80006b6:	fa00 f202 	lsl.w	r2, r0, r2
 80006ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80006be:	bf00      	nop
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	e000e100 	.word	0xe000e100

080006d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	6039      	str	r1, [r7, #0]
 80006da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	db0a      	blt.n	80006fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	b2da      	uxtb	r2, r3
 80006e8:	490c      	ldr	r1, [pc, #48]	; (800071c <__NVIC_SetPriority+0x4c>)
 80006ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ee:	0112      	lsls	r2, r2, #4
 80006f0:	b2d2      	uxtb	r2, r2
 80006f2:	440b      	add	r3, r1
 80006f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006f8:	e00a      	b.n	8000710 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	4908      	ldr	r1, [pc, #32]	; (8000720 <__NVIC_SetPriority+0x50>)
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	f003 030f 	and.w	r3, r3, #15
 8000706:	3b04      	subs	r3, #4
 8000708:	0112      	lsls	r2, r2, #4
 800070a:	b2d2      	uxtb	r2, r2
 800070c:	440b      	add	r3, r1
 800070e:	761a      	strb	r2, [r3, #24]
}
 8000710:	bf00      	nop
 8000712:	370c      	adds	r7, #12
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr
 800071c:	e000e100 	.word	0xe000e100
 8000720:	e000ed00 	.word	0xe000ed00

08000724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000724:	b480      	push	{r7}
 8000726:	b089      	sub	sp, #36	; 0x24
 8000728:	af00      	add	r7, sp, #0
 800072a:	60f8      	str	r0, [r7, #12]
 800072c:	60b9      	str	r1, [r7, #8]
 800072e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	f003 0307 	and.w	r3, r3, #7
 8000736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000738:	69fb      	ldr	r3, [r7, #28]
 800073a:	f1c3 0307 	rsb	r3, r3, #7
 800073e:	2b04      	cmp	r3, #4
 8000740:	bf28      	it	cs
 8000742:	2304      	movcs	r3, #4
 8000744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000746:	69fb      	ldr	r3, [r7, #28]
 8000748:	3304      	adds	r3, #4
 800074a:	2b06      	cmp	r3, #6
 800074c:	d902      	bls.n	8000754 <NVIC_EncodePriority+0x30>
 800074e:	69fb      	ldr	r3, [r7, #28]
 8000750:	3b03      	subs	r3, #3
 8000752:	e000      	b.n	8000756 <NVIC_EncodePriority+0x32>
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000758:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800075c:	69bb      	ldr	r3, [r7, #24]
 800075e:	fa02 f303 	lsl.w	r3, r2, r3
 8000762:	43da      	mvns	r2, r3
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	401a      	ands	r2, r3
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800076c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	fa01 f303 	lsl.w	r3, r1, r3
 8000776:	43d9      	mvns	r1, r3
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800077c:	4313      	orrs	r3, r2
         );
}
 800077e:	4618      	mov	r0, r3
 8000780:	3724      	adds	r7, #36	; 0x24
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
	...

0800078c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	3b01      	subs	r3, #1
 8000798:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800079c:	d301      	bcc.n	80007a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800079e:	2301      	movs	r3, #1
 80007a0:	e00f      	b.n	80007c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007a2:	4a0a      	ldr	r2, [pc, #40]	; (80007cc <SysTick_Config+0x40>)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	3b01      	subs	r3, #1
 80007a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007aa:	210f      	movs	r1, #15
 80007ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007b0:	f7ff ff8e 	bl	80006d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007b4:	4b05      	ldr	r3, [pc, #20]	; (80007cc <SysTick_Config+0x40>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ba:	4b04      	ldr	r3, [pc, #16]	; (80007cc <SysTick_Config+0x40>)
 80007bc:	2207      	movs	r2, #7
 80007be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007c0:	2300      	movs	r3, #0
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	e000e010 	.word	0xe000e010

080007d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f7ff ff29 	bl	8000630 <__NVIC_SetPriorityGrouping>
}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b086      	sub	sp, #24
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	4603      	mov	r3, r0
 80007ee:	60b9      	str	r1, [r7, #8]
 80007f0:	607a      	str	r2, [r7, #4]
 80007f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007f8:	f7ff ff3e 	bl	8000678 <__NVIC_GetPriorityGrouping>
 80007fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007fe:	687a      	ldr	r2, [r7, #4]
 8000800:	68b9      	ldr	r1, [r7, #8]
 8000802:	6978      	ldr	r0, [r7, #20]
 8000804:	f7ff ff8e 	bl	8000724 <NVIC_EncodePriority>
 8000808:	4602      	mov	r2, r0
 800080a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800080e:	4611      	mov	r1, r2
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff ff5d 	bl	80006d0 <__NVIC_SetPriority>
}
 8000816:	bf00      	nop
 8000818:	3718      	adds	r7, #24
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	b082      	sub	sp, #8
 8000822:	af00      	add	r7, sp, #0
 8000824:	4603      	mov	r3, r0
 8000826:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff ff31 	bl	8000694 <__NVIC_EnableIRQ>
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	b082      	sub	sp, #8
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f7ff ffa2 	bl	800078c <SysTick_Config>
 8000848:	4603      	mov	r3, r0
}
 800084a:	4618      	mov	r0, r3
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000854:	b480      	push	{r7}
 8000856:	b087      	sub	sp, #28
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
 800085c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800085e:	2300      	movs	r3, #0
 8000860:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000862:	e14e      	b.n	8000b02 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	2101      	movs	r1, #1
 800086a:	697b      	ldr	r3, [r7, #20]
 800086c:	fa01 f303 	lsl.w	r3, r1, r3
 8000870:	4013      	ands	r3, r2
 8000872:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	2b00      	cmp	r3, #0
 8000878:	f000 8140 	beq.w	8000afc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	685b      	ldr	r3, [r3, #4]
 8000880:	f003 0303 	and.w	r3, r3, #3
 8000884:	2b01      	cmp	r3, #1
 8000886:	d005      	beq.n	8000894 <HAL_GPIO_Init+0x40>
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	f003 0303 	and.w	r3, r3, #3
 8000890:	2b02      	cmp	r3, #2
 8000892:	d130      	bne.n	80008f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	689b      	ldr	r3, [r3, #8]
 8000898:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	005b      	lsls	r3, r3, #1
 800089e:	2203      	movs	r2, #3
 80008a0:	fa02 f303 	lsl.w	r3, r2, r3
 80008a4:	43db      	mvns	r3, r3
 80008a6:	693a      	ldr	r2, [r7, #16]
 80008a8:	4013      	ands	r3, r2
 80008aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	68da      	ldr	r2, [r3, #12]
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	fa02 f303 	lsl.w	r3, r2, r3
 80008b8:	693a      	ldr	r2, [r7, #16]
 80008ba:	4313      	orrs	r3, r2
 80008bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	693a      	ldr	r2, [r7, #16]
 80008c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	685b      	ldr	r3, [r3, #4]
 80008c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008ca:	2201      	movs	r2, #1
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	fa02 f303 	lsl.w	r3, r2, r3
 80008d2:	43db      	mvns	r3, r3
 80008d4:	693a      	ldr	r2, [r7, #16]
 80008d6:	4013      	ands	r3, r2
 80008d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	091b      	lsrs	r3, r3, #4
 80008e0:	f003 0201 	and.w	r2, r3, #1
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ea:	693a      	ldr	r2, [r7, #16]
 80008ec:	4313      	orrs	r3, r2
 80008ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	693a      	ldr	r2, [r7, #16]
 80008f4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	f003 0303 	and.w	r3, r3, #3
 80008fe:	2b03      	cmp	r3, #3
 8000900:	d017      	beq.n	8000932 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	68db      	ldr	r3, [r3, #12]
 8000906:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	005b      	lsls	r3, r3, #1
 800090c:	2203      	movs	r2, #3
 800090e:	fa02 f303 	lsl.w	r3, r2, r3
 8000912:	43db      	mvns	r3, r3
 8000914:	693a      	ldr	r2, [r7, #16]
 8000916:	4013      	ands	r3, r2
 8000918:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	689a      	ldr	r2, [r3, #8]
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	005b      	lsls	r3, r3, #1
 8000922:	fa02 f303 	lsl.w	r3, r2, r3
 8000926:	693a      	ldr	r2, [r7, #16]
 8000928:	4313      	orrs	r3, r2
 800092a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	693a      	ldr	r2, [r7, #16]
 8000930:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	f003 0303 	and.w	r3, r3, #3
 800093a:	2b02      	cmp	r3, #2
 800093c:	d123      	bne.n	8000986 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	08da      	lsrs	r2, r3, #3
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	3208      	adds	r2, #8
 8000946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800094a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800094c:	697b      	ldr	r3, [r7, #20]
 800094e:	f003 0307 	and.w	r3, r3, #7
 8000952:	009b      	lsls	r3, r3, #2
 8000954:	220f      	movs	r2, #15
 8000956:	fa02 f303 	lsl.w	r3, r2, r3
 800095a:	43db      	mvns	r3, r3
 800095c:	693a      	ldr	r2, [r7, #16]
 800095e:	4013      	ands	r3, r2
 8000960:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	691a      	ldr	r2, [r3, #16]
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	f003 0307 	and.w	r3, r3, #7
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	fa02 f303 	lsl.w	r3, r2, r3
 8000972:	693a      	ldr	r2, [r7, #16]
 8000974:	4313      	orrs	r3, r2
 8000976:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	08da      	lsrs	r2, r3, #3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	3208      	adds	r2, #8
 8000980:	6939      	ldr	r1, [r7, #16]
 8000982:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	005b      	lsls	r3, r3, #1
 8000990:	2203      	movs	r2, #3
 8000992:	fa02 f303 	lsl.w	r3, r2, r3
 8000996:	43db      	mvns	r3, r3
 8000998:	693a      	ldr	r2, [r7, #16]
 800099a:	4013      	ands	r3, r2
 800099c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	f003 0203 	and.w	r2, r3, #3
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	fa02 f303 	lsl.w	r3, r2, r3
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	4313      	orrs	r3, r2
 80009b2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	f000 809a 	beq.w	8000afc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c8:	4b55      	ldr	r3, [pc, #340]	; (8000b20 <HAL_GPIO_Init+0x2cc>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	4a54      	ldr	r2, [pc, #336]	; (8000b20 <HAL_GPIO_Init+0x2cc>)
 80009ce:	f043 0301 	orr.w	r3, r3, #1
 80009d2:	6193      	str	r3, [r2, #24]
 80009d4:	4b52      	ldr	r3, [pc, #328]	; (8000b20 <HAL_GPIO_Init+0x2cc>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	f003 0301 	and.w	r3, r3, #1
 80009dc:	60bb      	str	r3, [r7, #8]
 80009de:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009e0:	4a50      	ldr	r2, [pc, #320]	; (8000b24 <HAL_GPIO_Init+0x2d0>)
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	089b      	lsrs	r3, r3, #2
 80009e6:	3302      	adds	r3, #2
 80009e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80009ee:	697b      	ldr	r3, [r7, #20]
 80009f0:	f003 0303 	and.w	r3, r3, #3
 80009f4:	009b      	lsls	r3, r3, #2
 80009f6:	220f      	movs	r2, #15
 80009f8:	fa02 f303 	lsl.w	r3, r2, r3
 80009fc:	43db      	mvns	r3, r3
 80009fe:	693a      	ldr	r2, [r7, #16]
 8000a00:	4013      	ands	r3, r2
 8000a02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a0a:	d013      	beq.n	8000a34 <HAL_GPIO_Init+0x1e0>
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4a46      	ldr	r2, [pc, #280]	; (8000b28 <HAL_GPIO_Init+0x2d4>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d00d      	beq.n	8000a30 <HAL_GPIO_Init+0x1dc>
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4a45      	ldr	r2, [pc, #276]	; (8000b2c <HAL_GPIO_Init+0x2d8>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d007      	beq.n	8000a2c <HAL_GPIO_Init+0x1d8>
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4a44      	ldr	r2, [pc, #272]	; (8000b30 <HAL_GPIO_Init+0x2dc>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d101      	bne.n	8000a28 <HAL_GPIO_Init+0x1d4>
 8000a24:	2303      	movs	r3, #3
 8000a26:	e006      	b.n	8000a36 <HAL_GPIO_Init+0x1e2>
 8000a28:	2305      	movs	r3, #5
 8000a2a:	e004      	b.n	8000a36 <HAL_GPIO_Init+0x1e2>
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	e002      	b.n	8000a36 <HAL_GPIO_Init+0x1e2>
 8000a30:	2301      	movs	r3, #1
 8000a32:	e000      	b.n	8000a36 <HAL_GPIO_Init+0x1e2>
 8000a34:	2300      	movs	r3, #0
 8000a36:	697a      	ldr	r2, [r7, #20]
 8000a38:	f002 0203 	and.w	r2, r2, #3
 8000a3c:	0092      	lsls	r2, r2, #2
 8000a3e:	4093      	lsls	r3, r2
 8000a40:	693a      	ldr	r2, [r7, #16]
 8000a42:	4313      	orrs	r3, r2
 8000a44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a46:	4937      	ldr	r1, [pc, #220]	; (8000b24 <HAL_GPIO_Init+0x2d0>)
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	089b      	lsrs	r3, r3, #2
 8000a4c:	3302      	adds	r3, #2
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a54:	4b37      	ldr	r3, [pc, #220]	; (8000b34 <HAL_GPIO_Init+0x2e0>)
 8000a56:	689b      	ldr	r3, [r3, #8]
 8000a58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	43db      	mvns	r3, r3
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	4013      	ands	r3, r2
 8000a62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d003      	beq.n	8000a78 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000a78:	4a2e      	ldr	r2, [pc, #184]	; (8000b34 <HAL_GPIO_Init+0x2e0>)
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a7e:	4b2d      	ldr	r3, [pc, #180]	; (8000b34 <HAL_GPIO_Init+0x2e0>)
 8000a80:	68db      	ldr	r3, [r3, #12]
 8000a82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	43db      	mvns	r3, r3
 8000a88:	693a      	ldr	r2, [r7, #16]
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d003      	beq.n	8000aa2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000aa2:	4a24      	ldr	r2, [pc, #144]	; (8000b34 <HAL_GPIO_Init+0x2e0>)
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000aa8:	4b22      	ldr	r3, [pc, #136]	; (8000b34 <HAL_GPIO_Init+0x2e0>)
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	43db      	mvns	r3, r3
 8000ab2:	693a      	ldr	r2, [r7, #16]
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d003      	beq.n	8000acc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000ac4:	693a      	ldr	r2, [r7, #16]
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000acc:	4a19      	ldr	r2, [pc, #100]	; (8000b34 <HAL_GPIO_Init+0x2e0>)
 8000ace:	693b      	ldr	r3, [r7, #16]
 8000ad0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ad2:	4b18      	ldr	r3, [pc, #96]	; (8000b34 <HAL_GPIO_Init+0x2e0>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	43db      	mvns	r3, r3
 8000adc:	693a      	ldr	r2, [r7, #16]
 8000ade:	4013      	ands	r3, r2
 8000ae0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	685b      	ldr	r3, [r3, #4]
 8000ae6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d003      	beq.n	8000af6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	4313      	orrs	r3, r2
 8000af4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000af6:	4a0f      	ldr	r2, [pc, #60]	; (8000b34 <HAL_GPIO_Init+0x2e0>)
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	3301      	adds	r3, #1
 8000b00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	fa22 f303 	lsr.w	r3, r2, r3
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	f47f aea9 	bne.w	8000864 <HAL_GPIO_Init+0x10>
  }
}
 8000b12:	bf00      	nop
 8000b14:	bf00      	nop
 8000b16:	371c      	adds	r7, #28
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	40021000 	.word	0x40021000
 8000b24:	40010000 	.word	0x40010000
 8000b28:	48000400 	.word	0x48000400
 8000b2c:	48000800 	.word	0x48000800
 8000b30:	48000c00 	.word	0x48000c00
 8000b34:	40010400 	.word	0x40010400

08000b38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	460b      	mov	r3, r1
 8000b42:	807b      	strh	r3, [r7, #2]
 8000b44:	4613      	mov	r3, r2
 8000b46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b48:	787b      	ldrb	r3, [r7, #1]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d003      	beq.n	8000b56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b4e:	887a      	ldrh	r2, [r7, #2]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b54:	e002      	b.n	8000b5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b56:	887a      	ldrh	r2, [r7, #2]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b5c:	bf00      	nop
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	460b      	mov	r3, r1
 8000b72:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	695b      	ldr	r3, [r3, #20]
 8000b78:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000b7a:	887a      	ldrh	r2, [r7, #2]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	4013      	ands	r3, r2
 8000b80:	041a      	lsls	r2, r3, #16
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	43d9      	mvns	r1, r3
 8000b86:	887b      	ldrh	r3, [r7, #2]
 8000b88:	400b      	ands	r3, r1
 8000b8a:	431a      	orrs	r2, r3
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	619a      	str	r2, [r3, #24]
}
 8000b90:	bf00      	nop
 8000b92:	3714      	adds	r7, #20
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ba8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000bac:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000bae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000bb2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d102      	bne.n	8000bc2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	f001 b823 	b.w	8001c08 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000bc6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	f000 817d 	beq.w	8000ed2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000bd8:	4bbc      	ldr	r3, [pc, #752]	; (8000ecc <HAL_RCC_OscConfig+0x330>)
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f003 030c 	and.w	r3, r3, #12
 8000be0:	2b04      	cmp	r3, #4
 8000be2:	d00c      	beq.n	8000bfe <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000be4:	4bb9      	ldr	r3, [pc, #740]	; (8000ecc <HAL_RCC_OscConfig+0x330>)
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f003 030c 	and.w	r3, r3, #12
 8000bec:	2b08      	cmp	r3, #8
 8000bee:	d15c      	bne.n	8000caa <HAL_RCC_OscConfig+0x10e>
 8000bf0:	4bb6      	ldr	r3, [pc, #728]	; (8000ecc <HAL_RCC_OscConfig+0x330>)
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bfc:	d155      	bne.n	8000caa <HAL_RCC_OscConfig+0x10e>
 8000bfe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c02:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c06:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000c0a:	fa93 f3a3 	rbit	r3, r3
 8000c0e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c12:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c16:	fab3 f383 	clz	r3, r3
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	095b      	lsrs	r3, r3, #5
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	2b01      	cmp	r3, #1
 8000c28:	d102      	bne.n	8000c30 <HAL_RCC_OscConfig+0x94>
 8000c2a:	4ba8      	ldr	r3, [pc, #672]	; (8000ecc <HAL_RCC_OscConfig+0x330>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	e015      	b.n	8000c5c <HAL_RCC_OscConfig+0xc0>
 8000c30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c34:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c38:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000c3c:	fa93 f3a3 	rbit	r3, r3
 8000c40:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000c44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c48:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000c4c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000c50:	fa93 f3a3 	rbit	r3, r3
 8000c54:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000c58:	4b9c      	ldr	r3, [pc, #624]	; (8000ecc <HAL_RCC_OscConfig+0x330>)
 8000c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c5c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c60:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000c64:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000c68:	fa92 f2a2 	rbit	r2, r2
 8000c6c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000c70:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000c74:	fab2 f282 	clz	r2, r2
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	f042 0220 	orr.w	r2, r2, #32
 8000c7e:	b2d2      	uxtb	r2, r2
 8000c80:	f002 021f 	and.w	r2, r2, #31
 8000c84:	2101      	movs	r1, #1
 8000c86:	fa01 f202 	lsl.w	r2, r1, r2
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	f000 811f 	beq.w	8000ed0 <HAL_RCC_OscConfig+0x334>
 8000c92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000c96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	f040 8116 	bne.w	8000ed0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	f000 bfaf 	b.w	8001c08 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000caa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000cae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cba:	d106      	bne.n	8000cca <HAL_RCC_OscConfig+0x12e>
 8000cbc:	4b83      	ldr	r3, [pc, #524]	; (8000ecc <HAL_RCC_OscConfig+0x330>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a82      	ldr	r2, [pc, #520]	; (8000ecc <HAL_RCC_OscConfig+0x330>)
 8000cc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cc6:	6013      	str	r3, [r2, #0]
 8000cc8:	e036      	b.n	8000d38 <HAL_RCC_OscConfig+0x19c>
 8000cca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000cce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d10c      	bne.n	8000cf4 <HAL_RCC_OscConfig+0x158>
 8000cda:	4b7c      	ldr	r3, [pc, #496]	; (8000ecc <HAL_RCC_OscConfig+0x330>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a7b      	ldr	r2, [pc, #492]	; (8000ecc <HAL_RCC_OscConfig+0x330>)
 8000ce0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ce4:	6013      	str	r3, [r2, #0]
 8000ce6:	4b79      	ldr	r3, [pc, #484]	; (8000ecc <HAL_RCC_OscConfig+0x330>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a78      	ldr	r2, [pc, #480]	; (8000ecc <HAL_RCC_OscConfig+0x330>)
 8000cec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cf0:	6013      	str	r3, [r2, #0]
 8000cf2:	e021      	b.n	8000d38 <HAL_RCC_OscConfig+0x19c>
 8000cf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000cf8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d04:	d10c      	bne.n	8000d20 <HAL_RCC_OscConfig+0x184>
 8000d06:	4b71      	ldr	r3, [pc, #452]	; (8000ecc <HAL_RCC_OscConfig+0x330>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a70      	ldr	r2, [pc, #448]	; (8000ecc <HAL_RCC_OscConfig+0x330>)
 8000d0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d10:	6013      	str	r3, [r2, #0]
 8000d12:	4b6e      	ldr	r3, [pc, #440]	; (8000ecc <HAL_RCC_OscConfig+0x330>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a6d      	ldr	r2, [pc, #436]	; (8000ecc <HAL_RCC_OscConfig+0x330>)
 8000d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d1c:	6013      	str	r3, [r2, #0]
 8000d1e:	e00b      	b.n	8000d38 <HAL_RCC_OscConfig+0x19c>
 8000d20:	4b6a      	ldr	r3, [pc, #424]	; (8000ecc <HAL_RCC_OscConfig+0x330>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a69      	ldr	r2, [pc, #420]	; (8000ecc <HAL_RCC_OscConfig+0x330>)
 8000d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d2a:	6013      	str	r3, [r2, #0]
 8000d2c:	4b67      	ldr	r3, [pc, #412]	; (8000ecc <HAL_RCC_OscConfig+0x330>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a66      	ldr	r2, [pc, #408]	; (8000ecc <HAL_RCC_OscConfig+0x330>)
 8000d32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d36:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000d38:	4b64      	ldr	r3, [pc, #400]	; (8000ecc <HAL_RCC_OscConfig+0x330>)
 8000d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d3c:	f023 020f 	bic.w	r2, r3, #15
 8000d40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	689b      	ldr	r3, [r3, #8]
 8000d4c:	495f      	ldr	r1, [pc, #380]	; (8000ecc <HAL_RCC_OscConfig+0x330>)
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000d56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d059      	beq.n	8000e16 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d62:	f7ff fc59 	bl	8000618 <HAL_GetTick>
 8000d66:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d6a:	e00a      	b.n	8000d82 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d6c:	f7ff fc54 	bl	8000618 <HAL_GetTick>
 8000d70:	4602      	mov	r2, r0
 8000d72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000d76:	1ad3      	subs	r3, r2, r3
 8000d78:	2b64      	cmp	r3, #100	; 0x64
 8000d7a:	d902      	bls.n	8000d82 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	f000 bf43 	b.w	8001c08 <HAL_RCC_OscConfig+0x106c>
 8000d82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d86:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d8a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8000d8e:	fa93 f3a3 	rbit	r3, r3
 8000d92:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8000d96:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d9a:	fab3 f383 	clz	r3, r3
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	095b      	lsrs	r3, r3, #5
 8000da2:	b2db      	uxtb	r3, r3
 8000da4:	f043 0301 	orr.w	r3, r3, #1
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d102      	bne.n	8000db4 <HAL_RCC_OscConfig+0x218>
 8000dae:	4b47      	ldr	r3, [pc, #284]	; (8000ecc <HAL_RCC_OscConfig+0x330>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	e015      	b.n	8000de0 <HAL_RCC_OscConfig+0x244>
 8000db4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000db8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dbc:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8000dc0:	fa93 f3a3 	rbit	r3, r3
 8000dc4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000dc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dcc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000dd0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8000dd4:	fa93 f3a3 	rbit	r3, r3
 8000dd8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8000ddc:	4b3b      	ldr	r3, [pc, #236]	; (8000ecc <HAL_RCC_OscConfig+0x330>)
 8000dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000de4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8000de8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000dec:	fa92 f2a2 	rbit	r2, r2
 8000df0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8000df4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8000df8:	fab2 f282 	clz	r2, r2
 8000dfc:	b2d2      	uxtb	r2, r2
 8000dfe:	f042 0220 	orr.w	r2, r2, #32
 8000e02:	b2d2      	uxtb	r2, r2
 8000e04:	f002 021f 	and.w	r2, r2, #31
 8000e08:	2101      	movs	r1, #1
 8000e0a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e0e:	4013      	ands	r3, r2
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d0ab      	beq.n	8000d6c <HAL_RCC_OscConfig+0x1d0>
 8000e14:	e05d      	b.n	8000ed2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e16:	f7ff fbff 	bl	8000618 <HAL_GetTick>
 8000e1a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e1e:	e00a      	b.n	8000e36 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e20:	f7ff fbfa 	bl	8000618 <HAL_GetTick>
 8000e24:	4602      	mov	r2, r0
 8000e26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e2a:	1ad3      	subs	r3, r2, r3
 8000e2c:	2b64      	cmp	r3, #100	; 0x64
 8000e2e:	d902      	bls.n	8000e36 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8000e30:	2303      	movs	r3, #3
 8000e32:	f000 bee9 	b.w	8001c08 <HAL_RCC_OscConfig+0x106c>
 8000e36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e3a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e3e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8000e42:	fa93 f3a3 	rbit	r3, r3
 8000e46:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8000e4a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e4e:	fab3 f383 	clz	r3, r3
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	095b      	lsrs	r3, r3, #5
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d102      	bne.n	8000e68 <HAL_RCC_OscConfig+0x2cc>
 8000e62:	4b1a      	ldr	r3, [pc, #104]	; (8000ecc <HAL_RCC_OscConfig+0x330>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	e015      	b.n	8000e94 <HAL_RCC_OscConfig+0x2f8>
 8000e68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e6c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e70:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8000e74:	fa93 f3a3 	rbit	r3, r3
 8000e78:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000e7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e80:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000e84:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8000e88:	fa93 f3a3 	rbit	r3, r3
 8000e8c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8000e90:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <HAL_RCC_OscConfig+0x330>)
 8000e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e94:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e98:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000e9c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000ea0:	fa92 f2a2 	rbit	r2, r2
 8000ea4:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8000ea8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8000eac:	fab2 f282 	clz	r2, r2
 8000eb0:	b2d2      	uxtb	r2, r2
 8000eb2:	f042 0220 	orr.w	r2, r2, #32
 8000eb6:	b2d2      	uxtb	r2, r2
 8000eb8:	f002 021f 	and.w	r2, r2, #31
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d1ab      	bne.n	8000e20 <HAL_RCC_OscConfig+0x284>
 8000ec8:	e003      	b.n	8000ed2 <HAL_RCC_OscConfig+0x336>
 8000eca:	bf00      	nop
 8000ecc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ed0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ed2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ed6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f003 0302 	and.w	r3, r3, #2
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	f000 817d 	beq.w	80011e2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ee8:	4ba6      	ldr	r3, [pc, #664]	; (8001184 <HAL_RCC_OscConfig+0x5e8>)
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f003 030c 	and.w	r3, r3, #12
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d00b      	beq.n	8000f0c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000ef4:	4ba3      	ldr	r3, [pc, #652]	; (8001184 <HAL_RCC_OscConfig+0x5e8>)
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f003 030c 	and.w	r3, r3, #12
 8000efc:	2b08      	cmp	r3, #8
 8000efe:	d172      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x44a>
 8000f00:	4ba0      	ldr	r3, [pc, #640]	; (8001184 <HAL_RCC_OscConfig+0x5e8>)
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d16c      	bne.n	8000fe6 <HAL_RCC_OscConfig+0x44a>
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f12:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8000f16:	fa93 f3a3 	rbit	r3, r3
 8000f1a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8000f1e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f22:	fab3 f383 	clz	r3, r3
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	095b      	lsrs	r3, r3, #5
 8000f2a:	b2db      	uxtb	r3, r3
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d102      	bne.n	8000f3c <HAL_RCC_OscConfig+0x3a0>
 8000f36:	4b93      	ldr	r3, [pc, #588]	; (8001184 <HAL_RCC_OscConfig+0x5e8>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	e013      	b.n	8000f64 <HAL_RCC_OscConfig+0x3c8>
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f42:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8000f46:	fa93 f3a3 	rbit	r3, r3
 8000f4a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000f4e:	2302      	movs	r3, #2
 8000f50:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000f54:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8000f58:	fa93 f3a3 	rbit	r3, r3
 8000f5c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8000f60:	4b88      	ldr	r3, [pc, #544]	; (8001184 <HAL_RCC_OscConfig+0x5e8>)
 8000f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f64:	2202      	movs	r2, #2
 8000f66:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8000f6a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000f6e:	fa92 f2a2 	rbit	r2, r2
 8000f72:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8000f76:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8000f7a:	fab2 f282 	clz	r2, r2
 8000f7e:	b2d2      	uxtb	r2, r2
 8000f80:	f042 0220 	orr.w	r2, r2, #32
 8000f84:	b2d2      	uxtb	r2, r2
 8000f86:	f002 021f 	and.w	r2, r2, #31
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f90:	4013      	ands	r3, r2
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d00a      	beq.n	8000fac <HAL_RCC_OscConfig+0x410>
 8000f96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	691b      	ldr	r3, [r3, #16]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d002      	beq.n	8000fac <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	f000 be2e 	b.w	8001c08 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fac:	4b75      	ldr	r3, [pc, #468]	; (8001184 <HAL_RCC_OscConfig+0x5e8>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fb8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	695b      	ldr	r3, [r3, #20]
 8000fc0:	21f8      	movs	r1, #248	; 0xf8
 8000fc2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8000fca:	fa91 f1a1 	rbit	r1, r1
 8000fce:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8000fd2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8000fd6:	fab1 f181 	clz	r1, r1
 8000fda:	b2c9      	uxtb	r1, r1
 8000fdc:	408b      	lsls	r3, r1
 8000fde:	4969      	ldr	r1, [pc, #420]	; (8001184 <HAL_RCC_OscConfig+0x5e8>)
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fe4:	e0fd      	b.n	80011e2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fe6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	691b      	ldr	r3, [r3, #16]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	f000 8088 	beq.w	8001108 <HAL_RCC_OscConfig+0x56c>
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ffe:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001002:	fa93 f3a3 	rbit	r3, r3
 8001006:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800100a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800100e:	fab3 f383 	clz	r3, r3
 8001012:	b2db      	uxtb	r3, r3
 8001014:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001018:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	461a      	mov	r2, r3
 8001020:	2301      	movs	r3, #1
 8001022:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001024:	f7ff faf8 	bl	8000618 <HAL_GetTick>
 8001028:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800102c:	e00a      	b.n	8001044 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800102e:	f7ff faf3 	bl	8000618 <HAL_GetTick>
 8001032:	4602      	mov	r2, r0
 8001034:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	2b02      	cmp	r3, #2
 800103c:	d902      	bls.n	8001044 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800103e:	2303      	movs	r3, #3
 8001040:	f000 bde2 	b.w	8001c08 <HAL_RCC_OscConfig+0x106c>
 8001044:	2302      	movs	r3, #2
 8001046:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800104a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800104e:	fa93 f3a3 	rbit	r3, r3
 8001052:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001056:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800105a:	fab3 f383 	clz	r3, r3
 800105e:	b2db      	uxtb	r3, r3
 8001060:	095b      	lsrs	r3, r3, #5
 8001062:	b2db      	uxtb	r3, r3
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	b2db      	uxtb	r3, r3
 800106a:	2b01      	cmp	r3, #1
 800106c:	d102      	bne.n	8001074 <HAL_RCC_OscConfig+0x4d8>
 800106e:	4b45      	ldr	r3, [pc, #276]	; (8001184 <HAL_RCC_OscConfig+0x5e8>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	e013      	b.n	800109c <HAL_RCC_OscConfig+0x500>
 8001074:	2302      	movs	r3, #2
 8001076:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800107a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800107e:	fa93 f3a3 	rbit	r3, r3
 8001082:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001086:	2302      	movs	r3, #2
 8001088:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800108c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001090:	fa93 f3a3 	rbit	r3, r3
 8001094:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001098:	4b3a      	ldr	r3, [pc, #232]	; (8001184 <HAL_RCC_OscConfig+0x5e8>)
 800109a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800109c:	2202      	movs	r2, #2
 800109e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80010a2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80010a6:	fa92 f2a2 	rbit	r2, r2
 80010aa:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80010ae:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80010b2:	fab2 f282 	clz	r2, r2
 80010b6:	b2d2      	uxtb	r2, r2
 80010b8:	f042 0220 	orr.w	r2, r2, #32
 80010bc:	b2d2      	uxtb	r2, r2
 80010be:	f002 021f 	and.w	r2, r2, #31
 80010c2:	2101      	movs	r1, #1
 80010c4:	fa01 f202 	lsl.w	r2, r1, r2
 80010c8:	4013      	ands	r3, r2
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d0af      	beq.n	800102e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ce:	4b2d      	ldr	r3, [pc, #180]	; (8001184 <HAL_RCC_OscConfig+0x5e8>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80010da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	21f8      	movs	r1, #248	; 0xf8
 80010e4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80010ec:	fa91 f1a1 	rbit	r1, r1
 80010f0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80010f4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80010f8:	fab1 f181 	clz	r1, r1
 80010fc:	b2c9      	uxtb	r1, r1
 80010fe:	408b      	lsls	r3, r1
 8001100:	4920      	ldr	r1, [pc, #128]	; (8001184 <HAL_RCC_OscConfig+0x5e8>)
 8001102:	4313      	orrs	r3, r2
 8001104:	600b      	str	r3, [r1, #0]
 8001106:	e06c      	b.n	80011e2 <HAL_RCC_OscConfig+0x646>
 8001108:	2301      	movs	r3, #1
 800110a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800110e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001112:	fa93 f3a3 	rbit	r3, r3
 8001116:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800111a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800111e:	fab3 f383 	clz	r3, r3
 8001122:	b2db      	uxtb	r3, r3
 8001124:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001128:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	461a      	mov	r2, r3
 8001130:	2300      	movs	r3, #0
 8001132:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001134:	f7ff fa70 	bl	8000618 <HAL_GetTick>
 8001138:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800113c:	e00a      	b.n	8001154 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800113e:	f7ff fa6b 	bl	8000618 <HAL_GetTick>
 8001142:	4602      	mov	r2, r0
 8001144:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001148:	1ad3      	subs	r3, r2, r3
 800114a:	2b02      	cmp	r3, #2
 800114c:	d902      	bls.n	8001154 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800114e:	2303      	movs	r3, #3
 8001150:	f000 bd5a 	b.w	8001c08 <HAL_RCC_OscConfig+0x106c>
 8001154:	2302      	movs	r3, #2
 8001156:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800115a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800115e:	fa93 f3a3 	rbit	r3, r3
 8001162:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001166:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800116a:	fab3 f383 	clz	r3, r3
 800116e:	b2db      	uxtb	r3, r3
 8001170:	095b      	lsrs	r3, r3, #5
 8001172:	b2db      	uxtb	r3, r3
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	b2db      	uxtb	r3, r3
 800117a:	2b01      	cmp	r3, #1
 800117c:	d104      	bne.n	8001188 <HAL_RCC_OscConfig+0x5ec>
 800117e:	4b01      	ldr	r3, [pc, #4]	; (8001184 <HAL_RCC_OscConfig+0x5e8>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	e015      	b.n	80011b0 <HAL_RCC_OscConfig+0x614>
 8001184:	40021000 	.word	0x40021000
 8001188:	2302      	movs	r3, #2
 800118a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800118e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001192:	fa93 f3a3 	rbit	r3, r3
 8001196:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800119a:	2302      	movs	r3, #2
 800119c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80011a0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80011a4:	fa93 f3a3 	rbit	r3, r3
 80011a8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80011ac:	4bc8      	ldr	r3, [pc, #800]	; (80014d0 <HAL_RCC_OscConfig+0x934>)
 80011ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b0:	2202      	movs	r2, #2
 80011b2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80011b6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80011ba:	fa92 f2a2 	rbit	r2, r2
 80011be:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80011c2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80011c6:	fab2 f282 	clz	r2, r2
 80011ca:	b2d2      	uxtb	r2, r2
 80011cc:	f042 0220 	orr.w	r2, r2, #32
 80011d0:	b2d2      	uxtb	r2, r2
 80011d2:	f002 021f 	and.w	r2, r2, #31
 80011d6:	2101      	movs	r1, #1
 80011d8:	fa01 f202 	lsl.w	r2, r1, r2
 80011dc:	4013      	ands	r3, r2
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d1ad      	bne.n	800113e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0308 	and.w	r3, r3, #8
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 8110 	beq.w	8001418 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d079      	beq.n	80012fc <HAL_RCC_OscConfig+0x760>
 8001208:	2301      	movs	r3, #1
 800120a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800120e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001212:	fa93 f3a3 	rbit	r3, r3
 8001216:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800121a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800121e:	fab3 f383 	clz	r3, r3
 8001222:	b2db      	uxtb	r3, r3
 8001224:	461a      	mov	r2, r3
 8001226:	4bab      	ldr	r3, [pc, #684]	; (80014d4 <HAL_RCC_OscConfig+0x938>)
 8001228:	4413      	add	r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	461a      	mov	r2, r3
 800122e:	2301      	movs	r3, #1
 8001230:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001232:	f7ff f9f1 	bl	8000618 <HAL_GetTick>
 8001236:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800123a:	e00a      	b.n	8001252 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800123c:	f7ff f9ec 	bl	8000618 <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d902      	bls.n	8001252 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800124c:	2303      	movs	r3, #3
 800124e:	f000 bcdb 	b.w	8001c08 <HAL_RCC_OscConfig+0x106c>
 8001252:	2302      	movs	r3, #2
 8001254:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001258:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800125c:	fa93 f3a3 	rbit	r3, r3
 8001260:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001264:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001268:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800126c:	2202      	movs	r2, #2
 800126e:	601a      	str	r2, [r3, #0]
 8001270:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001274:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	fa93 f2a3 	rbit	r2, r3
 800127e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001282:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800128c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001290:	2202      	movs	r2, #2
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001298:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	fa93 f2a3 	rbit	r2, r3
 80012a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012a6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80012aa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ac:	4b88      	ldr	r3, [pc, #544]	; (80014d0 <HAL_RCC_OscConfig+0x934>)
 80012ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012b4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80012b8:	2102      	movs	r1, #2
 80012ba:	6019      	str	r1, [r3, #0]
 80012bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012c0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	fa93 f1a3 	rbit	r1, r3
 80012ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012ce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80012d2:	6019      	str	r1, [r3, #0]
  return result;
 80012d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012d8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	fab3 f383 	clz	r3, r3
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	f003 031f 	and.w	r3, r3, #31
 80012ee:	2101      	movs	r1, #1
 80012f0:	fa01 f303 	lsl.w	r3, r1, r3
 80012f4:	4013      	ands	r3, r2
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d0a0      	beq.n	800123c <HAL_RCC_OscConfig+0x6a0>
 80012fa:	e08d      	b.n	8001418 <HAL_RCC_OscConfig+0x87c>
 80012fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001300:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001304:	2201      	movs	r2, #1
 8001306:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001308:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800130c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	fa93 f2a3 	rbit	r2, r3
 8001316:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800131a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800131e:	601a      	str	r2, [r3, #0]
  return result;
 8001320:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001324:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001328:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800132a:	fab3 f383 	clz	r3, r3
 800132e:	b2db      	uxtb	r3, r3
 8001330:	461a      	mov	r2, r3
 8001332:	4b68      	ldr	r3, [pc, #416]	; (80014d4 <HAL_RCC_OscConfig+0x938>)
 8001334:	4413      	add	r3, r2
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	461a      	mov	r2, r3
 800133a:	2300      	movs	r3, #0
 800133c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800133e:	f7ff f96b 	bl	8000618 <HAL_GetTick>
 8001342:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001346:	e00a      	b.n	800135e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001348:	f7ff f966 	bl	8000618 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	2b02      	cmp	r3, #2
 8001356:	d902      	bls.n	800135e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	f000 bc55 	b.w	8001c08 <HAL_RCC_OscConfig+0x106c>
 800135e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001362:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001366:	2202      	movs	r2, #2
 8001368:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800136a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800136e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	fa93 f2a3 	rbit	r2, r3
 8001378:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800137c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001386:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800138a:	2202      	movs	r2, #2
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001392:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	fa93 f2a3 	rbit	r2, r3
 800139c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80013ae:	2202      	movs	r2, #2
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	fa93 f2a3 	rbit	r2, r3
 80013c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013c4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80013c8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013ca:	4b41      	ldr	r3, [pc, #260]	; (80014d0 <HAL_RCC_OscConfig+0x934>)
 80013cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013d2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80013d6:	2102      	movs	r1, #2
 80013d8:	6019      	str	r1, [r3, #0]
 80013da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013de:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	fa93 f1a3 	rbit	r1, r3
 80013e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ec:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80013f0:	6019      	str	r1, [r3, #0]
  return result;
 80013f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013f6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	fab3 f383 	clz	r3, r3
 8001400:	b2db      	uxtb	r3, r3
 8001402:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001406:	b2db      	uxtb	r3, r3
 8001408:	f003 031f 	and.w	r3, r3, #31
 800140c:	2101      	movs	r1, #1
 800140e:	fa01 f303 	lsl.w	r3, r1, r3
 8001412:	4013      	ands	r3, r2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d197      	bne.n	8001348 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800141c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0304 	and.w	r3, r3, #4
 8001428:	2b00      	cmp	r3, #0
 800142a:	f000 81a1 	beq.w	8001770 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800142e:	2300      	movs	r3, #0
 8001430:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001434:	4b26      	ldr	r3, [pc, #152]	; (80014d0 <HAL_RCC_OscConfig+0x934>)
 8001436:	69db      	ldr	r3, [r3, #28]
 8001438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d116      	bne.n	800146e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001440:	4b23      	ldr	r3, [pc, #140]	; (80014d0 <HAL_RCC_OscConfig+0x934>)
 8001442:	69db      	ldr	r3, [r3, #28]
 8001444:	4a22      	ldr	r2, [pc, #136]	; (80014d0 <HAL_RCC_OscConfig+0x934>)
 8001446:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800144a:	61d3      	str	r3, [r2, #28]
 800144c:	4b20      	ldr	r3, [pc, #128]	; (80014d0 <HAL_RCC_OscConfig+0x934>)
 800144e:	69db      	ldr	r3, [r3, #28]
 8001450:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001454:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001458:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001462:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001466:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001468:	2301      	movs	r3, #1
 800146a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800146e:	4b1a      	ldr	r3, [pc, #104]	; (80014d8 <HAL_RCC_OscConfig+0x93c>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001476:	2b00      	cmp	r3, #0
 8001478:	d11a      	bne.n	80014b0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800147a:	4b17      	ldr	r3, [pc, #92]	; (80014d8 <HAL_RCC_OscConfig+0x93c>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a16      	ldr	r2, [pc, #88]	; (80014d8 <HAL_RCC_OscConfig+0x93c>)
 8001480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001484:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001486:	f7ff f8c7 	bl	8000618 <HAL_GetTick>
 800148a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800148e:	e009      	b.n	80014a4 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001490:	f7ff f8c2 	bl	8000618 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b64      	cmp	r3, #100	; 0x64
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e3b1      	b.n	8001c08 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a4:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <HAL_RCC_OscConfig+0x93c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d0ef      	beq.n	8001490 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014b4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d10d      	bne.n	80014dc <HAL_RCC_OscConfig+0x940>
 80014c0:	4b03      	ldr	r3, [pc, #12]	; (80014d0 <HAL_RCC_OscConfig+0x934>)
 80014c2:	6a1b      	ldr	r3, [r3, #32]
 80014c4:	4a02      	ldr	r2, [pc, #8]	; (80014d0 <HAL_RCC_OscConfig+0x934>)
 80014c6:	f043 0301 	orr.w	r3, r3, #1
 80014ca:	6213      	str	r3, [r2, #32]
 80014cc:	e03c      	b.n	8001548 <HAL_RCC_OscConfig+0x9ac>
 80014ce:	bf00      	nop
 80014d0:	40021000 	.word	0x40021000
 80014d4:	10908120 	.word	0x10908120
 80014d8:	40007000 	.word	0x40007000
 80014dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d10c      	bne.n	8001506 <HAL_RCC_OscConfig+0x96a>
 80014ec:	4bc1      	ldr	r3, [pc, #772]	; (80017f4 <HAL_RCC_OscConfig+0xc58>)
 80014ee:	6a1b      	ldr	r3, [r3, #32]
 80014f0:	4ac0      	ldr	r2, [pc, #768]	; (80017f4 <HAL_RCC_OscConfig+0xc58>)
 80014f2:	f023 0301 	bic.w	r3, r3, #1
 80014f6:	6213      	str	r3, [r2, #32]
 80014f8:	4bbe      	ldr	r3, [pc, #760]	; (80017f4 <HAL_RCC_OscConfig+0xc58>)
 80014fa:	6a1b      	ldr	r3, [r3, #32]
 80014fc:	4abd      	ldr	r2, [pc, #756]	; (80017f4 <HAL_RCC_OscConfig+0xc58>)
 80014fe:	f023 0304 	bic.w	r3, r3, #4
 8001502:	6213      	str	r3, [r2, #32]
 8001504:	e020      	b.n	8001548 <HAL_RCC_OscConfig+0x9ac>
 8001506:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800150a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	2b05      	cmp	r3, #5
 8001514:	d10c      	bne.n	8001530 <HAL_RCC_OscConfig+0x994>
 8001516:	4bb7      	ldr	r3, [pc, #732]	; (80017f4 <HAL_RCC_OscConfig+0xc58>)
 8001518:	6a1b      	ldr	r3, [r3, #32]
 800151a:	4ab6      	ldr	r2, [pc, #728]	; (80017f4 <HAL_RCC_OscConfig+0xc58>)
 800151c:	f043 0304 	orr.w	r3, r3, #4
 8001520:	6213      	str	r3, [r2, #32]
 8001522:	4bb4      	ldr	r3, [pc, #720]	; (80017f4 <HAL_RCC_OscConfig+0xc58>)
 8001524:	6a1b      	ldr	r3, [r3, #32]
 8001526:	4ab3      	ldr	r2, [pc, #716]	; (80017f4 <HAL_RCC_OscConfig+0xc58>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	6213      	str	r3, [r2, #32]
 800152e:	e00b      	b.n	8001548 <HAL_RCC_OscConfig+0x9ac>
 8001530:	4bb0      	ldr	r3, [pc, #704]	; (80017f4 <HAL_RCC_OscConfig+0xc58>)
 8001532:	6a1b      	ldr	r3, [r3, #32]
 8001534:	4aaf      	ldr	r2, [pc, #700]	; (80017f4 <HAL_RCC_OscConfig+0xc58>)
 8001536:	f023 0301 	bic.w	r3, r3, #1
 800153a:	6213      	str	r3, [r2, #32]
 800153c:	4bad      	ldr	r3, [pc, #692]	; (80017f4 <HAL_RCC_OscConfig+0xc58>)
 800153e:	6a1b      	ldr	r3, [r3, #32]
 8001540:	4aac      	ldr	r2, [pc, #688]	; (80017f4 <HAL_RCC_OscConfig+0xc58>)
 8001542:	f023 0304 	bic.w	r3, r3, #4
 8001546:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001548:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800154c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	2b00      	cmp	r3, #0
 8001556:	f000 8081 	beq.w	800165c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800155a:	f7ff f85d 	bl	8000618 <HAL_GetTick>
 800155e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001562:	e00b      	b.n	800157c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001564:	f7ff f858 	bl	8000618 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	f241 3288 	movw	r2, #5000	; 0x1388
 8001574:	4293      	cmp	r3, r2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e345      	b.n	8001c08 <HAL_RCC_OscConfig+0x106c>
 800157c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001580:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001584:	2202      	movs	r2, #2
 8001586:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001588:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800158c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	fa93 f2a3 	rbit	r2, r3
 8001596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800159a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80015a8:	2202      	movs	r2, #2
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015b0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	fa93 f2a3 	rbit	r2, r3
 80015ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015be:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80015c2:	601a      	str	r2, [r3, #0]
  return result;
 80015c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80015cc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ce:	fab3 f383 	clz	r3, r3
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	095b      	lsrs	r3, r3, #5
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	f043 0302 	orr.w	r3, r3, #2
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d102      	bne.n	80015e8 <HAL_RCC_OscConfig+0xa4c>
 80015e2:	4b84      	ldr	r3, [pc, #528]	; (80017f4 <HAL_RCC_OscConfig+0xc58>)
 80015e4:	6a1b      	ldr	r3, [r3, #32]
 80015e6:	e013      	b.n	8001610 <HAL_RCC_OscConfig+0xa74>
 80015e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015ec:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80015f0:	2202      	movs	r2, #2
 80015f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015f8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	fa93 f2a3 	rbit	r2, r3
 8001602:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001606:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	4b79      	ldr	r3, [pc, #484]	; (80017f4 <HAL_RCC_OscConfig+0xc58>)
 800160e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001610:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001614:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001618:	2102      	movs	r1, #2
 800161a:	6011      	str	r1, [r2, #0]
 800161c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001620:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001624:	6812      	ldr	r2, [r2, #0]
 8001626:	fa92 f1a2 	rbit	r1, r2
 800162a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800162e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001632:	6011      	str	r1, [r2, #0]
  return result;
 8001634:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001638:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800163c:	6812      	ldr	r2, [r2, #0]
 800163e:	fab2 f282 	clz	r2, r2
 8001642:	b2d2      	uxtb	r2, r2
 8001644:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001648:	b2d2      	uxtb	r2, r2
 800164a:	f002 021f 	and.w	r2, r2, #31
 800164e:	2101      	movs	r1, #1
 8001650:	fa01 f202 	lsl.w	r2, r1, r2
 8001654:	4013      	ands	r3, r2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d084      	beq.n	8001564 <HAL_RCC_OscConfig+0x9c8>
 800165a:	e07f      	b.n	800175c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800165c:	f7fe ffdc 	bl	8000618 <HAL_GetTick>
 8001660:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001664:	e00b      	b.n	800167e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001666:	f7fe ffd7 	bl	8000618 <HAL_GetTick>
 800166a:	4602      	mov	r2, r0
 800166c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	f241 3288 	movw	r2, #5000	; 0x1388
 8001676:	4293      	cmp	r3, r2
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e2c4      	b.n	8001c08 <HAL_RCC_OscConfig+0x106c>
 800167e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001682:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001686:	2202      	movs	r2, #2
 8001688:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800168a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800168e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	fa93 f2a3 	rbit	r2, r3
 8001698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800169c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016a6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80016aa:	2202      	movs	r2, #2
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	fa93 f2a3 	rbit	r2, r3
 80016bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80016c4:	601a      	str	r2, [r3, #0]
  return result;
 80016c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ca:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80016ce:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016d0:	fab3 f383 	clz	r3, r3
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	095b      	lsrs	r3, r3, #5
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	f043 0302 	orr.w	r3, r3, #2
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d102      	bne.n	80016ea <HAL_RCC_OscConfig+0xb4e>
 80016e4:	4b43      	ldr	r3, [pc, #268]	; (80017f4 <HAL_RCC_OscConfig+0xc58>)
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	e013      	b.n	8001712 <HAL_RCC_OscConfig+0xb76>
 80016ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ee:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80016f2:	2202      	movs	r2, #2
 80016f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016fa:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	fa93 f2a3 	rbit	r2, r3
 8001704:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001708:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	4b39      	ldr	r3, [pc, #228]	; (80017f4 <HAL_RCC_OscConfig+0xc58>)
 8001710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001712:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001716:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800171a:	2102      	movs	r1, #2
 800171c:	6011      	str	r1, [r2, #0]
 800171e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001722:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001726:	6812      	ldr	r2, [r2, #0]
 8001728:	fa92 f1a2 	rbit	r1, r2
 800172c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001730:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001734:	6011      	str	r1, [r2, #0]
  return result;
 8001736:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800173a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800173e:	6812      	ldr	r2, [r2, #0]
 8001740:	fab2 f282 	clz	r2, r2
 8001744:	b2d2      	uxtb	r2, r2
 8001746:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	f002 021f 	and.w	r2, r2, #31
 8001750:	2101      	movs	r1, #1
 8001752:	fa01 f202 	lsl.w	r2, r1, r2
 8001756:	4013      	ands	r3, r2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d184      	bne.n	8001666 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800175c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001760:	2b01      	cmp	r3, #1
 8001762:	d105      	bne.n	8001770 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001764:	4b23      	ldr	r3, [pc, #140]	; (80017f4 <HAL_RCC_OscConfig+0xc58>)
 8001766:	69db      	ldr	r3, [r3, #28]
 8001768:	4a22      	ldr	r2, [pc, #136]	; (80017f4 <HAL_RCC_OscConfig+0xc58>)
 800176a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800176e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001770:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001774:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	69db      	ldr	r3, [r3, #28]
 800177c:	2b00      	cmp	r3, #0
 800177e:	f000 8242 	beq.w	8001c06 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001782:	4b1c      	ldr	r3, [pc, #112]	; (80017f4 <HAL_RCC_OscConfig+0xc58>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f003 030c 	and.w	r3, r3, #12
 800178a:	2b08      	cmp	r3, #8
 800178c:	f000 8213 	beq.w	8001bb6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001790:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001794:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	69db      	ldr	r3, [r3, #28]
 800179c:	2b02      	cmp	r3, #2
 800179e:	f040 8162 	bne.w	8001a66 <HAL_RCC_OscConfig+0xeca>
 80017a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017a6:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80017aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80017ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017b4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	fa93 f2a3 	rbit	r2, r3
 80017be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017c2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80017c6:	601a      	str	r2, [r3, #0]
  return result;
 80017c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017cc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80017d0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d2:	fab3 f383 	clz	r3, r3
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	461a      	mov	r2, r3
 80017e4:	2300      	movs	r3, #0
 80017e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e8:	f7fe ff16 	bl	8000618 <HAL_GetTick>
 80017ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017f0:	e00c      	b.n	800180c <HAL_RCC_OscConfig+0xc70>
 80017f2:	bf00      	nop
 80017f4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017f8:	f7fe ff0e 	bl	8000618 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d901      	bls.n	800180c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	e1fd      	b.n	8001c08 <HAL_RCC_OscConfig+0x106c>
 800180c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001810:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001814:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001818:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800181a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800181e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	fa93 f2a3 	rbit	r2, r3
 8001828:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800182c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001830:	601a      	str	r2, [r3, #0]
  return result;
 8001832:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001836:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800183a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800183c:	fab3 f383 	clz	r3, r3
 8001840:	b2db      	uxtb	r3, r3
 8001842:	095b      	lsrs	r3, r3, #5
 8001844:	b2db      	uxtb	r3, r3
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	b2db      	uxtb	r3, r3
 800184c:	2b01      	cmp	r3, #1
 800184e:	d102      	bne.n	8001856 <HAL_RCC_OscConfig+0xcba>
 8001850:	4bb0      	ldr	r3, [pc, #704]	; (8001b14 <HAL_RCC_OscConfig+0xf78>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	e027      	b.n	80018a6 <HAL_RCC_OscConfig+0xd0a>
 8001856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800185a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800185e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001862:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001864:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001868:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	fa93 f2a3 	rbit	r2, r3
 8001872:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001876:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001880:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001884:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800188e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	fa93 f2a3 	rbit	r2, r3
 8001898:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800189c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	4b9c      	ldr	r3, [pc, #624]	; (8001b14 <HAL_RCC_OscConfig+0xf78>)
 80018a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018aa:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80018ae:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80018b2:	6011      	str	r1, [r2, #0]
 80018b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018b8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80018bc:	6812      	ldr	r2, [r2, #0]
 80018be:	fa92 f1a2 	rbit	r1, r2
 80018c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018c6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80018ca:	6011      	str	r1, [r2, #0]
  return result;
 80018cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80018d0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80018d4:	6812      	ldr	r2, [r2, #0]
 80018d6:	fab2 f282 	clz	r2, r2
 80018da:	b2d2      	uxtb	r2, r2
 80018dc:	f042 0220 	orr.w	r2, r2, #32
 80018e0:	b2d2      	uxtb	r2, r2
 80018e2:	f002 021f 	and.w	r2, r2, #31
 80018e6:	2101      	movs	r1, #1
 80018e8:	fa01 f202 	lsl.w	r2, r1, r2
 80018ec:	4013      	ands	r3, r2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d182      	bne.n	80017f8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018f2:	4b88      	ldr	r3, [pc, #544]	; (8001b14 <HAL_RCC_OscConfig+0xf78>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80018fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001906:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800190a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6a1b      	ldr	r3, [r3, #32]
 8001912:	430b      	orrs	r3, r1
 8001914:	497f      	ldr	r1, [pc, #508]	; (8001b14 <HAL_RCC_OscConfig+0xf78>)
 8001916:	4313      	orrs	r3, r2
 8001918:	604b      	str	r3, [r1, #4]
 800191a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800191e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001922:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001926:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001928:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800192c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	fa93 f2a3 	rbit	r2, r3
 8001936:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800193a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800193e:	601a      	str	r2, [r3, #0]
  return result;
 8001940:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001944:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001948:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800194a:	fab3 f383 	clz	r3, r3
 800194e:	b2db      	uxtb	r3, r3
 8001950:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001954:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	461a      	mov	r2, r3
 800195c:	2301      	movs	r3, #1
 800195e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001960:	f7fe fe5a 	bl	8000618 <HAL_GetTick>
 8001964:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001968:	e009      	b.n	800197e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800196a:	f7fe fe55 	bl	8000618 <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e144      	b.n	8001c08 <HAL_RCC_OscConfig+0x106c>
 800197e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001982:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001986:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800198a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001990:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	fa93 f2a3 	rbit	r2, r3
 800199a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800199e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80019a2:	601a      	str	r2, [r3, #0]
  return result;
 80019a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a8:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 80019ac:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019ae:	fab3 f383 	clz	r3, r3
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	095b      	lsrs	r3, r3, #5
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d102      	bne.n	80019c8 <HAL_RCC_OscConfig+0xe2c>
 80019c2:	4b54      	ldr	r3, [pc, #336]	; (8001b14 <HAL_RCC_OscConfig+0xf78>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	e027      	b.n	8001a18 <HAL_RCC_OscConfig+0xe7c>
 80019c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019cc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80019d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019da:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	fa93 f2a3 	rbit	r2, r3
 80019e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019f2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80019f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a00:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	fa93 f2a3 	rbit	r2, r3
 8001a0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a0e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	4b3f      	ldr	r3, [pc, #252]	; (8001b14 <HAL_RCC_OscConfig+0xf78>)
 8001a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a1c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001a20:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a24:	6011      	str	r1, [r2, #0]
 8001a26:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a2a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001a2e:	6812      	ldr	r2, [r2, #0]
 8001a30:	fa92 f1a2 	rbit	r1, r2
 8001a34:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a38:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001a3c:	6011      	str	r1, [r2, #0]
  return result;
 8001a3e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a42:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001a46:	6812      	ldr	r2, [r2, #0]
 8001a48:	fab2 f282 	clz	r2, r2
 8001a4c:	b2d2      	uxtb	r2, r2
 8001a4e:	f042 0220 	orr.w	r2, r2, #32
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	f002 021f 	and.w	r2, r2, #31
 8001a58:	2101      	movs	r1, #1
 8001a5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a5e:	4013      	ands	r3, r2
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d082      	beq.n	800196a <HAL_RCC_OscConfig+0xdce>
 8001a64:	e0cf      	b.n	8001c06 <HAL_RCC_OscConfig+0x106a>
 8001a66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a6a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001a6e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a78:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	fa93 f2a3 	rbit	r2, r3
 8001a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a86:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001a8a:	601a      	str	r2, [r3, #0]
  return result;
 8001a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a90:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001a94:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a96:	fab3 f383 	clz	r3, r3
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001aa0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aac:	f7fe fdb4 	bl	8000618 <HAL_GetTick>
 8001ab0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ab4:	e009      	b.n	8001aca <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ab6:	f7fe fdaf 	bl	8000618 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e09e      	b.n	8001c08 <HAL_RCC_OscConfig+0x106c>
 8001aca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ace:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001ad2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ad6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001adc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	fa93 f2a3 	rbit	r2, r3
 8001ae6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aea:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001aee:	601a      	str	r2, [r3, #0]
  return result;
 8001af0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001af4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001af8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001afa:	fab3 f383 	clz	r3, r3
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	095b      	lsrs	r3, r3, #5
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	f043 0301 	orr.w	r3, r3, #1
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d104      	bne.n	8001b18 <HAL_RCC_OscConfig+0xf7c>
 8001b0e:	4b01      	ldr	r3, [pc, #4]	; (8001b14 <HAL_RCC_OscConfig+0xf78>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	e029      	b.n	8001b68 <HAL_RCC_OscConfig+0xfcc>
 8001b14:	40021000 	.word	0x40021000
 8001b18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b1c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001b20:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b2a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	fa93 f2a3 	rbit	r2, r3
 8001b34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b38:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b42:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001b46:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b50:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	fa93 f2a3 	rbit	r2, r3
 8001b5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b5e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	4b2b      	ldr	r3, [pc, #172]	; (8001c14 <HAL_RCC_OscConfig+0x1078>)
 8001b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b68:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b6c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001b70:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b74:	6011      	str	r1, [r2, #0]
 8001b76:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b7a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001b7e:	6812      	ldr	r2, [r2, #0]
 8001b80:	fa92 f1a2 	rbit	r1, r2
 8001b84:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b88:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001b8c:	6011      	str	r1, [r2, #0]
  return result;
 8001b8e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b92:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001b96:	6812      	ldr	r2, [r2, #0]
 8001b98:	fab2 f282 	clz	r2, r2
 8001b9c:	b2d2      	uxtb	r2, r2
 8001b9e:	f042 0220 	orr.w	r2, r2, #32
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	f002 021f 	and.w	r2, r2, #31
 8001ba8:	2101      	movs	r1, #1
 8001baa:	fa01 f202 	lsl.w	r2, r1, r2
 8001bae:	4013      	ands	r3, r2
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d180      	bne.n	8001ab6 <HAL_RCC_OscConfig+0xf1a>
 8001bb4:	e027      	b.n	8001c06 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d101      	bne.n	8001bca <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e01e      	b.n	8001c08 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bca:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <HAL_RCC_OscConfig+0x1078>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001bd2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001bd6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001bda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bde:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	6a1b      	ldr	r3, [r3, #32]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d10b      	bne.n	8001c02 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001bea:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001bee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001bf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d001      	beq.n	8001c06 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e000      	b.n	8001c08 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40021000 	.word	0x40021000

08001c18 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b09e      	sub	sp, #120	; 0x78
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c22:	2300      	movs	r3, #0
 8001c24:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d101      	bne.n	8001c30 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e162      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c30:	4b90      	ldr	r3, [pc, #576]	; (8001e74 <HAL_RCC_ClockConfig+0x25c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d910      	bls.n	8001c60 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c3e:	4b8d      	ldr	r3, [pc, #564]	; (8001e74 <HAL_RCC_ClockConfig+0x25c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f023 0207 	bic.w	r2, r3, #7
 8001c46:	498b      	ldr	r1, [pc, #556]	; (8001e74 <HAL_RCC_ClockConfig+0x25c>)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c4e:	4b89      	ldr	r3, [pc, #548]	; (8001e74 <HAL_RCC_ClockConfig+0x25c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	683a      	ldr	r2, [r7, #0]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d001      	beq.n	8001c60 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e14a      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d008      	beq.n	8001c7e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c6c:	4b82      	ldr	r3, [pc, #520]	; (8001e78 <HAL_RCC_ClockConfig+0x260>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	497f      	ldr	r1, [pc, #508]	; (8001e78 <HAL_RCC_ClockConfig+0x260>)
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f000 80dc 	beq.w	8001e44 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d13c      	bne.n	8001d0e <HAL_RCC_ClockConfig+0xf6>
 8001c94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c98:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c9c:	fa93 f3a3 	rbit	r3, r3
 8001ca0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001ca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca4:	fab3 f383 	clz	r3, r3
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	095b      	lsrs	r3, r3, #5
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	f043 0301 	orr.w	r3, r3, #1
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d102      	bne.n	8001cbe <HAL_RCC_ClockConfig+0xa6>
 8001cb8:	4b6f      	ldr	r3, [pc, #444]	; (8001e78 <HAL_RCC_ClockConfig+0x260>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	e00f      	b.n	8001cde <HAL_RCC_ClockConfig+0xc6>
 8001cbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cc2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001cc6:	fa93 f3a3 	rbit	r3, r3
 8001cca:	667b      	str	r3, [r7, #100]	; 0x64
 8001ccc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cd0:	663b      	str	r3, [r7, #96]	; 0x60
 8001cd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001cd4:	fa93 f3a3 	rbit	r3, r3
 8001cd8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001cda:	4b67      	ldr	r3, [pc, #412]	; (8001e78 <HAL_RCC_ClockConfig+0x260>)
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cde:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ce2:	65ba      	str	r2, [r7, #88]	; 0x58
 8001ce4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001ce6:	fa92 f2a2 	rbit	r2, r2
 8001cea:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001cec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001cee:	fab2 f282 	clz	r2, r2
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	f042 0220 	orr.w	r2, r2, #32
 8001cf8:	b2d2      	uxtb	r2, r2
 8001cfa:	f002 021f 	and.w	r2, r2, #31
 8001cfe:	2101      	movs	r1, #1
 8001d00:	fa01 f202 	lsl.w	r2, r1, r2
 8001d04:	4013      	ands	r3, r2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d17b      	bne.n	8001e02 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e0f3      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d13c      	bne.n	8001d90 <HAL_RCC_ClockConfig+0x178>
 8001d16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d1a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d1e:	fa93 f3a3 	rbit	r3, r3
 8001d22:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001d24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d26:	fab3 f383 	clz	r3, r3
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	095b      	lsrs	r3, r3, #5
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d102      	bne.n	8001d40 <HAL_RCC_ClockConfig+0x128>
 8001d3a:	4b4f      	ldr	r3, [pc, #316]	; (8001e78 <HAL_RCC_ClockConfig+0x260>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	e00f      	b.n	8001d60 <HAL_RCC_ClockConfig+0x148>
 8001d40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d44:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d48:	fa93 f3a3 	rbit	r3, r3
 8001d4c:	647b      	str	r3, [r7, #68]	; 0x44
 8001d4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d52:	643b      	str	r3, [r7, #64]	; 0x40
 8001d54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d56:	fa93 f3a3 	rbit	r3, r3
 8001d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d5c:	4b46      	ldr	r3, [pc, #280]	; (8001e78 <HAL_RCC_ClockConfig+0x260>)
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d64:	63ba      	str	r2, [r7, #56]	; 0x38
 8001d66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d68:	fa92 f2a2 	rbit	r2, r2
 8001d6c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001d6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d70:	fab2 f282 	clz	r2, r2
 8001d74:	b2d2      	uxtb	r2, r2
 8001d76:	f042 0220 	orr.w	r2, r2, #32
 8001d7a:	b2d2      	uxtb	r2, r2
 8001d7c:	f002 021f 	and.w	r2, r2, #31
 8001d80:	2101      	movs	r1, #1
 8001d82:	fa01 f202 	lsl.w	r2, r1, r2
 8001d86:	4013      	ands	r3, r2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d13a      	bne.n	8001e02 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e0b2      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x2de>
 8001d90:	2302      	movs	r3, #2
 8001d92:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d96:	fa93 f3a3 	rbit	r3, r3
 8001d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d9e:	fab3 f383 	clz	r3, r3
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	095b      	lsrs	r3, r3, #5
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	f043 0301 	orr.w	r3, r3, #1
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d102      	bne.n	8001db8 <HAL_RCC_ClockConfig+0x1a0>
 8001db2:	4b31      	ldr	r3, [pc, #196]	; (8001e78 <HAL_RCC_ClockConfig+0x260>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	e00d      	b.n	8001dd4 <HAL_RCC_ClockConfig+0x1bc>
 8001db8:	2302      	movs	r3, #2
 8001dba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dbe:	fa93 f3a3 	rbit	r3, r3
 8001dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	623b      	str	r3, [r7, #32]
 8001dc8:	6a3b      	ldr	r3, [r7, #32]
 8001dca:	fa93 f3a3 	rbit	r3, r3
 8001dce:	61fb      	str	r3, [r7, #28]
 8001dd0:	4b29      	ldr	r3, [pc, #164]	; (8001e78 <HAL_RCC_ClockConfig+0x260>)
 8001dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd4:	2202      	movs	r2, #2
 8001dd6:	61ba      	str	r2, [r7, #24]
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	fa92 f2a2 	rbit	r2, r2
 8001dde:	617a      	str	r2, [r7, #20]
  return result;
 8001de0:	697a      	ldr	r2, [r7, #20]
 8001de2:	fab2 f282 	clz	r2, r2
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	f042 0220 	orr.w	r2, r2, #32
 8001dec:	b2d2      	uxtb	r2, r2
 8001dee:	f002 021f 	and.w	r2, r2, #31
 8001df2:	2101      	movs	r1, #1
 8001df4:	fa01 f202 	lsl.w	r2, r1, r2
 8001df8:	4013      	ands	r3, r2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d101      	bne.n	8001e02 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e079      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e02:	4b1d      	ldr	r3, [pc, #116]	; (8001e78 <HAL_RCC_ClockConfig+0x260>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f023 0203 	bic.w	r2, r3, #3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	491a      	ldr	r1, [pc, #104]	; (8001e78 <HAL_RCC_ClockConfig+0x260>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e14:	f7fe fc00 	bl	8000618 <HAL_GetTick>
 8001e18:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e1a:	e00a      	b.n	8001e32 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e1c:	f7fe fbfc 	bl	8000618 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e061      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e32:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <HAL_RCC_ClockConfig+0x260>)
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f003 020c 	and.w	r2, r3, #12
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d1eb      	bne.n	8001e1c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e44:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <HAL_RCC_ClockConfig+0x25c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d214      	bcs.n	8001e7c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e52:	4b08      	ldr	r3, [pc, #32]	; (8001e74 <HAL_RCC_ClockConfig+0x25c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f023 0207 	bic.w	r2, r3, #7
 8001e5a:	4906      	ldr	r1, [pc, #24]	; (8001e74 <HAL_RCC_ClockConfig+0x25c>)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e62:	4b04      	ldr	r3, [pc, #16]	; (8001e74 <HAL_RCC_ClockConfig+0x25c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d005      	beq.n	8001e7c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e040      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x2de>
 8001e74:	40022000 	.word	0x40022000
 8001e78:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0304 	and.w	r3, r3, #4
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d008      	beq.n	8001e9a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e88:	4b1d      	ldr	r3, [pc, #116]	; (8001f00 <HAL_RCC_ClockConfig+0x2e8>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	491a      	ldr	r1, [pc, #104]	; (8001f00 <HAL_RCC_ClockConfig+0x2e8>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0308 	and.w	r3, r3, #8
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d009      	beq.n	8001eba <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ea6:	4b16      	ldr	r3, [pc, #88]	; (8001f00 <HAL_RCC_ClockConfig+0x2e8>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	4912      	ldr	r1, [pc, #72]	; (8001f00 <HAL_RCC_ClockConfig+0x2e8>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001eba:	f000 f829 	bl	8001f10 <HAL_RCC_GetSysClockFreq>
 8001ebe:	4601      	mov	r1, r0
 8001ec0:	4b0f      	ldr	r3, [pc, #60]	; (8001f00 <HAL_RCC_ClockConfig+0x2e8>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ec8:	22f0      	movs	r2, #240	; 0xf0
 8001eca:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	fa92 f2a2 	rbit	r2, r2
 8001ed2:	60fa      	str	r2, [r7, #12]
  return result;
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	fab2 f282 	clz	r2, r2
 8001eda:	b2d2      	uxtb	r2, r2
 8001edc:	40d3      	lsrs	r3, r2
 8001ede:	4a09      	ldr	r2, [pc, #36]	; (8001f04 <HAL_RCC_ClockConfig+0x2ec>)
 8001ee0:	5cd3      	ldrb	r3, [r2, r3]
 8001ee2:	fa21 f303 	lsr.w	r3, r1, r3
 8001ee6:	4a08      	ldr	r2, [pc, #32]	; (8001f08 <HAL_RCC_ClockConfig+0x2f0>)
 8001ee8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001eea:	4b08      	ldr	r3, [pc, #32]	; (8001f0c <HAL_RCC_ClockConfig+0x2f4>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7fe fb4e 	bl	8000590 <HAL_InitTick>
  
  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3778      	adds	r7, #120	; 0x78
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40021000 	.word	0x40021000
 8001f04:	08002b84 	.word	0x08002b84
 8001f08:	20000000 	.word	0x20000000
 8001f0c:	20000004 	.word	0x20000004

08001f10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b08b      	sub	sp, #44	; 0x2c
 8001f14:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f16:	2300      	movs	r3, #0
 8001f18:	61fb      	str	r3, [r7, #28]
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61bb      	str	r3, [r7, #24]
 8001f1e:	2300      	movs	r3, #0
 8001f20:	627b      	str	r3, [r7, #36]	; 0x24
 8001f22:	2300      	movs	r3, #0
 8001f24:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001f26:	2300      	movs	r3, #0
 8001f28:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001f2a:	4b29      	ldr	r3, [pc, #164]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	f003 030c 	and.w	r3, r3, #12
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	d002      	beq.n	8001f40 <HAL_RCC_GetSysClockFreq+0x30>
 8001f3a:	2b08      	cmp	r3, #8
 8001f3c:	d003      	beq.n	8001f46 <HAL_RCC_GetSysClockFreq+0x36>
 8001f3e:	e03c      	b.n	8001fba <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f40:	4b24      	ldr	r3, [pc, #144]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f42:	623b      	str	r3, [r7, #32]
      break;
 8001f44:	e03c      	b.n	8001fc0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001f4c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001f50:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f52:	68ba      	ldr	r2, [r7, #8]
 8001f54:	fa92 f2a2 	rbit	r2, r2
 8001f58:	607a      	str	r2, [r7, #4]
  return result;
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	fab2 f282 	clz	r2, r2
 8001f60:	b2d2      	uxtb	r2, r2
 8001f62:	40d3      	lsrs	r3, r2
 8001f64:	4a1c      	ldr	r2, [pc, #112]	; (8001fd8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001f66:	5cd3      	ldrb	r3, [r2, r3]
 8001f68:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001f6a:	4b19      	ldr	r3, [pc, #100]	; (8001fd0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f6e:	f003 030f 	and.w	r3, r3, #15
 8001f72:	220f      	movs	r2, #15
 8001f74:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	fa92 f2a2 	rbit	r2, r2
 8001f7c:	60fa      	str	r2, [r7, #12]
  return result;
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	fab2 f282 	clz	r2, r2
 8001f84:	b2d2      	uxtb	r2, r2
 8001f86:	40d3      	lsrs	r3, r2
 8001f88:	4a14      	ldr	r2, [pc, #80]	; (8001fdc <HAL_RCC_GetSysClockFreq+0xcc>)
 8001f8a:	5cd3      	ldrb	r3, [r2, r3]
 8001f8c:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d008      	beq.n	8001faa <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f98:	4a0e      	ldr	r2, [pc, #56]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	fb02 f303 	mul.w	r3, r2, r3
 8001fa6:	627b      	str	r3, [r7, #36]	; 0x24
 8001fa8:	e004      	b.n	8001fb4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	4a0c      	ldr	r2, [pc, #48]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001fae:	fb02 f303 	mul.w	r3, r2, r3
 8001fb2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb6:	623b      	str	r3, [r7, #32]
      break;
 8001fb8:	e002      	b.n	8001fc0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fba:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001fbc:	623b      	str	r3, [r7, #32]
      break;
 8001fbe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fc0:	6a3b      	ldr	r3, [r7, #32]
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	372c      	adds	r7, #44	; 0x2c
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	007a1200 	.word	0x007a1200
 8001fd8:	08002b94 	.word	0x08002b94
 8001fdc:	08002ba4 	.word	0x08002ba4
 8001fe0:	003d0900 	.word	0x003d0900

08001fe4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b092      	sub	sp, #72	; 0x48
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001fec:	2300      	movs	r3, #0
 8001fee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002002:	2b00      	cmp	r3, #0
 8002004:	f000 80cd 	beq.w	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002008:	4b8e      	ldr	r3, [pc, #568]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800200a:	69db      	ldr	r3, [r3, #28]
 800200c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d10e      	bne.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002014:	4b8b      	ldr	r3, [pc, #556]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002016:	69db      	ldr	r3, [r3, #28]
 8002018:	4a8a      	ldr	r2, [pc, #552]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800201a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800201e:	61d3      	str	r3, [r2, #28]
 8002020:	4b88      	ldr	r3, [pc, #544]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002022:	69db      	ldr	r3, [r3, #28]
 8002024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002028:	60bb      	str	r3, [r7, #8]
 800202a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800202c:	2301      	movs	r3, #1
 800202e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002032:	4b85      	ldr	r3, [pc, #532]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203a:	2b00      	cmp	r3, #0
 800203c:	d118      	bne.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800203e:	4b82      	ldr	r3, [pc, #520]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a81      	ldr	r2, [pc, #516]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002048:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800204a:	f7fe fae5 	bl	8000618 <HAL_GetTick>
 800204e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002050:	e008      	b.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002052:	f7fe fae1 	bl	8000618 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b64      	cmp	r3, #100	; 0x64
 800205e:	d901      	bls.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e0ea      	b.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002064:	4b78      	ldr	r3, [pc, #480]	; (8002248 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0f0      	beq.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002070:	4b74      	ldr	r3, [pc, #464]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002078:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800207a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800207c:	2b00      	cmp	r3, #0
 800207e:	d07d      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002088:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800208a:	429a      	cmp	r2, r3
 800208c:	d076      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800208e:	4b6d      	ldr	r3, [pc, #436]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002090:	6a1b      	ldr	r3, [r3, #32]
 8002092:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002096:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002098:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800209c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a0:	fa93 f3a3 	rbit	r3, r3
 80020a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80020a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020a8:	fab3 f383 	clz	r3, r3
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	461a      	mov	r2, r3
 80020b0:	4b66      	ldr	r3, [pc, #408]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80020b2:	4413      	add	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	461a      	mov	r2, r3
 80020b8:	2301      	movs	r3, #1
 80020ba:	6013      	str	r3, [r2, #0]
 80020bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020c4:	fa93 f3a3 	rbit	r3, r3
 80020c8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80020ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020cc:	fab3 f383 	clz	r3, r3
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	461a      	mov	r2, r3
 80020d4:	4b5d      	ldr	r3, [pc, #372]	; (800224c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80020d6:	4413      	add	r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	461a      	mov	r2, r3
 80020dc:	2300      	movs	r3, #0
 80020de:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80020e0:	4a58      	ldr	r2, [pc, #352]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020e4:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80020e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020e8:	f003 0301 	and.w	r3, r3, #1
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d045      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f0:	f7fe fa92 	bl	8000618 <HAL_GetTick>
 80020f4:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020f6:	e00a      	b.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020f8:	f7fe fa8e 	bl	8000618 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	f241 3288 	movw	r2, #5000	; 0x1388
 8002106:	4293      	cmp	r3, r2
 8002108:	d901      	bls.n	800210e <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e095      	b.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x256>
 800210e:	2302      	movs	r3, #2
 8002110:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002114:	fa93 f3a3 	rbit	r3, r3
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
 800211a:	2302      	movs	r3, #2
 800211c:	623b      	str	r3, [r7, #32]
 800211e:	6a3b      	ldr	r3, [r7, #32]
 8002120:	fa93 f3a3 	rbit	r3, r3
 8002124:	61fb      	str	r3, [r7, #28]
  return result;
 8002126:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002128:	fab3 f383 	clz	r3, r3
 800212c:	b2db      	uxtb	r3, r3
 800212e:	095b      	lsrs	r3, r3, #5
 8002130:	b2db      	uxtb	r3, r3
 8002132:	f043 0302 	orr.w	r3, r3, #2
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d102      	bne.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800213c:	4b41      	ldr	r3, [pc, #260]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	e007      	b.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002142:	2302      	movs	r3, #2
 8002144:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	fa93 f3a3 	rbit	r3, r3
 800214c:	617b      	str	r3, [r7, #20]
 800214e:	4b3d      	ldr	r3, [pc, #244]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002152:	2202      	movs	r2, #2
 8002154:	613a      	str	r2, [r7, #16]
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	fa92 f2a2 	rbit	r2, r2
 800215c:	60fa      	str	r2, [r7, #12]
  return result;
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	fab2 f282 	clz	r2, r2
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	f002 021f 	and.w	r2, r2, #31
 8002170:	2101      	movs	r1, #1
 8002172:	fa01 f202 	lsl.w	r2, r1, r2
 8002176:	4013      	ands	r3, r2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d0bd      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800217c:	4b31      	ldr	r3, [pc, #196]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	492e      	ldr	r1, [pc, #184]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800218a:	4313      	orrs	r3, r2
 800218c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800218e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002192:	2b01      	cmp	r3, #1
 8002194:	d105      	bne.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002196:	4b2b      	ldr	r3, [pc, #172]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	4a2a      	ldr	r2, [pc, #168]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800219c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021a0:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d008      	beq.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021ae:	4b25      	ldr	r3, [pc, #148]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	f023 0203 	bic.w	r2, r3, #3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	4922      	ldr	r1, [pc, #136]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0320 	and.w	r3, r3, #32
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d008      	beq.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021cc:	4b1d      	ldr	r3, [pc, #116]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d0:	f023 0210 	bic.w	r2, r3, #16
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	491a      	ldr	r1, [pc, #104]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d008      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80021ea:	4b16      	ldr	r3, [pc, #88]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ee:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	4913      	ldr	r1, [pc, #76]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d008      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002208:	4b0e      	ldr	r3, [pc, #56]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800220a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	695b      	ldr	r3, [r3, #20]
 8002214:	490b      	ldr	r1, [pc, #44]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002216:	4313      	orrs	r3, r2
 8002218:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d008      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002226:	4b07      	ldr	r3, [pc, #28]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	4904      	ldr	r1, [pc, #16]	; (8002244 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002234:	4313      	orrs	r3, r2
 8002236:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3748      	adds	r7, #72	; 0x48
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	40021000 	.word	0x40021000
 8002248:	40007000 	.word	0x40007000
 800224c:	10908100 	.word	0x10908100

08002250 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e049      	b.n	80022f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b00      	cmp	r3, #0
 800226c:	d106      	bne.n	800227c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f7fe f8de 	bl	8000438 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2202      	movs	r2, #2
 8002280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3304      	adds	r3, #4
 800228c:	4619      	mov	r1, r3
 800228e:	4610      	mov	r0, r2
 8002290:	f000 faa2 	bl	80027d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2201      	movs	r2, #1
 80022a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2201      	movs	r2, #1
 80022d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
	...

08002300 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b01      	cmp	r3, #1
 8002312:	d001      	beq.n	8002318 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e040      	b.n	800239a <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2202      	movs	r2, #2
 800231c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68da      	ldr	r2, [r3, #12]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f042 0201 	orr.w	r2, r2, #1
 800232e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a1c      	ldr	r2, [pc, #112]	; (80023a8 <HAL_TIM_Base_Start_IT+0xa8>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d00e      	beq.n	8002358 <HAL_TIM_Base_Start_IT+0x58>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002342:	d009      	beq.n	8002358 <HAL_TIM_Base_Start_IT+0x58>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a18      	ldr	r2, [pc, #96]	; (80023ac <HAL_TIM_Base_Start_IT+0xac>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d004      	beq.n	8002358 <HAL_TIM_Base_Start_IT+0x58>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a17      	ldr	r2, [pc, #92]	; (80023b0 <HAL_TIM_Base_Start_IT+0xb0>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d115      	bne.n	8002384 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	689a      	ldr	r2, [r3, #8]
 800235e:	4b15      	ldr	r3, [pc, #84]	; (80023b4 <HAL_TIM_Base_Start_IT+0xb4>)
 8002360:	4013      	ands	r3, r2
 8002362:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2b06      	cmp	r3, #6
 8002368:	d015      	beq.n	8002396 <HAL_TIM_Base_Start_IT+0x96>
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002370:	d011      	beq.n	8002396 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f042 0201 	orr.w	r2, r2, #1
 8002380:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002382:	e008      	b.n	8002396 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f042 0201 	orr.w	r2, r2, #1
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	e000      	b.n	8002398 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002396:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3714      	adds	r7, #20
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	40012c00 	.word	0x40012c00
 80023ac:	40000400 	.word	0x40000400
 80023b0:	40014000 	.word	0x40014000
 80023b4:	00010007 	.word	0x00010007

080023b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d122      	bne.n	8002414 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d11b      	bne.n	8002414 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f06f 0202 	mvn.w	r2, #2
 80023e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	f003 0303 	and.w	r3, r3, #3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f000 f9ce 	bl	800279c <HAL_TIM_IC_CaptureCallback>
 8002400:	e005      	b.n	800240e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 f9c0 	bl	8002788 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f000 f9d1 	bl	80027b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	f003 0304 	and.w	r3, r3, #4
 800241e:	2b04      	cmp	r3, #4
 8002420:	d122      	bne.n	8002468 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	2b04      	cmp	r3, #4
 800242e:	d11b      	bne.n	8002468 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f06f 0204 	mvn.w	r2, #4
 8002438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2202      	movs	r2, #2
 800243e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f000 f9a4 	bl	800279c <HAL_TIM_IC_CaptureCallback>
 8002454:	e005      	b.n	8002462 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 f996 	bl	8002788 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 f9a7 	bl	80027b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	f003 0308 	and.w	r3, r3, #8
 8002472:	2b08      	cmp	r3, #8
 8002474:	d122      	bne.n	80024bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	f003 0308 	and.w	r3, r3, #8
 8002480:	2b08      	cmp	r3, #8
 8002482:	d11b      	bne.n	80024bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f06f 0208 	mvn.w	r2, #8
 800248c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2204      	movs	r2, #4
 8002492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	f003 0303 	and.w	r3, r3, #3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 f97a 	bl	800279c <HAL_TIM_IC_CaptureCallback>
 80024a8:	e005      	b.n	80024b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 f96c 	bl	8002788 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 f97d 	bl	80027b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	f003 0310 	and.w	r3, r3, #16
 80024c6:	2b10      	cmp	r3, #16
 80024c8:	d122      	bne.n	8002510 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	f003 0310 	and.w	r3, r3, #16
 80024d4:	2b10      	cmp	r3, #16
 80024d6:	d11b      	bne.n	8002510 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f06f 0210 	mvn.w	r2, #16
 80024e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2208      	movs	r2, #8
 80024e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 f950 	bl	800279c <HAL_TIM_IC_CaptureCallback>
 80024fc:	e005      	b.n	800250a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f942 	bl	8002788 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f000 f953 	bl	80027b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b01      	cmp	r3, #1
 800251c:	d10e      	bne.n	800253c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	f003 0301 	and.w	r3, r3, #1
 8002528:	2b01      	cmp	r3, #1
 800252a:	d107      	bne.n	800253c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f06f 0201 	mvn.w	r2, #1
 8002534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7fd ff44 	bl	80003c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002546:	2b80      	cmp	r3, #128	; 0x80
 8002548:	d10e      	bne.n	8002568 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002554:	2b80      	cmp	r3, #128	; 0x80
 8002556:	d107      	bne.n	8002568 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 fac2 	bl	8002aec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002572:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002576:	d10e      	bne.n	8002596 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002582:	2b80      	cmp	r3, #128	; 0x80
 8002584:	d107      	bne.n	8002596 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800258e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f000 fab5 	bl	8002b00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a0:	2b40      	cmp	r3, #64	; 0x40
 80025a2:	d10e      	bne.n	80025c2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ae:	2b40      	cmp	r3, #64	; 0x40
 80025b0:	d107      	bne.n	80025c2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f000 f901 	bl	80027c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	f003 0320 	and.w	r3, r3, #32
 80025cc:	2b20      	cmp	r3, #32
 80025ce:	d10e      	bne.n	80025ee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	f003 0320 	and.w	r3, r3, #32
 80025da:	2b20      	cmp	r3, #32
 80025dc:	d107      	bne.n	80025ee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f06f 0220 	mvn.w	r2, #32
 80025e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f000 fa75 	bl	8002ad8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025ee:	bf00      	nop
 80025f0:	3708      	adds	r7, #8
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b084      	sub	sp, #16
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
 80025fe:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002600:	2300      	movs	r3, #0
 8002602:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800260a:	2b01      	cmp	r3, #1
 800260c:	d101      	bne.n	8002612 <HAL_TIM_ConfigClockSource+0x1c>
 800260e:	2302      	movs	r3, #2
 8002610:	e0b6      	b.n	8002780 <HAL_TIM_ConfigClockSource+0x18a>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2201      	movs	r2, #1
 8002616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2202      	movs	r2, #2
 800261e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002630:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002634:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800263c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68ba      	ldr	r2, [r7, #8]
 8002644:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800264e:	d03e      	beq.n	80026ce <HAL_TIM_ConfigClockSource+0xd8>
 8002650:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002654:	f200 8087 	bhi.w	8002766 <HAL_TIM_ConfigClockSource+0x170>
 8002658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800265c:	f000 8086 	beq.w	800276c <HAL_TIM_ConfigClockSource+0x176>
 8002660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002664:	d87f      	bhi.n	8002766 <HAL_TIM_ConfigClockSource+0x170>
 8002666:	2b70      	cmp	r3, #112	; 0x70
 8002668:	d01a      	beq.n	80026a0 <HAL_TIM_ConfigClockSource+0xaa>
 800266a:	2b70      	cmp	r3, #112	; 0x70
 800266c:	d87b      	bhi.n	8002766 <HAL_TIM_ConfigClockSource+0x170>
 800266e:	2b60      	cmp	r3, #96	; 0x60
 8002670:	d050      	beq.n	8002714 <HAL_TIM_ConfigClockSource+0x11e>
 8002672:	2b60      	cmp	r3, #96	; 0x60
 8002674:	d877      	bhi.n	8002766 <HAL_TIM_ConfigClockSource+0x170>
 8002676:	2b50      	cmp	r3, #80	; 0x50
 8002678:	d03c      	beq.n	80026f4 <HAL_TIM_ConfigClockSource+0xfe>
 800267a:	2b50      	cmp	r3, #80	; 0x50
 800267c:	d873      	bhi.n	8002766 <HAL_TIM_ConfigClockSource+0x170>
 800267e:	2b40      	cmp	r3, #64	; 0x40
 8002680:	d058      	beq.n	8002734 <HAL_TIM_ConfigClockSource+0x13e>
 8002682:	2b40      	cmp	r3, #64	; 0x40
 8002684:	d86f      	bhi.n	8002766 <HAL_TIM_ConfigClockSource+0x170>
 8002686:	2b30      	cmp	r3, #48	; 0x30
 8002688:	d064      	beq.n	8002754 <HAL_TIM_ConfigClockSource+0x15e>
 800268a:	2b30      	cmp	r3, #48	; 0x30
 800268c:	d86b      	bhi.n	8002766 <HAL_TIM_ConfigClockSource+0x170>
 800268e:	2b20      	cmp	r3, #32
 8002690:	d060      	beq.n	8002754 <HAL_TIM_ConfigClockSource+0x15e>
 8002692:	2b20      	cmp	r3, #32
 8002694:	d867      	bhi.n	8002766 <HAL_TIM_ConfigClockSource+0x170>
 8002696:	2b00      	cmp	r3, #0
 8002698:	d05c      	beq.n	8002754 <HAL_TIM_ConfigClockSource+0x15e>
 800269a:	2b10      	cmp	r3, #16
 800269c:	d05a      	beq.n	8002754 <HAL_TIM_ConfigClockSource+0x15e>
 800269e:	e062      	b.n	8002766 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80026b0:	f000 f984 	bl	80029bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026c2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68ba      	ldr	r2, [r7, #8]
 80026ca:	609a      	str	r2, [r3, #8]
      break;
 80026cc:	e04f      	b.n	800276e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80026de:	f000 f96d 	bl	80029bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	689a      	ldr	r2, [r3, #8]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026f0:	609a      	str	r2, [r3, #8]
      break;
 80026f2:	e03c      	b.n	800276e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002700:	461a      	mov	r2, r3
 8002702:	f000 f8e1 	bl	80028c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2150      	movs	r1, #80	; 0x50
 800270c:	4618      	mov	r0, r3
 800270e:	f000 f93a 	bl	8002986 <TIM_ITRx_SetConfig>
      break;
 8002712:	e02c      	b.n	800276e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002720:	461a      	mov	r2, r3
 8002722:	f000 f900 	bl	8002926 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2160      	movs	r1, #96	; 0x60
 800272c:	4618      	mov	r0, r3
 800272e:	f000 f92a 	bl	8002986 <TIM_ITRx_SetConfig>
      break;
 8002732:	e01c      	b.n	800276e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002740:	461a      	mov	r2, r3
 8002742:	f000 f8c1 	bl	80028c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2140      	movs	r1, #64	; 0x40
 800274c:	4618      	mov	r0, r3
 800274e:	f000 f91a 	bl	8002986 <TIM_ITRx_SetConfig>
      break;
 8002752:	e00c      	b.n	800276e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4619      	mov	r1, r3
 800275e:	4610      	mov	r0, r2
 8002760:	f000 f911 	bl	8002986 <TIM_ITRx_SetConfig>
      break;
 8002764:	e003      	b.n	800276e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	73fb      	strb	r3, [r7, #15]
      break;
 800276a:	e000      	b.n	800276e <HAL_TIM_ConfigClockSource+0x178>
      break;
 800276c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2201      	movs	r2, #1
 8002772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800277e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002780:	4618      	mov	r0, r3
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a32      	ldr	r2, [pc, #200]	; (80028b4 <TIM_Base_SetConfig+0xdc>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d007      	beq.n	8002800 <TIM_Base_SetConfig+0x28>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f6:	d003      	beq.n	8002800 <TIM_Base_SetConfig+0x28>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a2f      	ldr	r2, [pc, #188]	; (80028b8 <TIM_Base_SetConfig+0xe0>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d108      	bne.n	8002812 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002806:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	4313      	orrs	r3, r2
 8002810:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a27      	ldr	r2, [pc, #156]	; (80028b4 <TIM_Base_SetConfig+0xdc>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d013      	beq.n	8002842 <TIM_Base_SetConfig+0x6a>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002820:	d00f      	beq.n	8002842 <TIM_Base_SetConfig+0x6a>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a24      	ldr	r2, [pc, #144]	; (80028b8 <TIM_Base_SetConfig+0xe0>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d00b      	beq.n	8002842 <TIM_Base_SetConfig+0x6a>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a23      	ldr	r2, [pc, #140]	; (80028bc <TIM_Base_SetConfig+0xe4>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d007      	beq.n	8002842 <TIM_Base_SetConfig+0x6a>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a22      	ldr	r2, [pc, #136]	; (80028c0 <TIM_Base_SetConfig+0xe8>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d003      	beq.n	8002842 <TIM_Base_SetConfig+0x6a>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a21      	ldr	r2, [pc, #132]	; (80028c4 <TIM_Base_SetConfig+0xec>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d108      	bne.n	8002854 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002848:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	4313      	orrs	r3, r2
 8002852:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	4313      	orrs	r3, r2
 8002860:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a0e      	ldr	r2, [pc, #56]	; (80028b4 <TIM_Base_SetConfig+0xdc>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d00b      	beq.n	8002898 <TIM_Base_SetConfig+0xc0>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a0e      	ldr	r2, [pc, #56]	; (80028bc <TIM_Base_SetConfig+0xe4>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d007      	beq.n	8002898 <TIM_Base_SetConfig+0xc0>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a0d      	ldr	r2, [pc, #52]	; (80028c0 <TIM_Base_SetConfig+0xe8>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d003      	beq.n	8002898 <TIM_Base_SetConfig+0xc0>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a0c      	ldr	r2, [pc, #48]	; (80028c4 <TIM_Base_SetConfig+0xec>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d103      	bne.n	80028a0 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	691a      	ldr	r2, [r3, #16]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	615a      	str	r2, [r3, #20]
}
 80028a6:	bf00      	nop
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	40012c00 	.word	0x40012c00
 80028b8:	40000400 	.word	0x40000400
 80028bc:	40014000 	.word	0x40014000
 80028c0:	40014400 	.word	0x40014400
 80028c4:	40014800 	.word	0x40014800

080028c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b087      	sub	sp, #28
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6a1b      	ldr	r3, [r3, #32]
 80028de:	f023 0201 	bic.w	r2, r3, #1
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	011b      	lsls	r3, r3, #4
 80028f8:	693a      	ldr	r2, [r7, #16]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	f023 030a 	bic.w	r3, r3, #10
 8002904:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	4313      	orrs	r3, r2
 800290c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	693a      	ldr	r2, [r7, #16]
 8002912:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	621a      	str	r2, [r3, #32]
}
 800291a:	bf00      	nop
 800291c:	371c      	adds	r7, #28
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002926:	b480      	push	{r7}
 8002928:	b087      	sub	sp, #28
 800292a:	af00      	add	r7, sp, #0
 800292c:	60f8      	str	r0, [r7, #12]
 800292e:	60b9      	str	r1, [r7, #8]
 8002930:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	f023 0210 	bic.w	r2, r3, #16
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002950:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	031b      	lsls	r3, r3, #12
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	4313      	orrs	r3, r2
 800295a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002962:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	011b      	lsls	r3, r3, #4
 8002968:	693a      	ldr	r2, [r7, #16]
 800296a:	4313      	orrs	r3, r2
 800296c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	621a      	str	r2, [r3, #32]
}
 800297a:	bf00      	nop
 800297c:	371c      	adds	r7, #28
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr

08002986 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002986:	b480      	push	{r7}
 8002988:	b085      	sub	sp, #20
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
 800298e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800299c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800299e:	683a      	ldr	r2, [r7, #0]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	f043 0307 	orr.w	r3, r3, #7
 80029a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	609a      	str	r2, [r3, #8]
}
 80029b0:	bf00      	nop
 80029b2:	3714      	adds	r7, #20
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029bc:	b480      	push	{r7}
 80029be:	b087      	sub	sp, #28
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
 80029c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	021a      	lsls	r2, r3, #8
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	431a      	orrs	r2, r3
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	697a      	ldr	r2, [r7, #20]
 80029ee:	609a      	str	r2, [r3, #8]
}
 80029f0:	bf00      	nop
 80029f2:	371c      	adds	r7, #28
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d101      	bne.n	8002a14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a10:	2302      	movs	r3, #2
 8002a12:	e054      	b.n	8002abe <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2202      	movs	r2, #2
 8002a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a24      	ldr	r2, [pc, #144]	; (8002acc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d108      	bne.n	8002a50 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002a44:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a17      	ldr	r2, [pc, #92]	; (8002acc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d00e      	beq.n	8002a92 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a7c:	d009      	beq.n	8002a92 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a13      	ldr	r2, [pc, #76]	; (8002ad0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d004      	beq.n	8002a92 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a11      	ldr	r2, [pc, #68]	; (8002ad4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d10c      	bne.n	8002aac <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	68ba      	ldr	r2, [r7, #8]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68ba      	ldr	r2, [r7, #8]
 8002aaa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3714      	adds	r7, #20
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	40012c00 	.word	0x40012c00
 8002ad0:	40000400 	.word	0x40000400
 8002ad4:	40014000 	.word	0x40014000

08002ad8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <memset>:
 8002b14:	4402      	add	r2, r0
 8002b16:	4603      	mov	r3, r0
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d100      	bne.n	8002b1e <memset+0xa>
 8002b1c:	4770      	bx	lr
 8002b1e:	f803 1b01 	strb.w	r1, [r3], #1
 8002b22:	e7f9      	b.n	8002b18 <memset+0x4>

08002b24 <__libc_init_array>:
 8002b24:	b570      	push	{r4, r5, r6, lr}
 8002b26:	4d0d      	ldr	r5, [pc, #52]	; (8002b5c <__libc_init_array+0x38>)
 8002b28:	4c0d      	ldr	r4, [pc, #52]	; (8002b60 <__libc_init_array+0x3c>)
 8002b2a:	1b64      	subs	r4, r4, r5
 8002b2c:	10a4      	asrs	r4, r4, #2
 8002b2e:	2600      	movs	r6, #0
 8002b30:	42a6      	cmp	r6, r4
 8002b32:	d109      	bne.n	8002b48 <__libc_init_array+0x24>
 8002b34:	4d0b      	ldr	r5, [pc, #44]	; (8002b64 <__libc_init_array+0x40>)
 8002b36:	4c0c      	ldr	r4, [pc, #48]	; (8002b68 <__libc_init_array+0x44>)
 8002b38:	f000 f818 	bl	8002b6c <_init>
 8002b3c:	1b64      	subs	r4, r4, r5
 8002b3e:	10a4      	asrs	r4, r4, #2
 8002b40:	2600      	movs	r6, #0
 8002b42:	42a6      	cmp	r6, r4
 8002b44:	d105      	bne.n	8002b52 <__libc_init_array+0x2e>
 8002b46:	bd70      	pop	{r4, r5, r6, pc}
 8002b48:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b4c:	4798      	blx	r3
 8002b4e:	3601      	adds	r6, #1
 8002b50:	e7ee      	b.n	8002b30 <__libc_init_array+0xc>
 8002b52:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b56:	4798      	blx	r3
 8002b58:	3601      	adds	r6, #1
 8002b5a:	e7f2      	b.n	8002b42 <__libc_init_array+0x1e>
 8002b5c:	08002bb4 	.word	0x08002bb4
 8002b60:	08002bb4 	.word	0x08002bb4
 8002b64:	08002bb4 	.word	0x08002bb4
 8002b68:	08002bb8 	.word	0x08002bb8

08002b6c <_init>:
 8002b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b6e:	bf00      	nop
 8002b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b72:	bc08      	pop	{r3}
 8002b74:	469e      	mov	lr, r3
 8002b76:	4770      	bx	lr

08002b78 <_fini>:
 8002b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b7a:	bf00      	nop
 8002b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b7e:	bc08      	pop	{r3}
 8002b80:	469e      	mov	lr, r3
 8002b82:	4770      	bx	lr
